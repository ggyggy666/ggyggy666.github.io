<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ggy的个人博客</title>
  
  <subtitle>hello,world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ggyggy666.github.io/"/>
  <updated>2021-07-09T07:30:51.477Z</updated>
  <id>https://ggyggy666.github.io/</id>
  
  <author>
    <name>ggy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC学习(3)</title>
    <link href="https://ggyggy666.github.io/2021/07/08/SpringMVC%E5%AD%A6%E4%B9%A0-3/"/>
    <id>https://ggyggy666.github.io/2021/07/08/SpringMVC%E5%AD%A6%E4%B9%A0-3/</id>
    <published>2021-07-08T12:40:29.000Z</published>
    <updated>2021-07-09T07:30:51.477Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习SSM框架的整合。狂神文章：<a href="https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng</a></p><a id="more"></a><h1 id="Mybatis层"><a href="#Mybatis层" class="headerlink" title="Mybatis层"></a>Mybatis层</h1><p>业务需求：对图书进行增删改查操作。</p><p>1.新建数据库、表，插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create database ssmbuild;</span><br><span class="line"></span><br><span class="line">use ssmbuild;</span><br><span class="line"></span><br><span class="line">create table book(</span><br><span class="line">bookID int(10) primary key not null auto_increment comment &quot;书ID&quot;,</span><br><span class="line">bookName varchar(100) not null comment &quot;书名&quot;,</span><br><span class="line">bookCounts int(11) not null comment &quot;书的数量&quot;,</span><br><span class="line">detail varchar(200) not null comment &quot;描述&quot;</span><br><span class="line">)engine&#x3D;innodb default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert into book(bookName, bookCounts, detail) values (&quot;Java&quot;, 10, &quot;从入门到精通&quot;), (&quot;Mysql&quot;, 1, &quot;必知必会&quot;), (&quot;Linux&quot;, 2, &quot;从入门到精通&quot;);</span><br></pre></td></tr></table></figure><p>2.新建Maven项目，ssmbuild，添加web框架的支持。</p><p>3.pom.xml中导入需要的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;!--Junit--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;!--数据库驱动--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.47&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;com.mchange&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;0.9.5.2&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--Servlet - JSP --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--Mybatis--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;3.5.2&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--Spring--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">       &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">       &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>4.还需要设置build标签，使Maven的静态资源能够被导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">   &lt;resources&gt;</span><br><span class="line">       &lt;resource&gt;</span><br><span class="line">           &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">           &lt;includes&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">           &lt;&#x2F;includes&gt;</span><br><span class="line">           &lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span><br><span class="line">       &lt;&#x2F;resource&gt;</span><br><span class="line">       &lt;resource&gt;</span><br><span class="line">           &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">           &lt;includes&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">               &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">           &lt;&#x2F;includes&gt;</span><br><span class="line">           &lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span><br><span class="line">       &lt;&#x2F;resource&gt;</span><br><span class="line">   &lt;&#x2F;resources&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><p>5.建立基本框架</p><p>com.ggy包，下面有pojo, dao, service, controller。</p><p>Mybatis层需要连接Mybatis，因此需要db.properties数据库配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssmbuild?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root</span><br></pre></td></tr></table></figure><p>如果是MySQL8以上，需要多一个参数，TimeZoneArea=Asia/Shanghai。</p><p>Mybatis-config.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">       PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">       &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>Spring需要applicationContext.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>6.在pojo包下新建Book类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Book &#123;</span><br><span class="line">    private int bookId;</span><br><span class="line">    private String bookName;</span><br><span class="line">    private int bookCounts;</span><br><span class="line">    private String detail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成有参和无参构造函数，生成Getter and Setter方法，生成toString方法。</p><p>7.dao层写接口和xml实现</p><p>BookMapper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.dao;</span><br><span class="line">import com.ggy.pojo.Book;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface BookMapper &#123;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;增加一个Book</span><br><span class="line">   int addBook(Book book);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;根据id删除一个Book</span><br><span class="line">   int deleteBookById(int id);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;更新Book</span><br><span class="line">   int updateBook(Book books);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;根据id查询,返回一个Book</span><br><span class="line">   Book queryBookById(int id);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;查询全部Book,返回list集合</span><br><span class="line">   List&lt;Book&gt; queryAllBook();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookMapper.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.ggy.dao.BookMapper&quot;&gt;</span><br><span class="line">    &lt;insert id&#x3D;&quot;addBook&quot; parameterType&#x3D;&quot;Book&quot;&gt;</span><br><span class="line">        insert into book (bookName, bookCounts, detail) values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;);</span><br><span class="line">    &lt;&#x2F;insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据id删除一个Book--&gt;</span><br><span class="line">    &lt;delete id&#x3D;&quot;deleteBookById&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">      delete from book where bookID&#x3D;#&#123;bookID&#125;</span><br><span class="line">   &lt;&#x2F;delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--更新Book--&gt;</span><br><span class="line">    &lt;update id&#x3D;&quot;updateBook&quot; parameterType&#x3D;&quot;Book&quot;&gt;</span><br><span class="line">      update books</span><br><span class="line">      set bookName &#x3D; #&#123;bookName&#125;,bookCounts &#x3D; #&#123;bookCounts&#125;,detail &#x3D; #&#123;detail&#125; where bookID &#x3D; #&#123;bookID&#125;</span><br><span class="line">   &lt;&#x2F;update&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--根据id查询,返回一个Book--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;queryBookById&quot; resultType&#x3D;&quot;Book&quot;&gt;</span><br><span class="line">      select * from book where bookID &#x3D; #&#123;bookID&#125;</span><br><span class="line">   &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--查询全部Book--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;queryAllBook&quot; resultType&#x3D;&quot;Book&quot;&gt;</span><br><span class="line">      SELECT * from books</span><br><span class="line">   &lt;&#x2F;select&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>8.在Mybatis-config.xml中注册这个Mapper.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;typeAliases&gt;</span><br><span class="line">        &lt;package name&#x3D;&quot;com.ggy.pojo&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;typeAliases&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource&#x3D;&quot;com&#x2F;ggy&#x2F;dao&#x2F;BookMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;mappers&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>9.编写业务层service，它其实也只是调用Dao层而已。</p><p>BookService</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.service;</span><br><span class="line"></span><br><span class="line">import com.ggy.pojo.Book;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;BookService:底下需要去实现,调用dao层</span><br><span class="line">public interface BookService &#123;</span><br><span class="line">   &#x2F;&#x2F;增加一个Book</span><br><span class="line">   int addBook(Book book);</span><br><span class="line">   &#x2F;&#x2F;根据id删除一个Book</span><br><span class="line">   int deleteBookById(int id);</span><br><span class="line">   &#x2F;&#x2F;更新Book</span><br><span class="line">   int updateBook(Book books);</span><br><span class="line">   &#x2F;&#x2F;根据id查询,返回一个Book</span><br><span class="line">   Book queryBookById(int id);</span><br><span class="line">   &#x2F;&#x2F;查询全部Book,返回list集合</span><br><span class="line">   List&lt;Book&gt; queryAllBook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BookServiceImpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.service;</span><br><span class="line"></span><br><span class="line">import com.ggy.dao.BookMapper;</span><br><span class="line">import com.ggy.pojo.Book;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class BookServiceImpl implements BookService &#123;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;调用dao层的操作，设置一个set接口，方便Spring管理</span><br><span class="line">   private BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   public void setBookMapper(BookMapper bookMapper) &#123;</span><br><span class="line">       this.bookMapper &#x3D; bookMapper;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   public int addBook( Book book) &#123;</span><br><span class="line">       return bookMapper.addBook(book);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   public int deleteBookById(int id) &#123;</span><br><span class="line">       return bookMapper.deleteBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   public int updateBook( Book books) &#123;</span><br><span class="line">       return bookMapper.updateBook(books);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   public  Book queryBookById(int id) &#123;</span><br><span class="line">       return bookMapper.queryBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   public List&lt;Book&gt; queryAllBook() &#123;</span><br><span class="line">       return bookMapper.queryAllBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring层"><a href="#Spring层" class="headerlink" title="Spring层"></a>Spring层</h1><p>9.Spring整合Dao层，spring-dao.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置整合mybatis --&gt;</span><br><span class="line">    &lt;!-- 1.关联数据库文件 --&gt;</span><br><span class="line">    &lt;context:property-placeholder location&#x3D;&quot;classpath:database.properties&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2.数据库连接池 --&gt;</span><br><span class="line">    &lt;!--数据库连接池</span><br><span class="line">        dbcp 半自动化操作 不能自动连接</span><br><span class="line">        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;!-- 配置连接池属性 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- c3p0连接池的私有属性 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;maxPoolSize&quot; value&#x3D;&quot;30&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;minPoolSize&quot; value&#x3D;&quot;10&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 关闭连接后不自动commit --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;autoCommitOnClose&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 获取连接超时时间 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;checkoutTimeout&quot; value&#x3D;&quot;10000&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 当获取连接失败重试次数 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;acquireRetryAttempts&quot; value&#x3D;&quot;2&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;sqlSessionFactory&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;configLocation&quot; value&#x3D;&quot;classpath:mybatis-config.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span><br><span class="line">    &lt;!--解释 ：https:&#x2F;&#x2F;www.cnblogs.com&#x2F;jpfss&#x2F;p&#x2F;7799806.html--&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;!-- 注入sqlSessionFactory --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;sqlSessionFactoryBeanName&quot; value&#x3D;&quot;sqlSessionFactory&quot;&#x2F;&gt;</span><br><span class="line">        &lt;!-- 给出需要扫描Dao接口包 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;com.kuang.dao&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/08/SpringMVC%E5%AD%A6%E4%B9%A0-3/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210709113910681.png" alt="image-20210709113910681"></p><p>一定要与applicationContext.xml在一块。</p><p>10.SPring整合Service层。spring-service.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 扫描service相关的bean --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.kuang.service&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--BookServiceImpl注入到IOC容器中--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;BookServiceImpl&quot; class&#x3D;&quot;com.kuang.service.BookServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;bookMapper&quot; ref&#x3D;&quot;bookMapper&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置事务管理器 --&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;!-- 注入数据库连接池 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC层"><a href="#SpringMVC层" class="headerlink" title="SpringMVC层"></a>SpringMVC层</h1><p>11.web.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">         version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--DispatcherServlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;DispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--encodingFilter--&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;</span><br><span class="line">            org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">        &lt;&#x2F;filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Session过期时间--&gt;</span><br><span class="line">    &lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;15&lt;&#x2F;session-timeout&gt;</span><br><span class="line">    &lt;&#x2F;session-config&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>12.spring-mvc.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">   http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">   https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置SpringMVC --&gt;</span><br><span class="line">    &lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span><br><span class="line">    &lt;mvc:annotation-driven &#x2F;&gt;</span><br><span class="line">    &lt;!-- 2.静态资源默认servlet配置--&gt;</span><br><span class="line">    &lt;mvc:default-servlet-handler&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;viewClass&quot; value&#x3D;&quot;org.springframework.web.servlet.view.JstlView&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.扫描web相关的bean --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.ggy.controller&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>13.applicationContext.xml整合其它文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;import resource&#x3D;&quot;spring-dao.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;import resource&#x3D;&quot;spring-service.xml&quot;&#x2F;&gt;</span><br><span class="line">    &lt;import resource&#x3D;&quot;spring-mvc.xml&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>14.BookController类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.controller;</span><br><span class="line"></span><br><span class="line">import com.ggy.pojo.Book;</span><br><span class="line">import com.ggy.service.BookService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;&#x2F;book&quot;)</span><br><span class="line">public class BookController &#123;</span><br><span class="line"></span><br><span class="line">   @Autowired</span><br><span class="line">   @Qualifier(&quot;BookServiceImpl&quot;)</span><br><span class="line">   private BookService bookService;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;&#x2F;allBook&quot;)</span><br><span class="line">   public String list(Model model) &#123;</span><br><span class="line">       List&lt;Book&gt; list &#x3D; bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(&quot;list&quot;, list);</span><br><span class="line">       return &quot;allBook&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;toAddBook&quot;)</span><br><span class="line">    public String toAddPaper() &#123;</span><br><span class="line">        return &quot;addBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;addBook&quot;)</span><br><span class="line">    public String addPaper(Book books) &#123;</span><br><span class="line">        System.out.println(books);</span><br><span class="line">        bookService.addBook(books);</span><br><span class="line">        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;toUpdateBook&quot;)</span><br><span class="line">    public String toUpdateBook(Model model, int id) &#123;</span><br><span class="line">        Book books &#x3D; bookService.queryBookById(id);</span><br><span class="line">        System.out.println(books);</span><br><span class="line">        model.addAttribute(&quot;book&quot;,books );</span><br><span class="line">        return &quot;updateBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;updateBook&quot;)</span><br><span class="line">    public String updateBook(Model model, Book book) &#123;</span><br><span class="line">        System.out.println(book);</span><br><span class="line">        bookService.updateBook(book);</span><br><span class="line">        Book books &#x3D; bookService.queryBookById(book.getBookID());</span><br><span class="line">        model.addAttribute(&quot;books&quot;, books);</span><br><span class="line">        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;del&#x2F;&#123;bookId&#125;&quot;)</span><br><span class="line">    public String deleteBook(@PathVariable(&quot;bookId&quot;) int id) &#123;</span><br><span class="line">        bookService.deleteBookById(id);</span><br><span class="line">        return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15.index.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; pageEncoding&#x3D;&quot;UTF-8&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;首页&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        a &#123;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: black;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">        &#125;</span><br><span class="line">        h3 &#123;</span><br><span class="line">            width: 180px;</span><br><span class="line">            height: 38px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 38px;</span><br><span class="line">            background: deepskyblue;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;allBook&quot;&gt;点击进入列表页&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>16.addBook.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;新增书籍&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;新增书籍&lt;&#x2F;small&gt;</span><br><span class="line">                &lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;addBook&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        书籍名称：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookName&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍数量：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookCounts&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        书籍详情：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;detail&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;添加&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>17.allBook.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;书籍列表&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;书籍列表 —— 显示所有书籍&lt;&#x2F;small&gt;</span><br><span class="line">                &lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-4 column&quot;&gt;</span><br><span class="line">            &lt;a class&#x3D;&quot;btn btn-primary&quot; href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;toAddBook&quot;&gt;新增&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;</span><br><span class="line">            &lt;table class&#x3D;&quot;table table-hover table-striped&quot;&gt;</span><br><span class="line">                &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;书籍编号&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;书籍名字&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;书籍数量&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;书籍详情&lt;&#x2F;th&gt;</span><br><span class="line">                    &lt;th&gt;操作&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;&#x2F;thead&gt;</span><br><span class="line"></span><br><span class="line">                &lt;tbody&gt;</span><br><span class="line">                &lt;c:forEach var&#x3D;&quot;book&quot; items&#x3D;&quot;$&#123;requestScope.get(&#39;list&#39;)&#125;&quot;&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookID()&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookName()&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td&gt;$&#123;book.getDetail()&#125;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td&gt;</span><br><span class="line">                            &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;toUpdateBook?id&#x3D;$&#123;book.getBookID()&#125;&quot;&gt;更改&lt;&#x2F;a&gt; |</span><br><span class="line">                            &lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;del&#x2F;$&#123;book.getBookID()&#125;&quot;&gt;删除&lt;&#x2F;a&gt;</span><br><span class="line">                        &lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line">                &lt;&#x2F;c:forEach&gt;</span><br><span class="line">                &lt;&#x2F;tbody&gt;</span><br><span class="line">            &lt;&#x2F;table&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>18.updateBook.jsp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;修改信息&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;row clearfix&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-12 column&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;h1&gt;</span><br><span class="line">                    &lt;small&gt;修改信息&lt;&#x2F;small&gt;</span><br><span class="line">                &lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;book&#x2F;updateBook&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;bookID&quot; value&#x3D;&quot;$&#123;book.getBookID()&#125;&quot;&#x2F;&gt;</span><br><span class="line">        书籍名称：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookName&quot; value&#x3D;&quot;$&#123;book.getBookName()&#125;&quot;&#x2F;&gt;</span><br><span class="line">        书籍数量：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;bookCounts&quot; value&#x3D;&quot;$&#123;book.getBookCounts()&#125;&quot;&#x2F;&gt;</span><br><span class="line">        书籍详情：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;detail&quot; value&#x3D;&quot;$&#123;book.getDetail() &#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>19.在项目结构中配置lib库后，配置Tomcat运行即可。</p><h1 id="总体项目结构"><a href="#总体项目结构" class="headerlink" title="总体项目结构"></a>总体项目结构</h1><p><img src="/2021/07/08/SpringMVC%E5%AD%A6%E4%B9%A0-3/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210709124324482.png" alt="image-20210709124324482"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习SSM框架的整合。狂神文章：&lt;a href=&quot;https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringMVC学习(3)" scheme="https://ggyggy666.github.io/tags/SpringMVC%E5%AD%A6%E4%B9%A0-3/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(2)</title>
    <link href="https://ggyggy666.github.io/2021/07/08/SpringMVC%E5%AD%A6%E4%B9%A0-2/"/>
    <id>https://ggyggy666.github.io/2021/07/08/SpringMVC%E5%AD%A6%E4%B9%A0-2/</id>
    <published>2021-07-08T07:50:17.000Z</published>
    <updated>2021-07-08T09:39:50.502Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续学习SpringMVC。</p><a id="more"></a><h1 id="RestFul"><a href="#RestFul" class="headerlink" title="RestFul"></a>RestFul</h1><p>正常的URL访问是：<a href="https://www.xxx.com/add?a=1&amp;b=2，这样会暴露变量名a和b，而且也容易知道使用GET方式请求。使用RestFul风格，会变成：https://www.xxxx.com/add/1/2，这样就根本不知道是什么变量和请求方式了。" target="_blank" rel="noopener">https://www.xxx.com/add?a=1&amp;b=2，这样会暴露变量名a和b，而且也容易知道使用GET方式请求。使用RestFul风格，会变成：https://www.xxxx.com/add/1/2，这样就根本不知道是什么变量和请求方式了。</a></p><p><strong>传统风格传参</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Controller1 &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;add&quot;)</span><br><span class="line">    public String sayGGY(int a, int b, Model model)&#123;</span><br><span class="line">        int c &#x3D; a+b;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;, c);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/04_Annotation_war_exploded/add?a=1&amp;b=2，得到结果3" target="_blank" rel="noopener">http://localhost:8080/04_Annotation_war_exploded/add?a=1&amp;b=2，得到结果3</a>.</p><p>传的参数名a和b必须与sayGGY中的参数a,b一致，类型也要一致。而且请求方式没有限制。</p><p><strong>RestFul风格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class Controller1 &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;&#x2F;add&#x2F;&#123;p1&#125;&#x2F;&#123;p2&#125;&quot;)</span><br><span class="line">    public String sayGGY(@PathVariable int p1, @PathVariable int p2, Model model)&#123;</span><br><span class="line">        int c &#x3D; p1+p2;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;, c);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@GetMapping表示GET请求方式，可以切换@PostMapping等方式。</li><li>/add/{p1}/{p2}，需要用路径占位符来占着传进来的变量。</li><li>@PathVariable，在参数前要添加这个。<strong>参数变量名p1,p2要与占位符一致。</strong></li></ul><p>访问：<a href="http://localhost:8080/04_Annotation_war_exploded/add/1/2即可得到结果。" target="_blank" rel="noopener">http://localhost:8080/04_Annotation_war_exploded/add/1/2即可得到结果。</a></p><h1 id="Spring转发和重定向"><a href="#Spring转发和重定向" class="headerlink" title="Spring转发和重定向"></a>Spring转发和重定向</h1><p>之前最开始是使用model.setViewName来转发文件名，注解方式是使用return “文件名”，然后与视图解析器中的前缀和后缀一起拼接再转发到对应目录的文件。那么如果不用视图解析器的话，有三种方式：</p><p>1.JSP文件的完整相对路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return &quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp&quot;</span><br></pre></td></tr></table></figure><p>2.加forward前缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return &quot;forward:&#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp&quot;</span><br></pre></td></tr></table></figure><p>1和2其实一样，都是转发,URL不变</p><p>3.加redirect重定向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return &quot;redirect:&#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp&quot;</span><br></pre></td></tr></table></figure><p>URL会变。</p><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p><strong>数据接收</strong></p><p>1.请求提交的参数名与接收的参数名必须一致。</p><p>请求是：xxx/hello?name=ggy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello(String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>name必须一致。</p><p>2.请求参数名与后台的注解的参数名一致，处理的参数名可以不一致。</p><p>请求：xxx/hello?username=ggy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name)&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>username一致。</p><p>3.提交多个参数，当然可以接收时用多个对应的参数，但是也可以使用一个对象，该对象的字段包含这些参数并且名称都一一对应。</p><p>设置一个User类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">   private int id;</span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   &#x2F;&#x2F;构造</span><br><span class="line">   &#x2F;&#x2F;get&#x2F;set</span><br><span class="line">   &#x2F;&#x2F;tostring()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求：xxx/user?id=1&amp;name=ggy&amp;age=18</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;user&quot;)</span><br><span class="line">public String user(User user)&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用一个User user来接收，字段与请求的参数名要一致。</p><p><strong>数据展示</strong></p><p>1.最初的ModelAndView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class ControllerTest1 implements Controller &#123;</span><br><span class="line"></span><br><span class="line">   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;</span><br><span class="line">       &#x2F;&#x2F;返回一个模型视图对象</span><br><span class="line">       ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line">       mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);</span><br><span class="line">       mv.setViewName(&quot;test&quot;);</span><br><span class="line">       return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.注解方式的ModelMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name, ModelMap modelMap)&#123;</span><br><span class="line">   &#x2F;&#x2F;封装要显示到视图中的数据</span><br><span class="line">   &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);</span><br><span class="line">   modelMap.addAttribute(&quot;name&quot;,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;hello&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.注解方式的Model</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;ct2&#x2F;hello&quot;)</span><br><span class="line">public String hello(@RequestParam(&quot;username&quot;) String name, Model model)&#123;</span><br><span class="line">   &#x2F;&#x2F;封装要显示到视图中的数据</span><br><span class="line">   &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);</span><br><span class="line">   model.addAttribute(&quot;msg&quot;,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   return &quot;test&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Model是简化版，大部分情况使用它就可以了。</p><h1 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h1><p>提交中文时会乱码，在web.xml中可以增加Spring的过滤器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;</span><br><span class="line">   &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">   &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">   &lt;init-param&gt;</span><br><span class="line">       &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">       &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;</span><br><span class="line">   &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">   &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">   &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>注意必须用/*才能过滤所有页面，只是/无法过滤jsp页面。</p><p>也要可能是tomcat配置文件的乱码，可能是浏览器前端展示设置的编码不正确。</p><h1 id="JSON传输"><a href="#JSON传输" class="headerlink" title="JSON传输"></a>JSON传输</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>对象转JSON字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var json &#x3D; JSON.stringify(&#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;);</span><br></pre></td></tr></table></figure><p>JSON字符串转对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; JSON.parse(&#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;);</span><br></pre></td></tr></table></figure><h2 id="后端：Jackson"><a href="#后端：Jackson" class="headerlink" title="后端：Jackson"></a>后端：Jackson</h2><p>这里先使用json解析工具jackson</p><p>1.新建一个模块05-JSON，将其添加框架支持，项目结构添加上lib。</p><p><img src="/2021/07/08/SpringMVC%E5%AD%A6%E4%B9%A0-2/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210708172216538.png" alt="image-20210708172216538"></p><p>2.在pom.xml添加jackson依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.10.5.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>3.在web.xml中增加DispatchServlet和解决乱码的请求过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">         version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--1.注册servlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">        &lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--所有请求都会被springmvc拦截 --&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>4.在springmvc-servlet.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.ggy.controller&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 视图解析器 --&gt;</span><br><span class="line">    &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">          id&#x3D;&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;!-- 前缀 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">        &lt;!-- 后缀 --&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;mvc:annotation-driven&gt;</span><br><span class="line">        &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;</span><br><span class="line">            &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;constructor-arg value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;bean&gt;</span><br><span class="line">            &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;objectMapper&quot;&gt;</span><br><span class="line">                    &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;</span><br><span class="line">                        &lt;property name&#x3D;&quot;failOnEmptyBeans&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;bean&gt;</span><br><span class="line">                &lt;&#x2F;property&gt;</span><br><span class="line">            &lt;&#x2F;bean&gt;</span><br><span class="line">        &lt;&#x2F;mvc:message-converters&gt;</span><br><span class="line">    &lt;&#x2F;mvc:annotation-driven&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>添加了返回JSON数据时乱码解决的配置。</p><p>5.编写Utils下的JsonUtils工具类，提供对象转换成JSON数据的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.utils;</span><br><span class="line"></span><br><span class="line">import com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line">public class JsonUtils &#123;</span><br><span class="line">    public static String getJson(Object object) &#123;</span><br><span class="line">        return getJson(object,&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static String getJson(Object object, String dateFormat) &#123;</span><br><span class="line">        ObjectMapper mapper &#x3D; new ObjectMapper();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;java自定义日期格式</span><br><span class="line">        SimpleDateFormat sdf &#x3D; new SimpleDateFormat(dateFormat);</span><br><span class="line">        &#x2F;&#x2F;sdf.format(date)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 使用ObjectMapper 来格式化输出</span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,false);</span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;ObjectMapper,时间解析后的默认格式为：TImestamp.时间戳</span><br><span class="line">            return mapper.writeValueAsString(object);</span><br><span class="line">        &#125; catch (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了函数重载，不是时间类型的对象就只传一个，时间类型的就传时间和格式。</p><p>6.编写userController</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class userController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;j1&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String Json()&#123;</span><br><span class="line">        User user &#x3D; new User(1, &quot;我是&quot;, &quot;ggy&quot;);</span><br><span class="line">        String json &#x3D; JsonUtils.getJson(user);</span><br><span class="line">        return json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@ResponseBody表明只返回字符串而不经过视图解析器。也可以直接将@Controller转换成@RestController。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class userController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;j1&quot;)</span><br><span class="line">    public String Json()&#123;</span><br><span class="line">        User user &#x3D; new User(1, &quot;我是&quot;, &quot;ggy&quot;);</span><br><span class="line">        String json &#x3D; JsonUtils.getJson(user);</span><br><span class="line">        return json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;j2&quot;)</span><br><span class="line">    public String json3()&#123;</span><br><span class="line"></span><br><span class="line">        Date date &#x3D; new Date();</span><br><span class="line">        return JsonUtils.getJson(date,&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后端：fastJson"><a href="#后端：fastJson" class="headerlink" title="后端：fastJson"></a>后端：fastJson</h2><p>阿里的fastJson</p><p>在pom.xml中导入包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.60&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>之后直接使用</p><p>对象转JSON字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.toJSONString(user);</span><br></pre></td></tr></table></figure><p>JSON字符串转对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseObject(str, User.class)</span><br></pre></td></tr></table></figure><p>JAVA对象转JSON对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONObject jsonObject1 &#x3D; (JSONObject) JSON.toJSON(user2);</span><br></pre></td></tr></table></figure><p>JSON对象转JAVA对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User to_java_user &#x3D; JSON.toJavaObject(jsonObject1, User.class);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续学习SpringMVC。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringMVC学习(1)" scheme="https://ggyggy666.github.io/tags/SpringMVC%E5%AD%A6%E4%B9%A0-1/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习(1)</title>
    <link href="https://ggyggy666.github.io/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/"/>
    <id>https://ggyggy666.github.io/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/</id>
    <published>2021-07-07T09:11:06.000Z</published>
    <updated>2021-07-08T03:30:46.575Z</updated>
    
    <content type="html"><![CDATA[<p>大概学完Spring5了，虽然运用还不熟练，但由于时间紧迫，还是先把SpringMVC学了。</p><a id="more"></a><p>参考文章：</p><p><a href="https://blog.csdn.net/qq_34473348/article/details/107758882" target="_blank" rel="noopener">https://blog.csdn.net/qq_34473348/article/details/107758882</a></p><p><a href="https://github.com/lzh66666/SpringMVC-kuang-/tree/master" target="_blank" rel="noopener">https://github.com/lzh66666/SpringMVC-kuang-/tree/master</a></p><p>这些文章讲得挺清楚了，我就简单讲一下自己的理解并实践。</p><h1 id="MVC架构"><a href="#MVC架构" class="headerlink" title="MVC架构"></a>MVC架构</h1><p>模型，视图，控制器。</p><ul><li>Model，处理业务逻辑，与数据库进行交互，一般是Service层和Dao层。</li><li>View，页面显示。一般是JSP页面。</li><li>Controller，负责接收用户请求，将请求转发，调用相应的业务层，然后获得的数据返回给页面展示。一般是Servlet。</li></ul><p>整个流程：</p><ol><li>用户通过视图发起请求。</li><li>控制器Servlet接收到请求，将请求转发调用相应的业务逻辑层。</li><li>业务处理完毕，返回数据给控制器Servlet。</li><li>控制器Servlet将数据转给视图JSP页面，让JSP进行渲染。</li><li>响应到前端。</li></ol><p>有一点注意的，通常实体类比如User，会写在pojo包里，这个User类拥有用户名、密码、生日、邮箱和个性签名等等属性，而用户请求登陆的时候一般只需要用户名和密码，这个时候可能会把这个实体类User拆分，即创建一个vo包，vo也是实体类的包名，对应的实体类是userVo（它只有用户名和密码），而pojo是实体类User的包名，拥有全部属性或者除用户名和密码之外的属性。<strong>总之，见到vo包等这种实体类的包名就不用迷茫了！</strong></p><h1 id="回顾Servlet"><a href="#回顾Servlet" class="headerlink" title="回顾Servlet"></a>回顾Servlet</h1><p>1.新建一个Maven项目，名称是SpringMVC，作为父工程。在pom.xml下导入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>2.新建一个模块01-Servlet，然后在pom.xml中导入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>3.因为新建的模块都是普通类型的项目，在创建时并没有选择webapp，因此需要在模块上右键</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202042879-1625660444943.png" alt="image-20210707202042879"></p><p>点击添加框架支持，进入后</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202138269-1625660499602.png" alt="image-20210707202138269"></p><p>勾选上，确认即可出现web目录。</p><p>4.新建com.ggy.servlet包，创建helloServlet类</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202332321.png" alt="image-20210707202332321"></p><p>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class helloServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        String method&#x3D;req.getParameter(&quot;method&quot;);</span><br><span class="line">        if(method.equals(&quot;add&quot;))&#123;</span><br><span class="line">            req.getSession().setAttribute(&quot;msg&quot;, &quot;add...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(method.equals(&quot;delete&quot;))&#123;</span><br><span class="line">            req.getSession().setAttribute(&quot;msg&quot;, &quot;delete...&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        req.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.有了Servlet就需要将其配置在web.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;helloServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.ggy.servlet.helloServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;helloServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;hello&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>6.helloServlet会将请求转发给/WEB-INF/jsp/test.jsp，因此需要创建目录和test.jsp</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202521708.png" alt="image-20210707202521708"></p><p>7.最后还需要创建一个JSP页面，内容是form表单登陆。</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202604527.png" alt="image-20210707202604527"></p><p>8.之后添加tomcat配置</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202653487.png" alt="image-20210707202653487"></p><p>点击左上角+添加Tomcat，然后右下角点击FIx</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202735967.png" alt="image-20210707202735967"></p><p>选择后</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707202758812.png" alt="image-20210707202758812"></p><p>之后就可以修改路径并且应用了。点击启动后</p><p>访问：<a href="http://localhost:8080/01_Servlet_war_exploded/hello?method=add即可。" target="_blank" rel="noopener">http://localhost:8080/01_Servlet_war_exploded/hello?method=add即可。</a></p><h1 id="HelloSpringMVC"><a href="#HelloSpringMVC" class="headerlink" title="HelloSpringMVC"></a>HelloSpringMVC</h1><p>在上面的Servlet中，需要编写Servlet并在web.xml中，而如果是多个Servlet就需要配置多个，显然很麻烦。SpringMVC则是提供了一个Front Controller，接收到请求时，决定将其发送给对应的Servlet，这样就不用在web.xml配置那么麻烦了。</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707205358538.png" alt="image-20210707205358538"></p><p>1.新建模块02-HelloSpringMVC，右键添加框架支持</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707205617626.png" alt="image-20210707205617626"></p><p>2.在web.xml中导入SpringMVC需要的东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--1.注册DispatcherServlet--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">           &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">       &lt;&#x2F;init-param&gt;</span><br><span class="line">       &lt;!--启动级别-1--&gt;</span><br><span class="line">       &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--&#x2F; 匹配所有的请求；（不包括.jsp）--&gt;</span><br><span class="line">&lt;!--&#x2F;* 匹配所有的请求；（包括.jsp）--&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>这个Front Controller实质就是一个Servlet，不过是Spring框架中自己写好的，我们只需要在web.xml中配置就能用了。</p><p>3.因为是Spring项目，所以需要在src的main目录下的resources资源目录下添加springmvc-servlet.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>4.这里需要增加几个Spring的bean对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;InternalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;!--前缀--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!--后缀--&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>这里<strong>处理器和适配器其实是可以不写的。</strong></p><p>视图解析器DispatcherServlet是当Front Controller接收到处理业务后的数据时转发给JSP页面，定义了前缀和后缀，之后会与转发时的那个文件名一起拼接的。</p><p>5.在src/main/java下新建包com.ggy.controller，新建HelloController类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;注意：这里我们先导入Controller接口</span><br><span class="line">public class HelloController implements Controller &#123;</span><br><span class="line"></span><br><span class="line">   public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">       &#x2F;&#x2F;ModelAndView 模型和视图</span><br><span class="line">       ModelAndView mv &#x3D; new ModelAndView();</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F;封装对象，放在ModelAndView中。Model</span><br><span class="line">       mv.addObject(&quot;msg&quot;,&quot;HelloSpringMVC!&quot;);</span><br><span class="line">       &#x2F;&#x2F;封装要跳转的视图，放在ModelAndView中</span><br><span class="line">       mv.setViewName(&quot;hello&quot;); &#x2F;&#x2F;: &#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp</span><br><span class="line">       return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setViewName就是转发，hello是要转发的文件名称，与先前的springmvc-servlet.xml中配置的前缀和后缀一起拼接得到：/WEB-INF/jsp/hello.jsp</p><p>6.因此需要创建/WEB-INF/jsp/hello.jsp</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707210841868.png" alt="image-20210707210841868"></p><p>7.将那个HelloController配置到Spring中作为Bean对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"com.ggy.controller.HelloController"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>8.配置Tomcat启动，发现404。点击File-&gt;ProjectStruct</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210707211848911.png" alt="image-20210707211848911"></p><p>如图，在WEB-INF目录下新建lib目录，然后点击+，将库文件都添加进来。<strong>注意要点击一下切换到02-HelloSpringMVC.war那个先！</strong></p><p>9.重新部署，启动即可看到HelloSpringMVC。</p><p>简单流程：</p><p>1./hello请求经过<strong>DispatcherServlet</strong>，然后寻找<strong>处理器</strong>去匹配到请求对应的bean对象<strong>/hello</strong>。</p><p>2.<strong>适配器</strong>会通过/hello这个Bean对象对应的<strong>Class</strong>进入指向的类。</p><p>3.在类中<strong>处理了业务逻辑</strong>后，得到的数据可以通过AddObject方法存储，并且<strong>返回</strong>一个ModelAndView对象，使用setViewName(“JSP文件名”)<strong>转发</strong>到某个JSP页面。</p><p>4.视图解析器就能<strong>获取</strong>到这个对象，还有转发过来的<strong>文件名</strong>，与前缀、后缀一起<strong>拼接</strong>，然后访问到对应目录下的JSP文件。</p><p>5.JSP从对象中取出数据<strong>展示</strong>。</p><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><p>1.新建模块04-Annotation，目录结构如下：</p><p><img src="/2021/07/07/SpringMVC%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210708104935703.png" alt="image-20210708104935703"></p><p>注意需要右键添加框架支持，项目结构中新建lib目录将库文件全都添加进来。</p><p>2.在pom.xml中先配置好build标签，防止出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">            &lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span><br><span class="line">        &lt;&#x2F;resource&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">            &lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span><br><span class="line">        &lt;&#x2F;resource&gt;</span><br><span class="line">    &lt;&#x2F;resources&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><p>3.同样在web.xml中配置DispatcherServlet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;</span><br><span class="line">         version&#x3D;&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">            &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">        &lt;&#x2F;init-param&gt;</span><br><span class="line">        &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><p>4.在springmvc-servlet.xml中，这次不用bean对象来配置处理器和适配器了，而是使用注解开发，因此需要默认的Servlet处理器，开启注解驱动，扫描某个包的注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;context:component-scan base-package&#x3D;&quot;com.ggy.controller&quot;&#x2F;&gt;</span><br><span class="line">&lt;mvc:default-servlet-handler&#x2F;&gt;</span><br><span class="line">&lt;mvc:annotation-driven&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>然后配置视图解析器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot; id&#x3D;&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>5.Controller类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@org.springframework.stereotype.Controller</span><br><span class="line">public class Controller &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">    public String sayHello(Model model)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;, &quot;hello,ggy111&quot;);</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Controller（这里包名都显示出来了），注明这是一个控制器。类里面可以有许多方法，每一个方法可以使用@RequestMapping来配置成一个Servlet，处理业务逻辑。即访问/hello就可以进入这个sayHello中处理。有一个参数Model，调用addAttribute可以添加键值对对象，返回”hello”，这个就是JSP的文件名，之后会与视图解析器一起拼接。</p><p>6.运行Tomcat即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大概学完Spring5了，虽然运用还不熟练，但由于时间紧迫，还是先把SpringMVC学了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SpringMVC学习(1)" scheme="https://ggyggy666.github.io/tags/SpringMVC%E5%AD%A6%E4%B9%A0-1/"/>
    
  </entry>
  
  <entry>
    <title>Spring5学习(3)</title>
    <link href="https://ggyggy666.github.io/2021/07/01/Spring5%E5%AD%A6%E4%B9%A0-3/"/>
    <id>https://ggyggy666.github.io/2021/07/01/Spring5%E5%AD%A6%E4%B9%A0-3/</id>
    <published>2021-07-01T11:29:41.000Z</published>
    <updated>2021-07-06T08:52:06.401Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续学习Spring5。</p><a id="more"></a><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>类似租房一样，有客户、中介和房东，中介起到的就是代理作用。</p><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类。</li><li>真实角色：被代理的角色。</li><li>代理角色：代理真实角色，还可以有额外的操作。</li><li>客户：访问代理角色</li></ul><p>好处：</p><ul><li>可以使真实角色的操作更加纯粹。</li><li>公共业务交给代理角色，实现业务的分工。</li><li>公共业务发生扩展的时候方便集中管理。</li></ul><p>缺点：</p><ul><li>一个角色会产生一个代理角色，代码翻倍，效率低。</li></ul><p><strong>真实角色</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Host&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代理角色</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Proxy&#123;</span><br><span class="line">private Host host;</span><br><span class="line">生成host的Setter方法</span><br><span class="line">可以生成代理方法，内容是使用host对象调用Host类中的方法</span><br><span class="line">可以有代理自己的其它方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>客户</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main函数中&#123;</span><br><span class="line">Host host &#x3D; new Host();&#x2F;&#x2F;new真实角色</span><br><span class="line">Proxy proxy &#x3D; new Proxy();&#x2F;&#x2F;new代理角色</span><br><span class="line">proxy.Setter方法（host)&#x2F;&#x2F;传真实角色进去</span><br><span class="line">proxy.代理方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说白了就是在原来的类上套一层类。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>角色与静态代理一样。</p><p>给真实角色生成一个动态代理，利用的是Java的反射机制。</p><p>1.新建项目06-Proxy，项目结构如下</p><p><img src="/2021/07/01/Spring5%E5%AD%A6%E4%B9%A0-3/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210701201908364.png" alt="image-20210701201908364"></p><p>2.实现抽象角色Rent接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.demo;</span><br><span class="line"></span><br><span class="line">public interface Rent &#123;</span><br><span class="line">    void rent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实现真实角色Host类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.demo;</span><br><span class="line"></span><br><span class="line">public class Host implements Rent&#123;</span><br><span class="line">    public void rent() &#123;</span><br><span class="line">        System.out.println(&quot;我是房东，我要出租房子&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.实现代理处理程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ggy.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object invoke = method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用到两个类InvocationHandler和Proxy。Proxy负责返回代理角色，InvocationHandler负责利用反射机制调用代理角色中的方法。setTarget就是设置要代理的真实角色，getProxy返回代理角色，invoke中method调用invoke方法来执行target真实角色中的方法。</p><p>5.客户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import com.ggy.demo.Host;</span><br><span class="line">import com.ggy.demo.ProxyInvocationHandler;</span><br><span class="line">import com.ggy.demo.Rent;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Host host &#x3D; new Host();</span><br><span class="line">        ProxyInvocationHandler pih &#x3D; new ProxyInvocationHandler();</span><br><span class="line">        pih.setTarget(host);</span><br><span class="line">        Rent proxy &#x3D; (Rent) pih.getProxy();</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先生成真实角色host</li><li>然后实例化ProxyInvocationHandler代理处理程序</li><li>通过调用setTarget方法来设置要代理的真实角色</li><li>getProxy方法返回代理角色，注意这个代理角色的类型必须是虚拟角色即接口Rent类</li><li>代理角色调用真实角色中的方法</li></ul><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><img src="/2021/07/01/Spring5%E5%AD%A6%E4%B9%A0-3/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210701194006756.png" alt="image-20210701194006756"></p><p>所谓AOP就是面向切面编程，有一个业务的基础上，想要增加其它业务，比如在这个业务的前后都增加一些功能，那么就可以使用AOP切入这个业务，然后在其前后调用功能相对的类即可。</p><p><img src="/2021/07/01/Spring5%E5%AD%A6%E4%B9%A0-3/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210706152946812.png" alt="image-20210706152946812"></p><p>比如add业务，需要在其前后都添加多一些功能。先前就是使用动态代理，再add类的继承上再套一层类，但是如果是使用AOP的话，就是切入add这个业务，然后在其前后添加。</p><h2 id="在Spring中的作用"><a href="#在Spring中的作用" class="headerlink" title="在Spring中的作用"></a>在Spring中的作用</h2><p>提供声明式事务，允许用户自定义切面。</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。与我们业务逻辑无关的但是需要我们关注的部分。如日志、安全、缓存和事务等。</li><li>切面（ASPECT）：横切关注点被模块化的特殊对象即类。</li><li>通知（Advice）：切面必须要完成的工作，即切面类中的方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（Point Cut）：切面通知执行的“地点”的定义。</li><li>连接点（Join Point）：与切入点匹配的执行点。</li></ul><p><img src="/2021/07/01/Spring5%E5%AD%A6%E4%B9%A0-3/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210706153830262.png" alt="image-20210706153830262"></p><h2 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h2><p><strong>使用了Spring的接口</strong></p><p>1.新建一个模块，目录结构如下：</p><p><img src="/2021/07/01/Spring5%E5%AD%A6%E4%B9%A0-3/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210706162322353.png" alt="image-20210706162322353"></p><p>在pom.xml中增加对AOP支持的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.9.7&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>2.填写接口类userService和实现类userServiceImpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.service;</span><br><span class="line"></span><br><span class="line">public interface userService &#123;</span><br><span class="line">    public void add();</span><br><span class="line">    public void delete();</span><br><span class="line">    public void alter();</span><br><span class="line">    public void select();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.service;</span><br><span class="line"></span><br><span class="line">public class userServiceImpl implements userService &#123;</span><br><span class="line">    public void add() &#123;</span><br><span class="line">        System.out.println(&quot;add...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        System.out.println(&quot;delete...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void alter() &#123;</span><br><span class="line">        System.out.println(&quot;alter...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void select() &#123;</span><br><span class="line">        System.out.println(&quot;select...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.需要使用AOP去切入这个实现类的每一个方法，在方法前后输出一些日志信息，因此先生成Log类</p><p>log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.log;</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.MethodBeforeAdvice;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class Log implements MethodBeforeAdvice &#123;</span><br><span class="line">    public void before(Method method, Object[] objects, Object o) throws Throwable &#123;</span><br><span class="line">        System.out.println(o.getClass().getName()+&quot;类的&quot;+method.getName()+&quot;方法被调用了。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要实现aop包中的MethodBeforeAdvice类的before，代表着在切入面之前调用该函数。method就是切入点的类的方法，Object o就是切入点的类。</p><p>afterLog</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.log;</span><br><span class="line"></span><br><span class="line">import org.springframework.aop.AfterReturningAdvice;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class afterLog implements AfterReturningAdvice &#123;</span><br><span class="line">    public void afterReturning(Object o, Method method, Object[] objects, Object o1) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;执行的方法是：&quot;+method.getName()+&quot;，返回结果是：&quot;+o+&quot;, &quot;+o1.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，在切入点的类的函数调用完成返回之后再调用afterReturning, Object o应该是返回的类，o1才是切入点的类</p><p>4.配置applicationContext.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.ggy.service.userServiceImpl&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;log&quot; class&#x3D;&quot;com.ggy.log.Log&quot;&#x2F;&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;afterLog&quot; class&#x3D;&quot;com.ggy.log.afterLog&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.ggy.service.userServiceImpl.*(..));&quot;&#x2F;&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;log&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;afterLog&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>首先注册三个bean对象，然后配置aop。aop:pointcut就是切入点，expression中的是表达式，第一个*是返回所有类型，第二个则代表匹配到userServiceImpl类中的所有函数，(..)表示参数的抽象化。之后使用aop:advisor，advice-ref就是要执行的那个bean对象，pointcut-ref就是切入点。</p><p>5.编写测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Mytest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        userService userservice &#x3D; (userService) context.getBean(&quot;userService&quot;);</span><br><span class="line">        userservice.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.ggy.service.userServiceImpl类的add方法被调用了。</span><br><span class="line">add...</span><br><span class="line">执行的方法是：add，返回结果是：null, com.ggy.service.userServiceImpl</span><br></pre></td></tr></table></figure><p>成功插入。</p><h2 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h2><p>一是使用了Spring的接口，每个方法就有一个实现接口类，before和after这种。<strong>二则是使用自定义的类</strong>。</p><p>1.新增一个addLog类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.log;</span><br><span class="line"></span><br><span class="line">public class addLog &#123;</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;before...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;after...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个方法都在同一个类里了。</p><p>2.配置applicationContext.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.ggy.service.userServiceImpl&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;addLog&quot; class&#x3D;&quot;com.ggy.log.addLog&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:aspect ref&#x3D;&quot;addLog&quot;&gt;</span><br><span class="line">        &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.ggy.service.userServiceImpl.*(..));&quot;&#x2F;&gt;</span><br><span class="line">        &lt;aop:before method&#x3D;&quot;before&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">        &lt;aop:after method&#x3D;&quot;after&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure><p>当然还是要先注册好用到的bean对象，然后在aop:config中使用aop:aspect切面，ref就是要连接到增加的业务的类addLog。然后还是aop:pointcut切入点，之后使用aop:before，方法是addLog类中的before名称；再使用aop:after即可。</p><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before...</span><br><span class="line">add...</span><br><span class="line">after...</span><br></pre></td></tr></table></figure><p>但是这种方式只能执行自己定义的方法，可操作性不强，没有方法一那么多功能可以获取执行的类和方法名，获取返回值等。</p><h2 id="实现方法三"><a href="#实现方法三" class="headerlink" title="实现方法三"></a>实现方法三</h2><p>使用注解方式。</p><p>1.直接在addLog上增加注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Aspect</span><br><span class="line">public class addLog &#123;</span><br><span class="line">    @Before(&quot;execution(* com.ggy.service.userServiceImpl.*(..));&quot;)</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;before...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After(&quot;execution(* com.ggy.service.userServiceImpl.*(..));&quot;)</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;after...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Aspect表明这是一个切面类，@Before是切入点之前执行，<code>execution(* com.ggy.service.userServiceImpl.*(..));</code>则是匹配切入点。</p><p>2.在applicationContext.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.ggy.service.userServiceImpl&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;addLog&quot; class&#x3D;&quot;com.ggy.log.addLog&quot;&#x2F;&gt;</span><br><span class="line">&lt;aop:aspectj-autoproxy proxy-target-class&#x3D;&quot;false&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>只需要注入切面类为bean对象，然后开启aop的注解支持即可。proxy-target-class=”false”可以不要的，表示使用JDK方式进行代理，如果为true就是使用cglib代理，二者效果一样的。</p><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before...</span><br><span class="line">add...</span><br><span class="line">after...</span><br></pre></td></tr></table></figure><p>3.在addLog类中增加一个around方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Around(&quot;execution(* com.ggy.service.userServiceImpl.*(..));&quot;)</span><br><span class="line">public void around(ProceedingJoinPoint jp) throws Throwable &#123;</span><br><span class="line">    System.out.println(&quot;环绕前&quot;);</span><br><span class="line">    Object proceed &#x3D; jp.proceed();</span><br><span class="line">    System.out.println(&quot;环绕后&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用@Around注解，该方法有参数ProceedingJoinPoint jp，jp.proceed表示执行切面类的方法。</p><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">环绕前</span><br><span class="line">before...</span><br><span class="line">add...</span><br><span class="line">环绕后</span><br><span class="line">after...</span><br></pre></td></tr></table></figure><p>先是环绕前，然后proceed执行，before接着是add，而after是等到返回时才执行的，因此先输出了环绕后。</p><p>jp对象还有其它的一些方法，比如获取签名即调用的切入点的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(jp.getSignature());</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void com.ggy.service.userService.add()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续学习Spring5。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring5学习(3)" scheme="https://ggyggy666.github.io/tags/Spring5%E5%AD%A6%E4%B9%A0-3/"/>
    
  </entry>
  
  <entry>
    <title>Spring5学习(2)</title>
    <link href="https://ggyggy666.github.io/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-2/"/>
    <id>https://ggyggy666.github.io/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-2/</id>
    <published>2021-06-30T14:16:28.000Z</published>
    <updated>2021-07-01T03:45:40.968Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续学习Spring。</p><a id="more"></a><h1 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h1><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-2/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210630222429212-1625063070802.png" alt="image-20210630222429212"></p><ul><li><p>singleton单例模式（Spring默认），不管使用getBean获取多少个相同的对象，返回来的对象始终都只指向一个而已，适用于单线程。</p><p>beans.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.ggy.pojo.Student&quot; p:name&#x3D;&quot;ggy&quot; p:address-ref&#x3D;&quot;address&quot; scope&#x3D;&quot;singleton&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>测试类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student name &#x3D; (Student) context.getBean(&quot;student&quot;);</span><br><span class="line">Student name1 &#x3D; (Student) context.getBean(&quot;student&quot;);</span><br></pre></td></tr></table></figure><p>name和name1对象是同一个对象。</p></li><li><p>prototype多例模式，获取相同的对象返回来的对象是不同的，适用于多线程。</p><p>beans.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.ggy.pojo.Student&quot; p:name&#x3D;&quot;ggy&quot; p:address-ref&#x3D;&quot;address&quot; scope&#x3D;&quot;prototype&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>测试类中，name和name1对象是两个不同的对象。</p></li><li><p>其它模式，request、session等用于web中。</p></li></ul><h1 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h1><p>之前bean标签中，需要用property属性来为类的属性赋值，而如果属性是其它类即使用ref时，可以使用自动装配来寻找到对应的其它类。</p><h2 id="使用autowire"><a href="#使用autowire" class="headerlink" title="使用autowire"></a>使用autowire</h2><h3 id="通过byName自动装配"><a href="#通过byName自动装配" class="headerlink" title="通过byName自动装配"></a>通过byName自动装配</h3><p>需要保证所有bean的id唯一，并且这个bean需要和注入的类的属性对应的set方法后面的值一致，即某个类中的属性cat对应的set方法setCat，id就需要是cat。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;cat&quot; class&#x3D;&quot;com.ggy.pojo.cat&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;dog&quot; class&#x3D;&quot;com.ggy.pojo.dog&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;pepole&quot; class&#x3D;&quot;com.ggy.pojo.People&quot; autowire&#x3D;&quot;byName&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ggy&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>通过使用autowire=”byName”，就能通过id=”cat”和id=”dog”去自动装配那两个类。</p><h3 id="使用byType自动装配"><a href="#使用byType自动装配" class="headerlink" title="使用byType自动装配"></a>使用byType自动装配</h3><p>需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean class&#x3D;&quot;com.ggy.pojo.cat&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean class&#x3D;&quot;com.ggy.pojo.dog&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;pepole&quot; class&#x3D;&quot;com.ggy.pojo.People&quot; autowire&#x3D;&quot;byType&quot;&gt;</span><br><span class="line">&lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ggy&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>cat和dog可以没有id，通过class就能找到对应的类。</p><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><p>JDK1.5，Spring2.5之后启用，Spring4之后要使用必须保证aop包导入了，不过Spring-webmvc那个maven依赖存在这个包。</p><p>首先需要导入一些xml的约束（context）和配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"com.ggy.pojo.cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"com.ggy.pojo.dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pepole"</span> <span class="attr">class</span>=<span class="string">"com.ggy.pojo.pepole"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>bean对象只需要定义即可，之后在相应的class类中使用注解。</strong></p><h3 id="通过-Autowired"><a href="#通过-Autowired" class="headerlink" title="通过@Autowired"></a>通过@Autowired</h3><p>直接在类中的属性定义的上一行使用，也可以在属性的Setter方法上使用。使用@Autowired且bean对象在IOC容器中时就可以不写Setter方法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span><span class="comment">//在字段前使用，说明这个字段可以为空。</span></span><br><span class="line"><span class="meta">@Autowired</span>(required=<span class="keyword">false</span>)，默认是<span class="keyword">true</span>的，为<span class="keyword">false</span>之后这个自动装配的类对象可以为空了。</span><br></pre></td></tr></table></figure><p>@Autowired是通过byType方式来自动装配的，所以id与类对象名不一样也是可以找到的，但是如果有两个bean对象的class都一样，那么没办法定位是哪一个，此时需要使用@Qualifier(value=”xxx”)，使用id名字来定位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span>(value=<span class="string">"xxx"</span>)</span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过-Resource"><a href="#通过-Resource" class="headerlink" title="通过@Resource"></a>通过@Resource</h3><p>先通过byName, 如果名字找不到，再通过byType方式来自动装配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bean对象唯一，直接使用</span><br><span class="line">@Resource</span><br><span class="line">private Cat cat;</span><br><span class="line"></span><br><span class="line">bean对象不唯一</span><br><span class="line">@Resource(name&#x3D;&quot;xxx&quot;)</span><br><span class="line">private Cat cat;</span><br></pre></td></tr></table></figure><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><p>上面的注解中，beans.xml中还是需要创建bean标签来创建对象，可以去掉。</p><p>1.新建一个项目04-Annotation，项目结构如下</p><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-2/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210701105542393.png" alt="image-20210701105542393"></p><p>2.创建User类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.pojo;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    public String name&#x3D;&quot;ggy&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了注解@Component（组件）方式</p><p>3.新建applicationContext.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context:annotation-config&#x2F;&gt;</span><br><span class="line">    &lt;!--注意下面这句，扫描组件--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.ggy.pojo&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>通过context:component-scan来扫描包下的注解，这样就能找到pojo包下的User类，从而不需要再去使用bean标签创建对象了。</p><p>3.创建测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class Mytest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line">        User user &#x3D; (User) context.getBean(&quot;user&quot;);</span><br><span class="line">        System.out.println(user.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于没有bean标签了，也就没有id，那么获取bean对象名就是类小写名字即user。</p><p>4.上面User类中属性值已经被写固定了，要注入的话需要</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;ggy&quot;)</span><br><span class="line">    public String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种注解适合简单的属性值注入，如果是Map，List这些复杂类型，还是使用XML更清楚。</p><p>5.衍生注解</p><p>@Component还有其它三个衍生注解，在web层中，按照MVC三层架构来标识。</p><ul><li>dao    【@Repository】</li><li>service【@Service】</li><li>controller【@Controller】</li></ul><p>这几个类都是一样的，都是将某个类作为组件注册到Spring中装配Bean。注意这时候component-scan扫的包就得是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ggy"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>6.作用域注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"singleton"</span>)<span class="comment">//或者@Scope("prototype")等</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"ggy"</span>)</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.XML与注解</p><p>XML更加万能，适用于任何场合，维护简单方便。</p><p>注解只能使用在自己那个类，维护相对复杂。</p><p>最佳实践：</p><p>XML用来创建管理bean对象，还是使用bean标签。</p><p>注解用来注入属性值，@Value这些，注意要使用注解必须开启注解支持。</p><h1 id="Java-Config注解开发"><a href="#Java-Config注解开发" class="headerlink" title="Java Config注解开发"></a>Java Config注解开发</h1><p>不使用XML文件，直接使用Java类来config。</p><p>1.创建新项目05-JavaConfig</p><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-2/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210701114121276.png" alt="image-20210701114121276"></p><p>2.创建User类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.pojo;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Value(&quot;ggy&quot;)</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;User&#123;&quot; +</span><br><span class="line">                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是一样使用@Component，将User类交给Spring管理，@Value注入属性值。</p><p>3.创建JavaConfig类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.ggy.pojo&quot;)</span><br><span class="line">@Import(JavaConfig1.class)</span><br><span class="line">public class JavaConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public User user()&#123;</span><br><span class="line">        return new User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里开头就是@Configuration表示配置类，取代XML，一样有@ComponentScan扫描包，@Import是导入其它的配置文件与这个文件合成一个，我另外创建了一个JavaConfig1类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class JavaConfig1 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前XML创建bean对象是使用bean标签，现在则是使用@Bean然后创建一个方法，方法名就是对象名user，返回一个新建的User类对象即可。</p><p>4.创建测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(JavaConfig.class);</span><br><span class="line">        User user &#x3D; (User) context.getBean(&quot;user&quot;);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的是AnnotationConfigApplicationContext方法，读取JavaConfig.class类。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续学习Spring。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring5学习(2)" scheme="https://ggyggy666.github.io/tags/Spring5%E5%AD%A6%E4%B9%A0-2/"/>
    
  </entry>
  
  <entry>
    <title>Spring5学习(1)</title>
    <link href="https://ggyggy666.github.io/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-1/"/>
    <id>https://ggyggy666.github.io/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-1/</id>
    <published>2021-06-30T03:01:20.000Z</published>
    <updated>2021-06-30T12:26:37.261Z</updated>
    
    <content type="html"><![CDATA[<p>考试基本考完了，现在来学习一下spring框架。</p><a id="more"></a><h1 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h1><p>Spring是一个轻量级的免费的控制反转（IOC）和面向切面编程（AOP）的框架。整合了其它技术，前身是Interface21框架。</p><p>官网：<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#spring-core</a></p><p>GitHub：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p><p>maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;sprintg-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;5.3.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;spring跟mybatis整合还需要</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;sprintg-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;5.3.8.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring的七大模块"><a href="#Spring的七大模块" class="headerlink" title="Spring的七大模块"></a>Spring的七大模块</h2><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210630113048804.png" alt="image-20210630113048804"></p><p>来源：<a href="https://blog.csdn.net/qq_33082731/article/details/75066956" target="_blank" rel="noopener">https://blog.csdn.net/qq_33082731/article/details/75066956</a></p><p>学习路程：Spring-&gt;SpringMVC-&gt;SpringBoot-&gt;SpringCloud</p><p>弊端主要是配置太多。</p><h1 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h1><p>原理：IOC是一种设计思想，在传统的思想中，创建一个接口和实现类即Dao层，用来访问数据库；然后创建一个业务层，它会new一个Dao层的实现类来调用，这样就写死了要调用的那个Dao层的实现类。如果Dao层中新增其它操作数据库的实现类，那么每次都要修改业务层中new的类，这种情况下非常麻烦，此时控制权在程序员手里，必须依靠他们来修改代码。而IOC控制反转就是为了将控制权从程序员手中移到用户手中。程序员可以公开一个接口用来设置要使用的Dao层中的实现类，这样用户想要调用哪种功能，就可以通过这个接口来传入类名来设定，控制权就转到了用户手中。程序员只需专注于业务的开发即可。</p><p>1.新建一个Maven-Project，先将Spring的Maven依赖导入到pom.xml中。</p><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210630123951675.png" alt="image-20210630123951675"></p><p>2.在项目下新建一个模块01-IOC，新建包和类，项目结构如下：</p><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210630124109613-1625028071339.png" alt="image-20210630124109613"></p><p>3.在userDao中定义接口，userDaoImpl实现接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;userDao</span><br><span class="line">package com.ggy.Dao;</span><br><span class="line"></span><br><span class="line">public interface userDao &#123;</span><br><span class="line">    void getUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;userDaoImpl</span><br><span class="line">package com.ggy.Dao;</span><br><span class="line"></span><br><span class="line">public class userDaoImpl implements userDao &#123;</span><br><span class="line"></span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;ggy1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.在userService中定义接口，userServiceImpl实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.Service;</span><br><span class="line"></span><br><span class="line">public interface userService &#123;</span><br><span class="line">    void getUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">package com.ggy.Service;</span><br><span class="line"></span><br><span class="line">import com.ggy.Dao.userDao;</span><br><span class="line">import com.ggy.Dao.userDaoImpl;</span><br><span class="line"></span><br><span class="line">public class userServiceImpl implements userService &#123;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        userDao userDao &#x3D; new userDaoImpl();</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14行中，这个类new一个userDaoImpl类，然后调用getUser方法。</p><p>5.在test测试类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import com.ggy.Service.userServiceImpl;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        userServiceImpl userService &#x3D; new userServiceImpl();</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建userServiceImpl实例并调用getUser。运行可以得到ggy1。</p><p>上述就是传统的调用方式，如果Dao层中新增一个功能类ggyDaoImpl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.Dao;</span><br><span class="line"></span><br><span class="line">public class ggyDaoImpl implements userDao &#123;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        System.out.println(&quot;ggy2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么测试类调用的不变，但是userServiceImpl中创建的userDaoImpl对象就需要更改成<code>new ggyDaoImpl()</code>，控制权在程序员手中。而如果userServiceImpl中提供接口设置调用的Dao层对象时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class userServiceImpl implements userService &#123;</span><br><span class="line">    private userDao userDao1;</span><br><span class="line">    public void getUser() &#123;</span><br><span class="line">        userDao userDao &#x3D; userDao1;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDao(userDao userDao)&#123;</span><br><span class="line">        this.userDao1 &#x3D; userDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在test类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        userServiceImpl userService &#x3D; new userServiceImpl();</span><br><span class="line">        userService.setDao(new ggyDaoImpl());</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了一个setDao方法，new一个ggyDaoImpl对象传值即可调用，需要调用其它类时只需要new的对象不一样即可。这样控制权就在用户手里，用户想调用什么就new什么。如此耦合性就大大降低。</p><h1 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h1><p>1.新建一个模块02-HelloSpring，目录如下</p><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210630152304407.png" alt="image-20210630152304407"></p><p>2.新建一个Hello类，里面定义一个变量，并且设置Setter and Getter和toString方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.pojo;</span><br><span class="line"></span><br><span class="line">public class Hello &#123;</span><br><span class="line">    private String str;</span><br><span class="line"></span><br><span class="line">    public String getStr() &#123;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStr(String str) &#123;</span><br><span class="line">        this.str &#x3D; str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Hello&#123;&quot; +</span><br><span class="line">                &quot;str&#x3D;&#39;&quot; + str + &#39;\&#39;&#39; +</span><br><span class="line">                &#39;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在resources目录下新建一个beans.xml，内容是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.ggy.pojo.Hello&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;str&quot; value&#x3D;&quot;Spring&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>解释一下bean标签。id就是变量名，class指定类，property中的name就是类里面的那个属性，value给它赋值。思想就是创建类对象并且赋值给hello，然后使用类里面的Setter方法给类里面的属性str赋值Spring。这部分代码相当于传统的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello hello &#x3D; new Hello();</span><br><span class="line">hello.Setter(Spring);</span><br></pre></td></tr></table></figure><p>通过Spring这种XML配置方式，将bean对象保存在IOC容器中，之后测试类就可以读取这个xml文件获取里面的bean对象并调用方法了。test类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import com.ggy.pojo.Hello;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    &#x2F;&#x2F;下面这句读取xml文件是固定的，获取IOC容器上下文对象</span><br><span class="line">        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        &#x2F;&#x2F;调用getBean获取对象</span><br><span class="line">        Hello hello &#x3D; (Hello) context.getBean(&quot;Hello&quot;);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello&#123;str&#x3D;&#39;Spring&#39;&#125;</span><br></pre></td></tr></table></figure><h1 id="IOC创建对象方式"><a href="#IOC创建对象方式" class="headerlink" title="IOC创建对象方式"></a>IOC创建对象方式</h1><p>1.默认使用无参构造函数来创建对象。</p><p>2.如果要使用有参构造函数，那么bean中也要配置好参数，有三种方式：</p><ul><li>通过参数的位置索引方式初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.ggy.pojo.Hello&quot;&gt;</span><br><span class="line">    &lt;constructor-arg index&#x3D;&quot;0&quot; value&#x3D;&quot;1&quot;&gt;&#x2F;&#x2F;第一个参数</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.ggy.pojo.Hello&quot;&gt;</span><br><span class="line">    &lt;constructor-arg index&#x3D;&quot;1&quot; value&#x3D;&quot;2&quot;&gt;&#x2F;&#x2F;第二个参数</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><ul><li>通过参数的类型初始化（不建议使用）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.ggy.pojo.Hello&quot;&gt;</span><br><span class="line">    &lt;constructor-arg type&#x3D;&quot;java.lang.String&quot; value&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>参数类型是String则赋值为1，但是如果有多个参数类型都是String时就没办法了。</p><ul><li>通过参数的名字进行初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.ggy.pojo.Hello&quot;&gt;</span><br><span class="line">    &lt;constructor-arg name&#x3D;&quot;str&quot; value&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>参数的名字是str，赋值1.</p><p>注意：读取XML文件内容时，beans中的所有bean对象都已经被初始化，之后只需要getBean获取相应ID的对象即可。</p><h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>beans.xml中使用别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.ggy.pojo.Hello&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;str&quot; value&#x3D;&quot;Spring&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br><span class="line">&lt;alias name&#x3D;&quot;hello&quot; alias&#x3D;&quot;hello1&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>有一个hello对象，然后使用alias给它起一个别名hello1，之后测试类中使用getBean获取对象时，既可以用hello，也可以用hello1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello hello &#x3D; (Hello) context.getBean(&quot;hello&quot;);</span><br><span class="line">Hello hello1 &#x3D; (Hello) context.getBean(&quot;hello1&quot;);</span><br></pre></td></tr></table></figure><h2 id="Bean的属性配置"><a href="#Bean的属性配置" class="headerlink" title="Bean的属性配置"></a>Bean的属性配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;hello&quot; class&#x3D;&quot;com.ggy.pojo.Hello&quot; name&#x3D;&quot;hello2,h1 h3;h4&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;str&quot; value&#x3D;&quot;Spring&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>id是对象名，class是对象类型，name也是别名而且比alias更好，因为它支持多个别名，可以使用逗号、空格或者分号来分割。property是class那个类中的属性，name是属性名，value是给它赋值。</p><h2 id="import配置"><a href="#import配置" class="headerlink" title="import配置"></a>import配置</h2><p>一般用于团队开发，将多个配置文件，导入合并成为一个。xml配置文件正规名字应该是：applicationContext.xml。</p><p>多个人开发，就有多个XML文件，比如beans1.xml, beans2.xml, beans.xml3，那么在applicationContext.xml中使用import（同一目录下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;import resource&#x3D;&quot;beans1.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;import resource&#x3D;&quot;beans2.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;import resource&#x3D;&quot;beans3.xml&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>这样就合并在一块了，之后测试类中读取的就是这个总的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><p>前面的IOC创建对象方式中已经说过。</p><h2 id="Set注入【重点】"><a href="#Set注入【重点】" class="headerlink" title="Set注入【重点】"></a>Set注入【重点】</h2><p>依赖：bean对象的创建依赖于容器</p><p>注入：bean对象中的所有属性的值，由容器来注入</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>1.新建模块，结构如下</p><p><img src="/2021/06/30/Spring5%E5%AD%A6%E4%B9%A0-1/F:%5C360MoveData%5CUsers%5CASUS%5CDesktop%5C%E4%B8%AA%E4%BA%BABlog%5Csource_posts%5CTyporaImage%5Cimage-20210630194018732.png" alt="image-20210630194018732"></p><p>2.Address类中定义一个属性Address</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.ggy.pojo;</span><br><span class="line"></span><br><span class="line">public class Address &#123;</span><br><span class="line">    private String address;</span><br><span class="line"></span><br><span class="line">    public String getaddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(String address) &#123;</span><br><span class="line">        address &#x3D; address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.Student类中定义多种类型的属性，并生成Getter and Setter和toString函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private Address address;</span><br><span class="line">    private String[] books;</span><br><span class="line">    private List&lt;String&gt; hobbys;</span><br><span class="line">    private Map&lt;String, String&gt; card;</span><br><span class="line">    private Set&lt;String&gt; games;</span><br><span class="line">    private String wife;</span><br><span class="line">    private Properties info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.beans.xml中针对不同类型进行不同的Set注入</p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p><strong>首先是熟悉的String类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.ggy.pojo.Student&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;ggy&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</span><br><span class="line">        Student name &#x3D; (Student) context.getBean(&quot;student&quot;);</span><br><span class="line">        System.out.println(name.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;name&#x3D;&#39;ggy&#39;, address&#x3D;null, books&#x3D;null, hobbys&#x3D;null, card&#x3D;null, games&#x3D;null, wife&#x3D;&#39;null&#39;, info&#x3D;null&#125;</span><br></pre></td></tr></table></figure><p><strong>属性是其它Bean对象类型，使用ref</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;address&quot; class&#x3D;&quot;com.ggy.pojo.Address&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.ggy.pojo.Student&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;address&quot; ref&#x3D;&quot;address&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p><strong>属性是数组类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;books&quot;&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;value&gt;2&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;value&gt;3&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;array&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><strong>属性是List类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;hobbys&quot;&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;value&gt;2&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;value&gt;3&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;list&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><strong>属性是Map类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;card&quot;&gt;</span><br><span class="line">    &lt;map&gt;</span><br><span class="line">        &lt;entry key&#x3D;&quot;身份证&quot; value&#x3D;&quot;11xx&quot;&#x2F;&gt;</span><br><span class="line">        &lt;entry key&#x3D;&quot;学号&quot; value&#x3D;&quot;1234&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;map&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><strong>属性是Set集合类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;games&quot;&gt;</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;value&gt;1&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;value&gt;2&lt;&#x2F;value&gt;</span><br><span class="line">        &lt;value&gt;3&lt;&#x2F;value&gt;</span><br><span class="line">    &lt;&#x2F;set&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><strong>属性是字符串类型，但是是空的字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;wife&quot; value&#x3D;&quot;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>如果值要为null，则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;wife&quot;&gt;</span><br><span class="line">    &lt;null&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><p><strong>属性是Properties类型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name&#x3D;&quot;info&quot;&gt;</span><br><span class="line">    &lt;props&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;sex&quot;&gt;男&lt;&#x2F;prop&gt;</span><br><span class="line">        &lt;prop key&#x3D;&quot;生日&quot;&gt;2022.01.12&lt;&#x2F;prop&gt;</span><br><span class="line">    &lt;&#x2F;props&gt;</span><br><span class="line">&lt;&#x2F;property&gt;</span><br></pre></td></tr></table></figure><h2 id="扩展注入"><a href="#扩展注入" class="headerlink" title="扩展注入"></a>扩展注入</h2><h3 id="P命名空间"><a href="#P命名空间" class="headerlink" title="P命名空间"></a>P命名空间</h3><p>需要导入一个命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:p&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;p&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.ggy.pojo.Student&quot; p:name&#x3D;&quot;ggy&quot; p:address-ref&#x3D;&quot;address&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="C命名空间"><a href="#C命名空间" class="headerlink" title="C命名空间"></a>C命名空间</h3><p>增加一个C命名空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:c&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;c&quot;</span><br></pre></td></tr></table></figure><p>这个是针对有参构造函数的，方便的给构造函数的参数进行赋值，不需要之前那样使用constructor-arg了。</p><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;student&quot; class&#x3D;&quot;com.ggy.pojo.Student&quot; c:name&#x3D;&quot;ggy&quot; c:sex&#x3D;&quot;boy&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>有参构造函数的两个参数是name和sex。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考试基本考完了，现在来学习一下spring框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Spring5学习(1)" scheme="https://ggyggy666.github.io/tags/Spring5%E5%AD%A6%E4%B9%A0-1/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习3</title>
    <link href="https://ggyggy666.github.io/2021/06/09/Mybatis%E5%AD%A6%E4%B9%A03/"/>
    <id>https://ggyggy666.github.io/2021/06/09/Mybatis%E5%AD%A6%E4%B9%A03/</id>
    <published>2021-06-09T03:35:44.000Z</published>
    <updated>2021-06-10T14:11:01.511Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续学习Mybatis。</p><a id="more"></a><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>日志可以记录所做的操作，从而快速发现错误。</p><p>Mybatis中可以在Mybatis-config.xml中配置settings, 使用logImpl开启日志，日志也有多种</p><blockquote><p>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</p></blockquote><p>其中，LOG4J和STDOUT_LOGGING需要掌握。</p><h2 id="STDOUT-LOGGING"><a href="#STDOUT-LOGGING" class="headerlink" title="STDOUT_LOGGING"></a>STDOUT_LOGGING</h2><p>标准输出日志。在mybatis-config.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;STDOUT_LOGGING&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure><p>注意，settings标签在properties标签后面。顺序！</p><p>然后测试</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609114721826.png" alt="image-20210609114721826"></p><p>可以看到输出的日志。</p><h2 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h2><p>apache的一个开源项目，可以控制日志输出的目的是控制台、文件还是GUI组件，也可以控制日志的输出形式，还可以控制日志信息的级别，决定生成的日志是否详细。更重要的是，可以通过一个配置文件灵活配置。</p><p>1.导入log4j的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;log4j&#x2F;log4j --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>2.在resources目录下新建一个log4j.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#将DEBUG级别的日志信息输出到控制台和文件</span><br><span class="line">log4j.rootLogger&#x3D;DEBUG,console,file</span><br><span class="line"></span><br><span class="line">#控制台输出的相关配置</span><br><span class="line">log4j.appender.console&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target &#x3D; System.out</span><br><span class="line">log4j.appender.console.Threshold&#x3D;DEBUG</span><br><span class="line">log4j.appender.console.layout &#x3D; org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern &#x3D; [%c]-%m%n</span><br><span class="line"></span><br><span class="line">#文件输出的相关配置</span><br><span class="line">log4j.appender.file &#x3D; org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File &#x3D; .&#x2F;log&#x2F;Mybatis.log</span><br><span class="line">log4j.appender.file.MaxFileSize &#x3D; 10mb</span><br><span class="line">log4j.appender.file.Threshold &#x3D; DEBUG</span><br><span class="line">log4j.appender.file.layout &#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern &#x3D;[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"></span><br><span class="line">#选择输出什么日志，日志输出级别</span><br><span class="line">log4j.logger.org.mybatis&#x3D;DEBUG</span><br><span class="line">log4j.logger.java.sql&#x3D;DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement&#x3D;DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet&#x3D;DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement&#x3D;DEBUG</span><br></pre></td></tr></table></figure><p>3.配置Log4J</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;LOG4J&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure><p>4.直接测试运行</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609151750252.png" alt="image-20210609151750252"></p><p><strong>log4j的使用</strong></p><p>之前的日志都是系统自己运行生成的，log4j<strong>支持自定义的信息加入到日志中。</strong></p><p>1.在测试类中导入Logger包，注意是需要org.apache.log4j的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void testLog4j()&#123;</span><br><span class="line">    Logger logger &#x3D; Logger.getLogger(userMapperTest.class);</span><br><span class="line">    logger.info(&quot;info: yes&quot;);</span><br><span class="line">    logger.debug(&quot;debug: yes&quot;);</span><br><span class="line">    logger.error(&quot;error: yes&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有3个方法，一般情况使用Info，debug模式使用debug，发生错误使用error。</p><p>userMapperTest.class表明这个日志记录这个类里面运行产生的日志信息。</p><p>2.在其它函数也能用，就得把getLogger放在类开头并使用static</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static Logger logger &#x3D; Logger.getLogger(userMapperTest.class);</span><br></pre></td></tr></table></figure><p>然后在一个函数比如test函数中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    &#x2F;&#x2F;获取sqlSession对象</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper usermapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    user user &#x3D; usermapper.getUserById(1);</span><br><span class="line">    logger.info(&quot;输出查询到的用户信息：&quot;);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后，查看日志</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609153115555.png" alt="image-20210609153115555"></p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>其实就是查询数据库，只不过SQL语句使用了Limit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from mybatis.user limit startIndex, pageSize</span><br><span class="line">select * from mybatis.user limit 3;&#x2F;&#x2F;默认从0开始取3个</span><br></pre></td></tr></table></figure><p>1.userMapper中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;user&gt; getUserListByLimit(Map&lt;String, Integer&gt; map);</span><br></pre></td></tr></table></figure><p>2.userMapper.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id&#x3D;&quot;map&quot; type&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;pwd&quot; property&#x3D;&quot;password&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;getUserListByLimit&quot; resultMap&#x3D;&quot;map&quot;&gt;</span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>3.userMapperTest中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getUserListByLimit()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    HashMap&lt;String, Integer&gt; stringIntegerHashMap &#x3D; new HashMap&lt;String, Integer&gt;();</span><br><span class="line">    stringIntegerHashMap.put(&quot;startIndex&quot;, 0);</span><br><span class="line">    stringIntegerHashMap.put(&quot;pageSize&quot;, 2);</span><br><span class="line">    List&lt;user&gt; userListByLimit &#x3D; mapper.getUserListByLimit(stringIntegerHashMap);</span><br><span class="line">    for(user u:userListByLimit)&#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609154727963.png" alt="image-20210609154727963"></p><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><p><strong>注解开发记得mapper映射</strong></p><h2 id="不传参数"><a href="#不传参数" class="headerlink" title="不传参数"></a>不传参数</h2><p>不用userMapper.xml文件了，而是直接在接口上写注解的SQL语句。</p><p>新建一个项目后，将之前的东西都复制过来，然后把userMapper.xml删除。在Mybatis-config.xml中换一种<strong>mapper映射资源方式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class&#x3D;&quot;com.ggy.dao.userMapper&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>之后在userMapper中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface userMapper &#123;</span><br><span class="line">    @Select(&quot;select * from mybatis.user;&quot;)</span><br><span class="line">    List&lt;user&gt; getUserList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在测试类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    List&lt;user&gt; userList &#x3D; mapper.getUserList();</span><br><span class="line">    for(user u:userList)&#123;</span><br><span class="line">        System.out.println(u);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果如下</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609160442387.png" alt="image-20210609160442387"></p><p>可以发现，password为空了，这是因为user类中的password属性与数据库表中的字段pwd不一致，而且没有userMapper.xml做映射了，因此查询为null。</p><p><strong>注解方式可以用于简单的执行SQL语句</strong>，复杂一点就不行了。</p><p><strong>本质：反射机制</strong></p><p><strong>底层：动态代理</strong></p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609161136141.png" alt="image-20210609161136141"></p><h2 id="传参数（不是类）"><a href="#传参数（不是类）" class="headerlink" title="传参数（不是类）"></a>传参数（不是类）</h2><p>传的参数是int,String等，参数前都需要加@param(“xx”)，<strong>注意这个里面的xx与SQL语句中的#{xx}一致。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from mybatis.user where id &#x3D; #&#123;id&#125;;&quot;)</span><br><span class="line">user getUserById(@Param(&quot;id&quot;) int id);</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testid()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    user userById &#x3D; mapper.getUserById(1);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是删除、修改、插入操作需要提交事务，每次都提交麻烦，可以在工具类中使用openSession时配置自动提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static SqlSession getSession()&#123;</span><br><span class="line">    return sqlSessionFactory.openSession(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传参数（类）"><a href="#传参数（类）" class="headerlink" title="传参数（类）"></a>传参数（类）</h2><p>如果传的参数是类，不需要@param注解</p><p>接口类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;);&quot;)</span><br><span class="line">int insertUser(user u);</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void insertUser()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    int res &#x3D; mapper.insertUser(new user(7,&quot;ggy7&quot;,&quot;777&quot;));</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功插入。</p><h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>动态SQL，就是在不同条件下生成不同的SQL语句。有四种</p><ul><li>if</li><li>choose(when, otherwise)</li><li>trim(where, set)</li><li>foreach</li></ul><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table blog(</span><br><span class="line">id varchar(50) not null comment &#39;博客id&#39;,</span><br><span class="line">title varchar(50) not null comment &#39;博客标题&#39;,</span><br><span class="line">author varchar(30) not null comment &#39;博客作者&#39;,</span><br><span class="line">create_time datetime not null comment &#39;创建时间&#39;,</span><br><span class="line">views int(30) not null comment &#39;浏览量&#39;</span><br><span class="line">)engine&#x3D;InnoDB default charset&#x3D;utf8;</span><br></pre></td></tr></table></figure><p>创建好表，新建一个项目。</p><ol><li><p>将db.properties和Mybatis-config.xml复制到resources目录。</p></li><li><p>main的java目录下，创建一个com.ggy包，在这个包下创建dao, pojo, utils包。</p></li><li><p>将MybatisUtil.java类复制过来到utils包中。</p></li><li><p>在pojo包下新建一个Blog类，然后生成构造函数（有参和无参），Getter and Setter，还有toString函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private String id;</span><br><span class="line">private String title;</span><br><span class="line">private String author;</span><br><span class="line">private Date create_time;</span><br><span class="line">private int views;</span><br></pre></td></tr></table></figure></li><li><p>在dao包下新建一个接口BlogMapper.java类和一个BlogMapper.xml文件。BlogMapper.xml先初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.ggy.dao.BlogMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>然后在Mybatis-config.xml中更新mappers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper class&#x3D;&quot;com.ggy.dao.BlogMapper&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure></li><li><p>在utils包下新建一个IDutils类，因为ID不是从1开始递增了，而是使用UUID随机生成返回。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210610202105245.png" alt="image-20210610202105245"></p><p>发现类名有下划线，不是红色，因此是警告，使用<code>@SuppressWarnings(&quot;all&quot;)</code>来抑制警告。</p></li><li><p>新建一个randomID函数，返回一个生成的UUID，将函数变成static，之后就可以直接用类名.函数名访问。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static String randomID()&#123;</span><br><span class="line">String s &#x3D; UUID.randomUUID().toString();</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getID()&#123;</span><br><span class="line">    String s &#x3D; randomID();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">410f5378-b8ab-4afc-b566-4b40a072885c</span><br></pre></td></tr></table></figure></li><li><p>UUID去除掉-，则需要使用replace</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s &#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br></pre></td></tr></table></figure></li><li><p>在BlogMapper接口类中增加一个插入数据的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int addBlog(Blog blog);</span><br></pre></td></tr></table></figure><p>BlogMapper.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;addBlog&quot; parameterType&#x3D;&quot;Blog&quot;&gt;</span><br><span class="line">    insert into Mybatis.Blog(id, title, author, create_time, views) values (#&#123;id&#125;, #&#123;title&#125;, #&#123;author&#125;, #&#123;create_time&#125;, #&#123;views&#125;);</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper &#x3D; session.getMapper(BlogMapper.class);</span><br><span class="line">    Blog blog &#x3D; new Blog();</span><br><span class="line">    blog.setId(IDutils.randomID());</span><br><span class="line">    blog.setTitle(&quot;新青年&quot;);</span><br><span class="line">    blog.setAuthor(&quot;ggy&quot;);</span><br><span class="line">    blog.setCreate_time(new Date());</span><br><span class="line">    blog.setViews(1500);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDutils.randomID());</span><br><span class="line">    blog.setTitle(&quot;ccg-lenovo.com&quot;);</span><br><span class="line">    blog.setAuthor(&quot;ggy&quot;);</span><br><span class="line">    blog.setCreate_time(new Date());</span><br><span class="line">    blog.setViews(9900);</span><br><span class="line">    mapper.addBlog(blog);</span><br><span class="line">    </span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后，即可在数据库中成功插入两条数据。</p></li></ol><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210610205116585.png" alt="image-20210610205116585"></p><h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><p>如果满足if的条件（test=），则在SQL语句后增加一个条件。</p><p>BlogMapper.java中增加一个接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; queryBlogIF(Map&lt;String, String&gt; map);</span><br></pre></td></tr></table></figure><p>BlogMapper.xml中实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryBlogIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;Blog&quot;&gt;</span><br><span class="line">    select * from Mybatis.blog where 1&#x3D;1 </span><br><span class="line">    &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;</span><br><span class="line">        and title&#x3D;#&#123;title&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;</span><br><span class="line">        and author&#x3D;#&#123;author&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>SQL语句后增加了两个if标签，test=””是条件，如果条件满足，SQL语句后面就拼接上相应的条件。比如这里，title和author都是空时，将blog内容全都查出来，如果title不为空，增加一个条件：<code>where title=#{title}</code>, 如果author也不为空，又拼接一个SQL条件。</p><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void query()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper &#x3D; session.getMapper(BlogMapper.class);</span><br><span class="line">    HashMap&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class="line">    mapper.queryBlogIF(map);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全都查出来了。然后title不为空情况下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(&quot;title&quot;, &quot;新青年&quot;);</span><br></pre></td></tr></table></figure><p>只查询出新青年这一条，author也不为空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.put(&quot;title&quot;, &quot;新青年&quot;);</span><br><span class="line">map.put(&quot;author&quot;, &quot;ggy&quot;);</span><br></pre></td></tr></table></figure><p>两个条件都满足的也只有新青年这一条记录了。</p><h2 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim(where, set)"></a>trim(where, set)</h2><p>使用trim可以等价于where或者set。</p><p><strong>等价于where</strong></p><p>前置即增加WHERE，只满足一个条件时将前面的AND或者OR去掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix&#x3D;&quot;WHERE&quot; prefixOverrides&#x3D;&quot;AND | OR&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;trim&gt;</span><br></pre></td></tr></table></figure><p><strong>等价于set</strong></p><p>前置即增加SET，只更改一个值时将后面的逗号去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix&#x3D;&quot;SET&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;trim&gt;</span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>注意到上面的BlogMapper.xml中的SQL语句是用来where 1=1, 后面的if标签用了and xxx才能拼接成功。而如果把这where 1=1去掉，就应该使用where标签了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryBlogIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;Blog&quot;&gt;</span><br><span class="line">    select * from Mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;</span><br><span class="line">            title&#x3D;#&#123;title&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;</span><br><span class="line">            and author&#x3D;#&#123;author&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>如果只满足第一个条件，SQL语句就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Mybatis.blog where title&#x3D;#&#123;title&#125;</span><br></pre></td></tr></table></figure><p>如果只满足第二个条件，SQL语句就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Mybatis.blog where author&#x3D;#&#123;author&#125;</span><br></pre></td></tr></table></figure><p>会自动把and去掉。如果两个条件都满足</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Mybatis.blog where title&#x3D;#&#123;title&#125; and author&#x3D;#&#123;author&#125;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>SET用于update语句，可以为SQL语句增加一个SET，如果只有一个要更改，可以去掉SQL语句中的逗号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryBlogIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;Blog&quot;&gt;</span><br><span class="line">    update Mybatis.blog</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;</span><br><span class="line">            title&#x3D;#&#123;title&#125;,</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">        &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;</span><br><span class="line">            author&#x3D;#&#123;author&#125;</span><br><span class="line">        &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;set&gt;</span><br><span class="line">    where id&#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><h2 id="choose-when"><a href="#choose-when" class="headerlink" title="choose when"></a>choose when</h2><p>有IF了，那么就会有多个条件的，类似switch, Choose和when就是这样的东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryBlogIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;Blog&quot;&gt;</span><br><span class="line">    select * from Mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;choose&gt;</span><br><span class="line">            &lt;when test&#x3D;&quot;title!&#x3D;null&quot;&gt;</span><br><span class="line">                title&#x3D;#&#123;title&#125;</span><br><span class="line">            &lt;&#x2F;when&gt;</span><br><span class="line">            &lt;when test&#x3D;&quot;author!&#x3D;null&quot;&gt;</span><br><span class="line">                and author&#x3D;#&#123;author&#125;</span><br><span class="line">            &lt;&#x2F;when&gt;</span><br><span class="line">            &lt;otherwise&gt;</span><br><span class="line">                and views&#x3D;#&#123;views&#125;</span><br><span class="line">            &lt;&#x2F;otherwise&gt;</span><br><span class="line">        &lt;&#x2F;choose&gt;</span><br><span class="line">    &lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>如果条件都满足，只用第一个就结束了。类似break。</p><h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><p>从上面可以知道，如果每一个功能都用到动态SQL，并且它们的IF语句都一样的话，就显得非常臃肿。因此需要采用SQL片段，将重复的条件放在SQL片段里面，然后用到时include即可。</p><p>首先将重复的IF语句放在sql标签里面，随便定义一个ID。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;sql id&#x3D;&quot;if-title-author&quot;&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;title!&#x3D;null&quot;&gt;</span><br><span class="line">        title&#x3D;#&#123;title&#125;,</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;if test&#x3D;&quot;author!&#x3D;null&quot;&gt;</span><br><span class="line">        author&#x3D;#&#123;author&#125;</span><br><span class="line">    &lt;&#x2F;if&gt;</span><br><span class="line">&lt;&#x2F;sql&gt;</span><br></pre></td></tr></table></figure><p>然后使用include, refid是sql中的id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryBlogIF&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;Blog&quot;&gt;</span><br><span class="line">    update Mybatis.blog</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">        &lt;include refid&#x3D;&quot;if-title-author&quot;&gt;&lt;&#x2F;include&gt;</span><br><span class="line">    &lt;&#x2F;set&gt;</span><br><span class="line">    where id&#x3D;#&#123;id&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>注意，不要放太多语句在sql标签里面，也不要放where进去。</p><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>适用于条件都在一个集合里面，比如In (1,2,3)。</p><p>SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Mybatis.blog where id in(1,2)</span><br></pre></td></tr></table></figure><p>首先新建一个接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Blog&gt; queryBlogForEach(Map&lt;String, String&gt; map);</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;queryBlogForEach&quot; parameterType&#x3D;&quot;map&quot; resultType&#x3D;&quot;Blog&quot;&gt;</span><br><span class="line">    select * from Mybatis.blog</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;foreach collection&#x3D;&quot;ids&quot; index&#x3D;&quot;index&quot; item&#x3D;&quot;id&quot; open&#x3D;&quot;id in (&quot; close&#x3D;&quot;)&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        &lt;&#x2F;foreach&gt;</span><br><span class="line">    &lt;&#x2F;where&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>ids是map里面的一个键，而且这个ids对应的值本身是一个集合，collection=”ids”。</p><p>index=”index“，不用改</p><p>item=”id”, 表示集合里面的每一项值，之后用#{id}取出来</p><p>open=”id in (“ ，表示这个条件是以id in(开头的</p><p>close=”)”，以)结束</p><p>separator=”,”，以逗号为分隔符</p><p>最终效果：id in (1) 或者 id in (1,2,3)…</p><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testFor()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper &#x3D; session.getMapper(BlogMapper.class);</span><br><span class="line">    HashMap map &#x3D; new HashMap();</span><br><span class="line">    ArrayList&lt;String&gt; ids &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">    map.put(&quot;ids&quot;, ids);</span><br><span class="line">    List&lt;Blog&gt; list &#x3D; mapper.queryBlogForEach(map);</span><br><span class="line">    for(Blog blog:list)&#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于集合是空集，不满足任何条件，所以可以查出所有数据。往集合里面加1，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testFor()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper &#x3D; session.getMapper(BlogMapper.class);</span><br><span class="line">    HashMap map &#x3D; new HashMap();</span><br><span class="line">    ArrayList&lt;String&gt; ids &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">    ids.add(&quot;1&quot;);&#x2F;&#x2F;这里加了一个id为1.</span><br><span class="line">    map.put(&quot;ids&quot;, ids);</span><br><span class="line">    List&lt;Blog&gt; list &#x3D; mapper.queryBlogForEach(map);</span><br><span class="line">    for(Blog blog:list)&#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到预编译的SQL语句是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Mybatis.blog WHERE id in ( ? )</span><br></pre></td></tr></table></figure><p>之后传了一个1进去，即可查询出来。</p><h1 id="Mybatis详细执行流程"><a href="#Mybatis详细执行流程" class="headerlink" title="Mybatis详细执行流程"></a>Mybatis详细执行流程</h1><ol><li>Resources获取加载全局配置文件</li><li>实例化SqlSessionFactoryBuilder构造器</li><li>解析配置文件流XMLConfigBuilder</li><li>Configuration所有的配置信息</li><li>SqlSessionFactory实例化</li><li>transaction事务管理器</li><li>创建executor执行器</li><li>创建sqlSession</li><li>实现CRUD，如果事务出现问题需要回滚，回到6中的事务管理器</li><li>查看是否执行SQL成功，不成功需要回滚则回到6中的事务管理器。</li><li>成功则提交事务。</li><li>关闭sqlSession。</li></ol><h1 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h1><p>缓存就是存储在内存中的数据，当用户经常查询某些数据时，每次查询都需要访问数据库，效率不高；而如果将经常用到的且不轻易改变的数据存在内存中，之后再次查询就可以直接获取，减少与数据库的交互次数，从而减少系统开销，提高效率。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>一级缓存和二级缓存。</p><ul><li>一级缓存，SqlSession级别的缓存，即本地缓存，默认开启。</li><li>二级缓存，需要手动开启和配置，基于namespace级别，定义了缓存接口Cache，可通过Cache自定义二级缓存。</li></ul><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>测试SqlSession一级缓存。</p><p>首先userMapper.java中创建一个接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user getUserById(@Param(&quot;id&quot;) int id);</span><br></pre></td></tr></table></figure><p>在userMapper.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;com.ggy.dao.userMapper&quot;&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getUserById&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        select * from mybatis.user where id&#x3D;#&#123;id&#125;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>在Mybatis-config.xml中开启日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;STDOUT_LOGGING&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure><p>test</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    user userById &#x3D; mapper.getUserById(1);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">    user userById1 &#x3D; mapper.getUserById(1);</span><br><span class="line">    System.out.println(userById1);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个SqlSession中查询一个数据两次，结果</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210610152308651.png" alt="image-20210610152308651"></p><p>可见，第二次查询并没有重新打开JDBC连接，而是直接在缓存中查找到的。</p><h2 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h2><p><strong>1.查询不同的数据。</strong></p><p><strong>2.select查询会保存进缓存，insert, update, delete操作会刷新缓存。</strong></p><p>增加接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int updateUser(user u);</span><br></pre></td></tr></table></figure><p>实现接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;updateUser&quot; parameterType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">    update mybatis.user set name&#x3D;#&#123;id&#125;,pwd&#x3D;#&#123;password&#125; where id&#x3D;#&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    user userById &#x3D; mapper.getUserById(1);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;增加一个更新操作</span><br><span class="line">    mapper.updateUser(new user(2,&quot;ggy222&quot;,&quot;22xx&quot;));</span><br><span class="line">    </span><br><span class="line">    user userById1 &#x3D; mapper.getUserById(1);</span><br><span class="line">    System.out.println(userById1);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210610153018256.png" alt="image-20210610153018256"></p><p>可以发现，更新操作刷新了缓存，第二次查询需要重新查询数据库了。</p><p><strong>3.查询不同的userMapper.xml</strong></p><p>4.<strong>手动清除缓存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">user userById &#x3D; mapper.getUserById(1);</span><br><span class="line">System.out.println(userById);</span><br><span class="line"></span><br><span class="line">session.clearCache();</span><br><span class="line"></span><br><span class="line">user userById1 &#x3D; mapper.getUserById(1);</span><br><span class="line">System.out.println(userById1);</span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><p>使用session.clearCache()清除缓存。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210610153406616.png" alt="image-20210610153406616"></p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>即全局缓存，需要手动开启。</p><p>Mybatis-config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;logImpl&quot; value&#x3D;&quot;STDOUT_LOGGING&quot;&#x2F;&gt;</span><br><span class="line">    &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure><p>然后在userMapper.xml中，在同一个namespace中。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210610153931671.png" alt="image-20210610153931671"></p><p>可以直接<code>&lt;cache/&gt;</code>, 也可以配置一些东西</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache eviction&#x3D;&quot;FIFO&quot; flushInterval&#x3D;&quot;60000&quot; size&#x3D;&quot;512&quot; readOnly&#x3D;&quot;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>缓存刷新方式是FIFO先进先出，每隔60秒刷新，最多只能存512个数据，只读。</p><p><strong>先使用配置了的cache测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    SqlSession session2 &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    user userById &#x3D; mapper.getUserById(1);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">    userMapper mapper2 &#x3D; session2.getMapper(userMapper.class);</span><br><span class="line">    user userById1 &#x3D; mapper2.getUserById(1);</span><br><span class="line">    System.out.println(userById1);</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工作机制</strong></p><p>查一条数据，存到一级缓存，关闭后，一级缓存没了，但是存到了二级缓存。</p><p>session关闭后，再使用session2查询同样的数据，会在二级缓存查找。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210610155253816.png" alt="image-20210610155253816"></p><p><strong>只使用<code>&lt;cache/&gt;</code>会报序列化的错误</strong></p><blockquote><p>org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: com.ggy.pojo.user</p></blockquote><p>到user类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class user implements Serializable&#123;&#125;</span><br></pre></td></tr></table></figure><p>实现序列化类即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续学习Mybatis。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Mybatis学习3" scheme="https://ggyggy666.github.io/tags/Mybatis%E5%AD%A6%E4%B9%A03/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习2</title>
    <link href="https://ggyggy666.github.io/2021/06/08/Mybatis%E5%AD%A6%E4%B9%A02/"/>
    <id>https://ggyggy666.github.io/2021/06/08/Mybatis%E5%AD%A6%E4%B9%A02/</id>
    <published>2021-06-08T02:14:17.000Z</published>
    <updated>2021-06-09T03:35:13.932Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续学习Mybatis。</p><a id="more"></a><p>通常情况下，Mybatis中连接数据库的类名都用的是mapper而不是dao了。因此首先把昨天写的userDao改成userMapper。之后还需要修改一些相关联的东西。</p><h1 id="userDao修改成userMapper"><a href="#userDao修改成userMapper" class="headerlink" title="userDao修改成userMapper"></a>userDao修改成userMapper</h1><p>mybatis-config.xml配置文件是配置了连接数据库的，不用改；utils包的MybatisUtils是获取连接数据库的一个sqlSession的，不用改；pojo中的user实体类是对应数据库表的字段值的，也不要改；因此只需要改dao层的接口和xml文件。</p><p>命名空间：在userMapper.xml中，命名空间是绑定接口类userMapper的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;com.ggy.dao.userMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--SQL语句，userDao中的方法名唯一标识，返回类型是userDao中的方法的类型--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getUserList&quot; resultType&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>select标签代码查询语句，id对应接口类中的getUserList函数，resultType是执行SQL语句后返回的类型，还有之后用到的parameterType是参数类型（Class, Integer, String这些）。</p><p>test目录下的测试类也要改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userMapper usermapper &#x3D; session.getMapper(com.ggy.dao.userMapper.class);</span><br><span class="line">List&lt;user&gt; userList &#x3D; usermapper.getUserList();</span><br></pre></td></tr></table></figure><h1 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h1><p>增删改查操作。</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>1.首先在userMapper接口类中增加一个接口，该接口可以通过传进来一个id值查询出对应的一行数据，返回类型自然是user</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user getUserById(int id);</span><br></pre></td></tr></table></figure><p>2.在userMapper.xml中绑定这个接口，并增加查询语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过id查询用户--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getUserById&quot; resultType&#x3D;&quot;com.ggy.pojo.user&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">    select * from mybatis.user where id &#x3D; #&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>因为先前已经有命名空间绑定了userMapper接口了，这里只需要增加select语句。</p><p>3.在userMapperTest增加一个测试函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getUserByIdTest()&#123;</span><br><span class="line">    SqlSession sqlSession &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; sqlSession.getMapper(userMapper.class);</span><br><span class="line">    user userById &#x3D; mapper.getUserById(1);</span><br><span class="line">    System.out.println(userById);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取sqlSession后，使用getMapper函数获得一个mapper对象，然后再去调用这个对象里面的getUserById接口，并传一个id值1进去获得返回的user，然后输出。<strong>最后记得要使用sqlSession.close关闭！</strong></p><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>1.首先在userMapper接口类中增加一个接口，该接口可以通过传入一个user类进行插入数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int insertData(user User);</span><br></pre></td></tr></table></figure><p>2.在userMapper.xml中绑定这个接口，并增加插入语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--插入数据--&gt;</span><br><span class="line">&lt;insert id&#x3D;&quot;insertData&quot; parameterType&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">    insert into user(id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure><p>注意，因为要用到预编译，所以#{id},#[name],#{pwd}的名字需要与user类中的三个属性名称一致。</p><p>3.在userMapperTest增加一个测试函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void insertData()&#123;</span><br><span class="line">    SqlSession sqlSession &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; sqlSession.getMapper(userMapper.class);</span><br><span class="line">    int res &#x3D; mapper.insertData(new user(4, &quot;ggy4&quot;, &quot;444&quot;));</span><br><span class="line">    if(res&gt;0)&#123;</span><br><span class="line">        System.out.println(&quot;Insert Success!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，插入的返回值是一个整数，不为0说明插入成功。而且<strong>增删改操作需要提交事务！</strong>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>同理插入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;userMapper.java</span><br><span class="line">int updateUser(user User);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;userMapper.xml</span><br><span class="line">&lt;!--更新数据--&gt;</span><br><span class="line">&lt;update id&#x3D;&quot;updateUser&quot; parameterType&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">    update mybatis.user set name&#x3D;#&#123;name&#125;, pwd&#x3D;#&#123;pwd&#125; where id&#x3D;#&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;userMapperTest.java</span><br><span class="line">@Test</span><br><span class="line">public void updateData()&#123;</span><br><span class="line">    SqlSession sqlSession &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; sqlSession.getMapper(userMapper.class);</span><br><span class="line">    int res &#x3D; mapper.updateUser(new user(4, &quot;ggy444&quot;, &quot;44&quot;));</span><br><span class="line">    if(res&gt;0)&#123;</span><br><span class="line">        System.out.println(&quot;Update Success!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;userMapper.java</span><br><span class="line">int deleteUser(int id);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;userMapper.xml</span><br><span class="line">&lt;!--删除数据--&gt;</span><br><span class="line">&lt;delete id&#x3D;&quot;deleteUser&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">    delete from mybatis.user where id&#x3D;#&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;delete&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;userMapperTest.java</span><br><span class="line">@Test</span><br><span class="line">public void deleteData()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    int i &#x3D; mapper.deleteUser(4);</span><br><span class="line">    if(i&gt;0)System.out.println(&quot;Delete Success!&quot;);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Map使用和模糊查询"><a href="#Map使用和模糊查询" class="headerlink" title="Map使用和模糊查询"></a>Map使用和模糊查询</h1><h2 id="Map使用"><a href="#Map使用" class="headerlink" title="Map使用"></a>Map使用</h2><p>像之前的插入，传入的是user类，在传入类时必须要初始化，而new时又必须知道这个类有多少参数，也就是说需要知道数据库的表的所有字段，并且SQL语句预编译时使用的必须参数名必须跟字段名一致，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(id, name, pwd) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;pwd&#125;);</span><br></pre></td></tr></table></figure><p>如果字段非常多，但是我们又只想插入某几个字段而已，这时候就显得非常累赘麻烦了。如果使用map就不一样了。需要添加什么字段，就可以将其保存到map中，使用键值对的方式，在SQL语句预编译时使用map的键即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int insertData1(Map&lt;String, Object&gt; map);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用Map插入数据--&gt;</span><br><span class="line">&lt;insert id&#x3D;&quot;insertData1&quot; parameterType&#x3D;&quot;map&quot;&gt;</span><br><span class="line">    insert into user(id, pwd) values (#&#123;id&#125;, #&#123;password&#125;);</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void insertData1()&#123;</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(&quot;id&quot;, 5);</span><br><span class="line">    map.put(&quot;password&quot;, &quot;ggy555&quot;);</span><br><span class="line">    int i &#x3D; mapper.insertData1(map);</span><br><span class="line">    if(i&gt;0)System.out.println(&quot;插入成功！&quot;);</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>使用like查询。可能会返回多个user，因此</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;user&gt; getUserByLike(String value);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过value模糊查询用户--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getUserByLike&quot; resultType&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">    select * from mybatis.user where name like #&#123;value&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>这个value与接口传进来的参数名是一致的。因为这个xml里的select配置是接口的实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void getUserByLike()&#123;</span><br><span class="line">    SqlSession sqlSession &#x3D; MybatisUtils.getSession();</span><br><span class="line">    userMapper mapper &#x3D; sqlSession.getMapper(userMapper.class);</span><br><span class="line">    List&lt;user&gt; userByLike &#x3D; mapper.getUserByLike(&quot;%g%&quot;);</span><br><span class="line">    for(user user1:userByLike)&#123;</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模糊查询需要有%, 如果把%都去掉，就查不到数据了。但是有一种情况，就是SQL语句中有%, 然后传进来的值与%进行拼接（使用的是$)之后再执行，这样会造成SQL注入。</p><p>userMapper.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--通过value模糊查询用户--&gt;</span><br><span class="line">&lt;select id&#x3D;&quot;getUserByLike&quot; resultType&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">    select * from mybatis.user where name like &#39;%$&#123;value&#125;%&#39;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>userMapperTest.java的getUserByLike函数中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;user&gt; userByLike &#x3D; mapper.getUserByLike(&quot;g&#39; or 1&#x3D;1#&quot;);</span><br></pre></td></tr></table></figure><p>这样会造成SQL注入。</p><p>#{id}这样是做了预编译，${id}这样没有做预编译，直接就拼接了。</p><p>防御：<strong><code>&quot;%&quot;#{id}&quot;%&quot;</code></strong>或者<code>concat(&quot;%&quot;, #{id}, &quot;%&quot;)</code></p><h1 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h1><p>配置文件mybatis-config.xml中有很多配置，需要掌握的配置如下：</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210608212237449.png" alt="image-20210608212237449"></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>environments中可以配置多个环境，但是每个sqlSession只能使用一个环境，使用default属性来配置默认的环境，比如：</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210608214141756.png" alt="image-20210608214141756"></p><p>默认的环境就是test环境了。</p><p>注意transactionManager这个标签，事务管理器，Mybatis有两个事务管理器：JDBC和MANAGED，默认是JDBC。</p><p>dataSource是数据源标签，有三种类型：UNPOOLED, POOLED和JNDI。</p><ul><li>UNPOOLED，非连接池，每一次连接数据库都要请求，用完后就关闭数据库的连接。</li><li>POOLED，连接池，连接数据库后不关闭，可以让web应用快速响应请求。</li><li>JNDI，在其它应用服务器中配置数据源，然后JNDI方式导入。</li></ul><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>properties配置。在一个db.properties文件中定义好一些配置，然后通过properties标签引入进来，之后的environment环境中的dataSource中的属性就不用写死了，只需要${}就行了。</p><p>新建一个db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver&#x3D;com.mysql.cj.jdbc.Driver</span><br><span class="line">url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.1.105:3306&#x2F;mybatis?useSSL&#x3D;false&amp;serverTimezone&#x3D;GMT%2B8&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br></pre></td></tr></table></figure><p>url中用的是&amp;了，不是<code>&amp;amp;</code>了。</p><p>然后在Mybatis-config.xml中导入，并将属性值换成动态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource&#x3D;&quot;db.properties&quot;&#x2F;&gt;</span><br><span class="line">&lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">        &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">        &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username&#125;&quot;&#x2F;&gt;</span><br><span class="line">            &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;dataSource&gt;</span><br><span class="line">    &lt;&#x2F;environment&gt;</span><br></pre></td></tr></table></figure><p>注意properties标签必须在最开头。有顺序的。</p><p>还有一种写法，在db.properties中不写username和password，然后在properties标签中加两个property。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource&#x3D;&quot;db.properties&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><p>不过需要注意，这种引入的property优先级低于外部db.properties文件中的属性。即如果这个property标签中的密码是123456，而db.properties中也有一个password，密码是root，这样还是能连接数据库的，因为优先级是获取外部文件中的值。反之就不行了。</p><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>typeAliases, 可以为一个类型设置短的别名，可以减少类完全限定名的冗余。顺序是在配置中的第三个标签。有三种方法设置别名。</p><p>1.使用typeAlias</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;typeAlias type&#x3D;&quot;com.ggy.pojo.user&quot; alias&#x3D;&quot;user&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure><p>然后usermapper.xml中，类型就可以直接使用user了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getUserList&quot; resultType&#x3D;&quot;user&quot;&gt;</span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>2.使用package</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;com.ggy.pojo&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;typeAliases&gt;</span><br></pre></td></tr></table></figure><p>usermapper.xml中类型也是直接使用user，然后会在这个包下扫描得到user类。</p><p>3.使用注解，可以在user这个实体类开头加一句注解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Alias(&quot;user&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210608224447899.png" alt="image-20210608224447899"></p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><p>设置有很多项，目前需要记住的有：</p><p>日志实现</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210608224844573.png" alt="image-20210608224844573"></p><p>开启缓存和延迟加载</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210608224944577.png" alt="image-20210608224944577"></p><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210608225135008.png" alt="image-20210608225135008"></p><h2 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h2><p>mappers，之前就有用到，需要注册userMapper.xml文件资源。</p><p>1.使用resource指定文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource&#x3D;&quot;com&#x2F;ggy&#x2F;dao&#x2F;userMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>2.使用class指定xml文件对应的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">        &lt;mapper class&#x3D;&quot;com.ggy.dao.userMapper&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>需要注意：接口类名称与对应的xml文件名称一致，并且都在同一个包下。</p><p>3.使用package指定包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;package name&#x3D;&quot;com.ggy.dao&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>需要注意：接口类名称与对应的xml文件名称一致，并且都在同一个包下。</p><h2 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h2><p>生命周期和作用域是至关重要的，一旦滥用，会导致严重的并发问题。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609105842475.png" alt="image-20210609105842475"></p><ul><li>SqlSessionFactoryBuilder, <strong>一旦创建，就不再需要了</strong>，是个局部变量。</li><li>SqlSessionFactory，可以理解为<strong>数据库连接池</strong>，一旦被创建，应用运行期间就一直存在，没有理由丢弃或者创建另一个实例，<strong>全局作用域</strong>。最简单就是使用单例模式或者静态单例模式，即只创建一个SqlSessionFactory即可。</li><li>SqlSession，连接到连接池的一个请求，它的实例不是线程安全的无法被共享，最好是请求域方法作用域，<strong>用完后赶紧关闭。</strong></li></ul><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210609105653243.png" alt="image-20210609105653243"></p><p>可见，一个SqlSessionFactory可以创建多个SqlSession, 每一个SqlSession又能创建多个Mapper，每一个Mapper代表一种业务。</p><h1 id="resultMap的使用"><a href="#resultMap的使用" class="headerlink" title="resultMap的使用"></a>resultMap的使用</h1><p><strong>解决属性名和字段名不一致的问题</strong></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>首先新建一个项目，将之前的类、资源等全都复制过来。需要注意的是，不能直接将包和类一块复制过来。需要先创建com.ggy包后，只复制dao,pojo,utils包或者资源文件。</p><p>创建完成后，到user类中，将pwd全部替换成password。然后测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    &#x2F;&#x2F;获取sqlSession对象</span><br><span class="line">    SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">    userMapper usermapper &#x3D; session.getMapper(userMapper.class);</span><br><span class="line">    user user &#x3D; usermapper.getUserById(1);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user&#123;id&#x3D;1, name&#x3D;&#39;ggy1&#39;, password&#x3D;&#39;null&#39;&#125;</span><br></pre></td></tr></table></figure><p>可以发现<strong>password是null值</strong>。因为输出的是user类中的id,name,password三个值，而数据库查询不到password，因此返回null值。</p><p>解决方法：</p><p>1.别名：将SQL语句更改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id,name,pwd as password from mybatis.user where id &#x3D; #&#123;id&#125;;</span><br></pre></td></tr></table></figure><p>2.使用resultMap。</p><h2 id="使用resultMap"><a href="#使用resultMap" class="headerlink" title="使用resultMap"></a>使用resultMap</h2><p>数据库中字段是pwd,类的属性是password，那么只需要对它们做一个映射即可。</p><p>SQL语句修改回来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mybatis.user where id &#x3D; #&#123;id&#125;;</span><br></pre></td></tr></table></figure><p>然后去掉resultType，使用resultMap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;getUserById&quot; resultMap&#x3D;&quot;map&quot; parameterType&#x3D;&quot;int&quot;&gt;</span><br><span class="line">    select * from mybatis.user where id &#x3D; #&#123;id&#125;;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><p>然后增加一个resultMap标签，注意顺序，这个标签在select标签上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id&#x3D;&quot;map&quot; type&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">    &lt;result column&#x3D;&quot;pwd&quot; property&#x3D;&quot;password&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br></pre></td></tr></table></figure><p>这个id的值map应与select标签中的resultMap的值map一致。column表示数据库表的字段名，property表示user类的属性。这样映射即可。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>创建一个使用Mybatis的项目，步骤：</p><ol><li>首先建立一个Maven项目，在pom.xml中将mysql, junit, mybatis这些依赖都装上。</li><li>然后新建一个模块，确保连接上数据库。</li><li>接着在resources目录下创建一个mybaits-config.xml配置文件并编写需要的配置。</li><li>编写一个utils工具类，使得可以通过mybatis-config.xml建立一个SqlSessionFactory并创建出返回SqlSession对象。</li><li>编写一个pojo的实体类，其属性对应数据库表的所有字段。</li><li>编写dao层，创建一个类接口，然后创建mapper.xml去实现它。</li><li>最后创建测试类，去测试。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续学习Mybatis。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Mybatis学习2" scheme="https://ggyggy666.github.io/tags/Mybatis%E5%AD%A6%E4%B9%A02/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习1</title>
    <link href="https://ggyggy666.github.io/2021/06/07/Mybatis%E5%AD%A6%E4%B9%A01/"/>
    <id>https://ggyggy666.github.io/2021/06/07/Mybatis%E5%AD%A6%E4%B9%A01/</id>
    <published>2021-06-07T07:35:42.000Z</published>
    <updated>2021-06-08T02:19:57.284Z</updated>
    
    <content type="html"><![CDATA[<p>今天把Maven大概学习完了，知道了怎么创建项目、配置环境、打包项目和部署项目。接下来学习Mybatis。</p><a id="more"></a><h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><p>用来操作数据库的，原来的JDBC代码太复杂了。</p><p>持久化：将程序的数据在持久状态和瞬时状态转化的过程。因为内存中的数据是断电即失。</p><ul><li><p>Maven仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.mybatis&#x2F;mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.5.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>Github</p><p><a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></p></li><li><p>中文文档</p><p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p></li><li><p>英文文档</p><p><a href="https://mybatis.org/mybatis-3/getting-started.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/getting-started.html</a></p></li></ul><h1 id="Mybatis环境搭建"><a href="#Mybatis环境搭建" class="headerlink" title="Mybatis环境搭建"></a>Mybatis环境搭建</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>打开Phpstudy_pro, 打开Mysql8.0.12, 然后连接数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p root</span><br><span class="line">create database mybatis;</span><br><span class="line">use mybatis;</span><br><span class="line"></span><br><span class="line">create table &#96;user&#96;(</span><br><span class="line">&#96;id&#96; INT(20) not null primary key,</span><br><span class="line">&#96;name&#96; varchar(30) default null,</span><br><span class="line">&#96;pwd&#96; varchar(30) default null</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into &#96;user&#96;(&#96;id&#96;, &#96;name&#96;, &#96;pwd&#96;) values (1,&#39;ggy1&#39;,&#39;111&#39;),(2,&#39;ggy2&#39;,&#39;222&#39;),(3,&#39;ggy3&#39;,&#39;333&#39;);</span><br></pre></td></tr></table></figure><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><p>新建一个普通的Maven项目（不用勾选），然后把src目录删了</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607155502529.png" alt="image-20210607155502529"></p><p>之后在Pom.xml中将MySQL、mybatis和junit依赖导入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;8.0.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.5.6&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a>创建一个模块</h2><p>在项目下创建一个模块，这样就能保持一个父子依赖关系。只要在父项目中配置了MySQL和mybatis等依赖，其它子模块就不用再重新导入了。</p><p>直接new一个Mybatis_01模块。然后需要Mybatis的配置文件：<a href="https://mybatis.org/mybatis-3/getting-started.html。" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/getting-started.html。</a></p><p>在src的main的resources目录下新建一个Mybatis-config.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username&#125;&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><p>但是可以看到有四个property, 需要获得它们的值并覆盖。其中，<strong>driver是com.mysql.jdbc.driver</strong>。而URL就需要连接数据库了。</p><h3 id="IDEA连接MySQL"><a href="#IDEA连接MySQL" class="headerlink" title="IDEA连接MySQL"></a>IDEA连接MySQL</h3><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607193445001.png" alt="image-20210607193445001"></p><p>下载好驱动后，输入用户名和密码连接，发现出错了</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607193928356.png" alt="image-20210607193928356"></p><p>什么时区属性没有设置。按照文章解决：<a href="https://blog.csdn.net/liuqiker/article/details/102455077，Mysql命令行中输入：`set" target="_blank" rel="noopener">https://blog.csdn.net/liuqiker/article/details/102455077，Mysql命令行中输入：`set</a> global time_zone = ‘+8:00’;`即可。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607194031741.png" alt="image-20210607194031741"></p><p>连接成功。然后连接Mybatis数据库</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607194145084.png" alt="image-20210607194145084"></p><p>连接上后，得到url: <code>jdbc:mysql://localhost:3306</code>, 但是这个还不完整。完整如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><p>这是为了防止有其它错误。再填写上用户名和密码，最终如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments default&#x3D;&quot;development&quot;&gt;</span><br><span class="line">        &lt;environment id&#x3D;&quot;development&quot;&gt;</span><br><span class="line">            &lt;transactionManager type&#x3D;&quot;JDBC&quot;&#x2F;&gt;</span><br><span class="line">            &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;true&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;dataSource&gt;</span><br><span class="line">        &lt;&#x2F;environment&gt;</span><br><span class="line">    &lt;&#x2F;environments&gt;</span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><h2 id="编写连接工具类"><a href="#编写连接工具类" class="headerlink" title="编写连接工具类"></a>编写连接工具类</h2><p>连接上Mysql后，需要一个工具类去操作Mysql，执行SQL语句。</p><h3 id="创建MybatisUtils"><a href="#创建MybatisUtils" class="headerlink" title="创建MybatisUtils"></a>创建MybatisUtils</h3><p>这个类用来返回一个sqlSession。</p><p>在java目录下创建com.ggy包，再创建dao包和utils包，在utils包下创建MybatisUtils类</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607205823493.png" alt="image-20210607205823493"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class MybatisUtils &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String resource &#x3D; &quot;mybatis-config.xml&quot;;</span><br><span class="line">            InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);</span><br><span class="line">            SqlSessionFactory sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那三句话就是用来创建SqlSessionFactory的。创建这个工厂后就可以通过openSession()返回一个SqlSession对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static SqlSession getSession()&#123;</span><br><span class="line">    return sqlSessionFactory.openSession();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它是静态的方法，调用的应该也是静态的sqlSessionFactory才行，因此上面也要改。最终如下：</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607210331182.png" alt="image-20210607210331182"></p><p>之后就能调用这个类的getSession方法获得一个sqlSession对象了。</p><h3 id="创建实体类pojo"><a href="#创建实体类pojo" class="headerlink" title="创建实体类pojo"></a>创建实体类pojo</h3><p>在com.ggy包下新建一个pojo包，然后创建一个user类</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607211138183.png" alt="image-20210607211138183"></p><p>这个类包含user表的三个属性，id，name和pwd。然后生成有参和无参的构造函数，生成Getter and Setter，还有toString方法。</p><h3 id="创建userDao接口和userMapper-xml"><a href="#创建userDao接口和userMapper-xml" class="headerlink" title="创建userDao接口和userMapper.xml"></a>创建userDao接口和userMapper.xml</h3><p>在dao包下创建userDao类</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607211505900.png" alt="image-20210607211505900"></p><p>这个类就是一个接口。之后本应该创建一个实现类，但是，常用的实现类是userDaoImpl，这样写的话最终还是使用JDBC去连接，违背了使用Mybatis的初衷。因此，这里创建的是userMapper.xml文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!--与userDao绑定，通过命名空间, 表示实现userDao--&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;com.ggy.dao.userDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--SQL语句，id是userDao中的方法名唯一标识，返回类型是userDao中的方法的类型--&gt;</span><br><span class="line">    &lt;select id&#x3D;&quot;getUserList&quot; resultType&#x3D;&quot;com.ggy.pojo.user&quot;&gt;</span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure><p>返回一个值就是resultType, 多个就得用resultMap。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在test的Java的目录下新建一个com.ggy.dao, 再创建userDaoTest类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class userDaoTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        &#x2F;&#x2F;获取sqlSession对象</span><br><span class="line">        SqlSession session &#x3D; MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;方式一：getMapper</span><br><span class="line">        userDao userDao &#x3D; session.getMapper(com.ggy.dao.userDao.class);</span><br><span class="line">        List&lt;user&gt; userList &#x3D; userDao.getUserList();</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;方式二</span><br><span class="line">        &#x2F;&#x2F;List&lt;user&gt; userList &#x3D; session.selectList(&quot;com.ggy.dao.userDao.getUserList&quot;);</span><br><span class="line">        </span><br><span class="line">        for(user user: userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样运行的话会出错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Type interface com.ggy.dao.userDao is not known to the MapperRegistry.</span><br></pre></td></tr></table></figure><p>因为每一个Mapper.xml都需要在Mybatis-config.xml中注册</p><p>在Mybatis-config.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource&#x3D;&quot;com&#x2F;ggy&#x2F;dao&#x2F;userMapper.xml&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;mappers&gt;</span><br></pre></td></tr></table></figure><p>但是还是错了。因为这个Mapper.xml是在src下的，而现在是运行test目录下的程序，因此找不到userMapper.xml。当然，如果直接复制过来也是可以的，只不过显然臃肿。</p><p>Maven中约定大于配置，所以<strong>需要在pom.xml中的build标签下配置resource，来防止资源导出失败的问题。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;resource&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">            &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">                &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">            &lt;filtering&gt;true&lt;&#x2F;filtering&gt;</span><br><span class="line">        &lt;&#x2F;resource&gt;</span><br><span class="line">    &lt;&#x2F;resources&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure><p>在Mybatis_study也配置一下。再运行还是报错了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Loading class &#96;com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is &#96;com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure><p>驱动被废弃了，因此到Mybatis-config.xml中更改driver。之后运行还是错了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error querying database.  Cause: com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/qiushisoftware/article/details/77718634" target="_blank" rel="noopener">https://blog.csdn.net/qiushisoftware/article/details/77718634</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set global wait_timeout&#x3D;2000;</span><br><span class="line">set global interactive_time&#x3D;2000;</span><br></pre></td></tr></table></figure><p>成功后，退出MySQL，重新进入即可。但是运行还是错了。。最后发现是使用在mybatis-config.xml中的url中设置了useSSL=true的问题。如果<strong>去掉或者选择useSSL=false</strong>，可以运行，但是连接就不安全了。</p><p>在url中还可以加上设置时区的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverTimezone&#x3D;GMT%2B8</span><br></pre></td></tr></table></figure><p>这样运行就可以了</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607225544069.png" alt="image-20210607225544069"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天把Maven大概学习完了，知道了怎么创建项目、配置环境、打包项目和部署项目。接下来学习Mybatis。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Mybatis学习1" scheme="https://ggyggy666.github.io/tags/Mybatis%E5%AD%A6%E4%B9%A01/"/>
    
  </entry>
  
  <entry>
    <title>Maven配置</title>
    <link href="https://ggyggy666.github.io/2021/06/06/Maven%E9%85%8D%E7%BD%AE/"/>
    <id>https://ggyggy666.github.io/2021/06/06/Maven%E9%85%8D%E7%BD%AE/</id>
    <published>2021-06-06T07:08:31.000Z</published>
    <updated>2021-06-07T07:33:05.077Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于把信安大赛的事情搞完了，现在有时间就来学习一下ssm, 首先是Maven的配置。</p><a id="more"></a><h1 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h1><p>之前的JavaWeb学习需要用到某个jar包时，就得到网上去找，然后下载，再将其导入，非常麻烦。而Maven是一个存储有大量jar包的仓库，需要用到什么时，只需要在pom.xml配置文件中写明依赖的jar包，会自动联网下载，无需我们手动下载导入。对项目依赖包管理非常友好。而且，它的目录架构固定，可以用于eclipse或者IDEA，不需要转换。</p><h1 id="Maven环境配置"><a href="#Maven环境配置" class="headerlink" title="Maven环境配置"></a>Maven环境配置</h1><p>按照如下文章配置即可：<a href="https://www.yht7.com/news/133245" target="_blank" rel="noopener">https://www.yht7.com/news/133245</a></p><p>下载maven，解压，然后将目录下的bin目录路径复制，新建一个环境变量。再在conf目录下的settings.xml中修改本地仓库路径，换成阿里云的源。最后在IDEA中添加maven，找到maven所在的路径即可。</p><h1 id="手动创建maven项目"><a href="#手动创建maven项目" class="headerlink" title="手动创建maven项目"></a>手动创建maven项目</h1><p>首先需要知道maven项目的结构。</p><blockquote><p>新建一个项目Maven01后，该项目下有src目录和一个pom.xml文件；</p><p>src目录下有main和test目录；</p><p>这两个目录下都有java和resources目录；</p><p>java目录下可以是package的目录，比如是com目录，com目录下有ggy目录，ggy目录下是demo目录，demo目录下是Hello.java。因此这个java文件的开头需要导入package：<code>package com.ggy.demo;</code></p><p>resource目录下是一些资源文件。</p></blockquote><p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;Maven01&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;Maven01&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>开头是固定的。groupId和artifactId可都写项目名称，版本可以写1.0.0啥的。</p><p>Hello.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">packagecom.ggy.demo;</span><br><span class="line"></span><br><span class="line">publicclass Hello &#123;</span><br><span class="line">publicstaticvoid main(String[] args)&#123;</span><br><span class="line">System.out.println(&quot;Hello, Maven!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后，<strong>在项目的根目录下即Maven01目录下，打开cmd</strong></p><p>输入命令：<code>mvn compile</code>, 进行项目的编译，顺利的话会出现success。</p><p>之后输入命令：<code>mvn exec:java -Dexec.mainClass=&quot;com.ggy.demo.Hello&quot;</code></p><p>运行后即可看到输出了：Hello, Maven!</p><h1 id="Maven命令"><a href="#Maven命令" class="headerlink" title="Maven命令"></a>Maven命令</h1><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210606153900710.png" alt="image-20210606153900710"></p><p>使用mvn命令，都需要在项目的根目录（即pom.xml所在的目录）下打开cmd。</p><p>还支持一些参数</p><ul><li>-D：传入属性参数，例如：<code>mvn package -Dmaven.text.skip=true</code>, 打包时跳过单元测试。</li><li>-P：使用指定的Profile配置。项目开发一般有多个环境，对应开发(dev)、测试(qa)、预发布(pre)、正式发布(prod)。在pom.xml下的profiles标签中可配置。build标签中的filers中定义了变量配置文件的地址，其中的${env}就是profile中定义的id值。resources是定义哪些目录下的文件会被配置文件中定义的变量替换。<code>maven package -Pdev -Dmaven.test.skip=true</code>,  表示打包本地环境，并跳过单元测试。</li></ul><h1 id="IDEA配置Maven"><a href="#IDEA配置Maven" class="headerlink" title="IDEA配置Maven"></a>IDEA配置Maven</h1><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210606155446854.png" alt="image-20210606155446854"></p><p>File-&gt;other Settings-&gt;Settings for New Project打开后</p><p>在导航栏搜maven</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210606155658341.png" alt="image-20210606155658341"></p><p>如图操作</p><h1 id="Maven创建项目"><a href="#Maven创建项目" class="headerlink" title="Maven创建项目"></a>Maven创建项目</h1><h2 id="创建普通Java项目"><a href="#创建普通Java项目" class="headerlink" title="创建普通Java项目"></a>创建普通Java项目</h2><p>File-&gt;New-&gt;Project，在弹出的窗口中找到Maven。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210606160406988.png" alt="image-20210606160406988"></p><p>选定JDK版本，勾选”Createfrom archetype”, 然后在中间往下划，找到quickstart那一行，选中。下一步，输入项目名Maven02，下一步，完成即可。</p><p>打开后，会下载一堆依赖，注意左下角</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210606160635895.png" alt="image-20210606160635895"></p><p>点击箭头指的即可。下载完成后会出现BUILD SUCCESS。</p><p>接着进行项目的配置</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210606161125622.png" alt="image-20210606161125622"></p><p>compile表示编译命令。也可以改成package打包</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210606161233642.png" alt="image-20210606161233642"></p><p>确认后，按下启动按钮就是编译了。但是编译失败，出现一堆红线错误。这是因为仓库的地址错误了。因为我们已经改成了阿里云的源，所以需要增加阿里云的仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure><p>右边有一个maven框，可以拖出来，里面配置了很多maven命令。比如package会在target目录下生成项目的jar或者war包。</p><h2 id="创建web项目"><a href="#创建web项目" class="headerlink" title="创建web项目"></a>创建web项目</h2><p>跟上面差不多。不过选择的是webapp, 要将JDK改为1.8，不然会出很多错。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607112640685.png" alt="image-20210607112640685"></p><p>同样创建好后，配置服务器。</p><h3 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h3><p>因为是web项目，所以肯定需要服务器。可使用Jetty插件或者tomcat插件。在pom.xml中的build标签中加一个plugins标签。</p><p>1.Jetty插件</p><p>在plugins中增加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">           &lt;groupId&gt;org.eclipse.jetty&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;jetty-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;9.4.35.v20201120&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;configuration&gt;</span><br><span class="line">               &lt;scanIntervalSeconds&gt;10&lt;&#x2F;scanIntervalSeconds&gt;</span><br><span class="line">               &lt;webApp&gt;</span><br><span class="line">                   &lt;contextPath&gt;&#x2F;&lt;&#x2F;contextPath&gt;</span><br><span class="line">               &lt;&#x2F;webApp&gt;</span><br><span class="line">               &lt;httpConnector&gt;</span><br><span class="line">                   &lt;port&gt;8080&lt;&#x2F;port&gt;</span><br><span class="line">               &lt;&#x2F;httpConnector&gt;</span><br><span class="line">           &lt;&#x2F;configuration&gt;</span><br><span class="line">       &lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure><p>然后配置启动环境，即可看到HelloWorld。</p><h1 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h1><p>分为本地仓库和远程仓库。首先在本地仓库中查找，找不到就到远程仓库中下载。远程仓库有三种：中央仓库、私服和其它公共库。</p><h2 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h2><p>是maven提供的中央仓库，不过部署在国外，下得慢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. http:&#x2F;&#x2F;www.sonatype.org&#x2F;nexus&#x2F;</span><br><span class="line">2. http:&#x2F;&#x2F;mvnrepository.com&#x2F; （本人推荐仓库）</span><br><span class="line"></span><br><span class="line">3. http:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2</span><br></pre></td></tr></table></figure><h2 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h2><p>一些公司内部搭建的仓库，可以在本地仓库中上传jar包到私服中，供局域网内其他人使用。</p><h2 id="其它公共仓库"><a href="#其它公共仓库" class="headerlink" title="其它公共仓库"></a>其它公共仓库</h2><p>一般使用阿里云的源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;&#x2F;enabled&gt;</span><br><span class="line">            &lt;&#x2F;snapshots&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure><h1 id="Maven配置多模块"><a href="#Maven配置多模块" class="headerlink" title="Maven配置多模块"></a>Maven配置多模块</h1><p>按照MVC层来创建</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607113543287.png" alt="image-20210607113543287"></p><h2 id="创建多模块"><a href="#创建多模块" class="headerlink" title="创建多模块"></a>创建多模块</h2><p>首先创建一个项目</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607113655142.png" alt="image-20210607113655142"></p><p>啥都不用选，直接next</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607113732985.png" alt="image-20210607113732985"></p><p>名字就是parent了，然后直接Finish。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607113817519.png" alt="image-20210607113817519"></p><p>在该parent项目下new一个模块</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607113852790.png" alt="image-20210607113852790"></p><p>下一步后，填写Name即Maven_Dao，之后直接下一步完成。同理新建一个Maven_service模块。最后是Maven_controller模块，不同的是，选择的是webapp</p><p>之后编译器改成1.8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br></pre></td></tr></table></figure><p>然后将pluginManager中的内容都删除掉。其它模块也一样。</p><h2 id="创建模块间的依赖"><a href="#创建模块间的依赖" class="headerlink" title="创建模块间的依赖"></a>创建模块间的依赖</h2><p>controller调用service，service调用dao。从尾往后创建。</p><p>首先在dao模块中，新建一个dao包，然后创建一个userDao类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class userDao &#123;</span><br><span class="line">    public static void testDao()&#123;</span><br><span class="line">        System.out.println(&quot;userDao test...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在service模块中，新建一个service包，然后创建一个userService类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class userService &#123;</span><br><span class="line">    public static void testService()&#123;</span><br><span class="line">        System.out.println(&quot;userService test...&quot;);</span><br><span class="line">        userDao.testDao();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，注意调用userDao时，还需要在service模块的pom.xml中配置对dao模块的依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;Maven_Dao&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>同理，controller模块需要导入对service层的依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;Maven_service&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>controller模块是接受请求并处理转发的，因此需要引入servlet的api。找依赖需要到：<a href="https://mvnrepository.com/中搜索，然后复制最多人用的" target="_blank" rel="noopener">https://mvnrepository.com/中搜索，然后复制最多人用的</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;javax.servlet&#x2F;javax.servlet-api --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.1&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>之后在controller模块中创建servlet。注意，这个模块没有Java目录，因此需要手动创建。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607124722645.png" alt="image-20210607124722645"></p><p>然后创建包和类。这里包名默认是org.example了，刚开始创建项目时没改。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607124823051.png" alt="image-20210607124823051"></p><p>然后在函数前加一个注解，这样就不用到web.xml中配置servlet了。Ctrl+O增加service方法</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607125059442.png" alt="image-20210607125059442"></p><p>之后调用service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userService.testService();</span><br></pre></td></tr></table></figure><h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><p>需要到tomcat官网找到其maven plugin。如下,注意是加在controller模块的pom.xml中的build标签中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.tomcat.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;tomcat7-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                    &lt;path&gt;&#x2F;web&lt;&#x2F;path&gt; &lt;!--项目访问路径。当前配置的访问是localhost:9090&#x2F;, 如果配置是&#x2F;aa，则访问路径为localhost:9090&#x2F;aa --&gt;</span><br><span class="line">                    &lt;port&gt;8080&lt;&#x2F;port&gt;</span><br><span class="line">                    &lt;uriEncoding&gt;UTF-8&lt;&#x2F;uriEncoding&gt;&lt;!-- 非必需项 --&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br></pre></td></tr></table></figure><p>之后先把parent, dao, service和controller都install一遍</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607130131460.png" alt="image-20210607130131460"></p><p>然后配置tomcat启动，注意是controller模块。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607130217200.png" alt="image-20210607130217200"></p><p>完成配置后，从parent-&gt;dao-&gt;service-&gt;controller的顺序都install一遍。成功后，启动tomcat</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607131328040.png" alt="image-20210607131328040"></p><p>虽然有些红的信息，但是成功启动了。直接访问链接即可看到HelloWorld。然后访问controller路径即user：<a href="http://localhost:8080/web/user" target="_blank" rel="noopener">http://localhost:8080/web/user</a></p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607131443893.png" alt="image-20210607131443893"></p><p>成功！</p><h1 id="Maven打包项目"><a href="#Maven打包项目" class="headerlink" title="Maven打包项目"></a>Maven打包项目</h1><p>减少配置耗费，可以将项目打包成jar包或者war包，之后部署即可。</p><h2 id="新建package项目"><a href="#新建package项目" class="headerlink" title="新建package项目"></a>新建package项目</h2><p>创建maven项目，选择webapp, 然后可以更改包名。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607132229650.png" alt="image-20210607132229650"></p><p>之后默认创建，完成后，选择右下角的Enable xx, 将Pom.xml中的1.7改为1.8，删除掉pluginManagement的内容。</p><p>之后创建目录结构，因为没有Java目录和resource目录。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607132729977.png" alt="image-20210607132729977"></p><p>dev表示开发环境、test表示测试环境、product表示生产环境。不同的环境配置是不一样的。如dev中</p><p>db.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;root</span><br><span class="line">upasswd&#x3D;ggy</span><br></pre></td></tr></table></figure><p>bean.xml中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean&gt;</span><br><span class="line">    dev</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><h2 id="配置profile"><a href="#配置profile" class="headerlink" title="配置profile"></a>配置profile</h2><p>profile标签中可以选择使用哪一个环境。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;dev&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">                &lt;env&gt;dev&lt;&#x2F;env&gt;</span><br><span class="line">        &lt;&#x2F;properties&gt;</span><br><span class="line">        &lt;!--默认打包dev环境--&gt;</span><br><span class="line">        &lt;activation&gt;</span><br><span class="line">            &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;</span><br><span class="line">        &lt;&#x2F;activation&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;test&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;env&gt;test&lt;&#x2F;env&gt;</span><br><span class="line">        &lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">        &lt;id&gt;product&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;properties&gt;</span><br><span class="line">            &lt;env&gt;product&lt;&#x2F;env&gt;</span><br><span class="line">        &lt;&#x2F;properties&gt;</span><br><span class="line">    &lt;&#x2F;profile&gt;</span><br><span class="line">&lt;&#x2F;profiles&gt;</span><br></pre></td></tr></table></figure><h2 id="资源文件配置"><a href="#资源文件配置" class="headerlink" title="资源文件配置"></a>资源文件配置</h2><p>需要放在build中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">  &lt;resource&gt;</span><br><span class="line">      &lt;directory&gt;src&#x2F;main&#x2F;resources&#x2F;$&#123;env&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">  &lt;&#x2F;resource&gt;</span><br><span class="line">    &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">        &lt;includes&gt;</span><br><span class="line">            &lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;include&gt;**&#x2F;*.tld&lt;&#x2F;include&gt;</span><br><span class="line">        &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;filtering&gt;false&lt;&#x2F;filtering&gt;</span><br><span class="line">    &lt;&#x2F;resource&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>首先配置，可以先配置package，打包后生成一个target目录</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607143920477.png" alt="image-20210607143920477"></p><p>打开war包所在目录，然后将war包使用bandzip打开</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607144049253.png" alt="image-20210607144049253"></p><p>可以发现默认打包的确实是dev环境。然后要把这个bandzip程序关闭，不然后面就会出错！</p><p>指定打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clean compile package -Ptest -Dmaven.test.skip&#x3D;true</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607145005042.png" alt="image-20210607145005042"></p><p>-P指定打包test环境，-Dmaven.test.skip=true表示不打包测试的代码。</p><h1 id="Maven的war包部署"><a href="#Maven的war包部署" class="headerlink" title="Maven的war包部署"></a>Maven的war包部署</h1><p>部署在tomcat上。</p><p>将Maven_package.war包复制到tomcat目录的web apps目录下，然后在conf目录下的server.xml中，搜索&lt;Host, 找到后将一句话添加进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context path&#x3D;&quot;&#x2F;&quot; docBase&#x3D;&quot;Maven_package.war&quot; debug&#x3D;&quot;0&quot; previledge&#x3D;&quot;true&quot; reloadable&#x3D;&quot;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210607153002944.png" alt="image-20210607153002944"></p><p>保存后，运行tomcat/bin目录下的startup.bat，之后访问：<a href="http://localhost:8080/Maven_package/即可。" target="_blank" rel="noopener">http://localhost:8080/Maven_package/即可。</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天终于把信安大赛的事情搞完了，现在有时间就来学习一下ssm, 首先是Maven的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ssm学习" scheme="https://ggyggy666.github.io/categories/ssm%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Maven配置" scheme="https://ggyggy666.github.io/tags/Maven%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审计(1)</title>
    <link href="https://ggyggy666.github.io/2021/06/01/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-1/"/>
    <id>https://ggyggy666.github.io/2021/06/01/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-1/</id>
    <published>2021-06-01T02:24:18.000Z</published>
    <updated>2021-06-06T07:04:28.029Z</updated>
    
    <content type="html"><![CDATA[<p>学习了JavaWeb，了解到了一些常用的Java Web知识，今天开始入门Java代码审计。</p><a id="more"></a><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="Java内置对象"><a href="#Java内置对象" class="headerlink" title="Java内置对象"></a>Java内置对象</h2><p>request, response, pageContext, session, application, out, config, page, exception。</p><p>九大内置对象，无需声明直接使用。</p><h2 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h2><ul><li><p>getParameter(): 获取参数的值</p></li><li><p>getcookies(): 获取cookie</p></li><li><p>getQueryString(): 获取查询字符串</p></li><li><p>getheaders(): 获取头部</p></li><li><p>Runtime.exec(): 执行命令</p></li><li><p>logger.info(): 记录日志信息</p><p>危险功能点：</p></li><li><p>password: 密码相关功能</p></li><li><p>upload: 上传功能</p></li><li><p>download: 下载功能</p></li></ul><h1 id="fortify的使用"><a href="#fortify的使用" class="headerlink" title="fortify的使用"></a>fortify的使用</h1><p>安装好后，找到Audit Workbench, 打开后，选择要扫描的Java项目代码，然后等待一会分析时间，最后打开是：</p><p><img src="https://i.loli.net/2021/06/01/HLrscbYuZSPyRQJ.png" alt="image-20210601223742966"></p><p>左边上半部分是扫描出来存在漏洞的类型以及所在的文件位置。左下半部分是该漏洞形成涉及到的代码文件，从上到下一步步形成。中间部分就是代码文件显示了，中下部分有多个功能，details描述了该漏洞形成的可能情况，Recommendations描述了怎么防御该漏洞，Diagram则是漏洞形成的流程图，可以看到漏洞一步步的形成过程。右边是项目的包及其类。可以点击它来查看类的代码。</p><h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h1><p>首先查看web.xml中的配置。看一下Filter标签，看用了什么架构，session的超时机制配置了多长时间不活动session就会过期，还有有没有写自己的过滤器，如果没有，说明前端代码可以直接传到后端。</p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h1><p>点击左边上半部分扫描出来的漏洞所在代码文件，可以看到漏洞最终出现的位置，然后在左边下半部分中从下面一直往上，逆推查看漏洞的形成链，必要时，点击中间下半部分的Diagram看漏洞形成流程图，再加上点击右边的类文件查看代码，慢慢跟踪。最后再顺序下来理清漏洞形成过程。</p><h1 id="XSS漏洞审计"><a href="#XSS漏洞审计" class="headerlink" title="XSS漏洞审计"></a>XSS漏洞审计</h1><p>首先扫描出漏洞后，点击其中一个xss漏洞</p><p><img src="https://i.loli.net/2021/06/01/dV4m2bjo98IAWNZ.png" alt="image-20210601224716629"></p><p>可以看到，这里直接使用EL表达式将对象m的getName()函数返回值输出在JSP页面中。然后从下往上跟踪</p><p><img src="https://i.loli.net/2021/06/01/8NxGd9e21ZBIiOS.png" alt="image-20210601224951560"></p><p>发现m是遍历的msginfo列表中的一个对象，而msginfo又是从request域中键为msg的列表获得的。继续往上跟踪一下，看看这个msg键值对是怎么保存在request域中的。</p><p><img src="https://i.loli.net/2021/06/01/xv1DU7o6AMa8fPd.png" alt="image-20210601225301969"></p><p>跳到了ShowServlet.java文件中，可以看到是直接将一个msg列表存储到request域中的。而这个msg列表是调用了msginfo中的MessageInfoShowService函数。这个msginfo是MessageInfoServiceImpl的一个对象。也就是说，这个msg是MessageInfoServiceImpl类中的MessageInfoShowService函数返回的一个列表。继续往上跟踪这个MessageInfoServiceImpl类。</p><p><img src="https://i.loli.net/2021/06/01/KBUpFGPhf92Hbzn.png" alt="image-20210601225629118"></p><p>可以发现，这个返回的msg列表是调用的msginfo中的MessageInfoShowDao函数返回得到的，而这个msginfo又是MessageInfoDaoImpl这个类的对象。因此，这个msg实际上是MessageInfoDaoImpl这个类中的MessageInfoShowDao函数返回得到的。那么跟踪一下MessageInfoDaoImpl类。</p><p><img src="https://i.loli.net/2021/06/01/i1Ddse78lKo4RBr.png" alt="image-20210601225924524"></p><p>这里由于代码太长没显示完全，这个函数最后确实是返回了一个列表。<code>return messageinfo;</code>。那么看一下这个messageinfo是怎么创建的。</p><p><img src="https://i.loli.net/2021/06/01/7tBh82jiZpabVAT.png" alt="image-20210601230134081"></p><p>首先是连接数据库后，对查询message表中数据的SQL语句进行预编译，然后执行。创建一个messageinfo列表，然后rs-&gt;next为查询出来的数据，先通过new 一个MessageInfo对象，将查询出来的数据赋值初始化这个对象，然后将这个对象加入mesageinfo中。因此，messageinfo存储了多个MessageInfo对象，这些对象的初始化值都是直接从数据库中查询得到的。</p><p>因此可以理清一下思路：</p><ol><li>在MessageInfoDaoImpl这个类中的MessageInfoShowDao函数, 查询数据库中的message表的数据，然后用它们去实例化MessageInfo对象，再将这些对象存储进messageinfo中，并将这个列表返回。</li><li>MessageInfoServiceImpl中的MessageInfoShowService调用了第一步的函数，得到其返回值messageinfo列表，赋值给msg。</li><li>ShowServlet中的ShowMessage函数调用第2步中的函数得到其返回值msg列表，然后将这个msg列表存储进request域中。</li><li>JSP页面中直接获取request域中的msg列表，然后遍历该列表获得里面的每个对象，然后获取对象里面的getName函数将name值直接输出。</li></ol><p>因此，整个过程中，对xss都没有进行过滤。只要将恶意代码作为name值存进数据库中，那么在message.jsp页面就会将Name值即恶意代码直接输出，从而造成了XSS。</p><p>还有一个反射型xss</p><p><img src="https://i.loli.net/2021/06/01/lVTDqtWFg96HaQs.png" alt="image-20210601231322244"></p><p>直接获得输入进来的参数，然后直接输出。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了JavaWeb，了解到了一些常用的Java Web知识，今天开始入门Java代码审计。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java代码审计" scheme="https://ggyggy666.github.io/categories/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="Java代码审计(1)" scheme="https://ggyggy666.github.io/tags/Java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-1/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(9)</title>
    <link href="https://ggyggy666.github.io/2021/05/31/JavaWeb%E5%AD%A6%E4%B9%A0-9/"/>
    <id>https://ggyggy666.github.io/2021/05/31/JavaWeb%E5%AD%A6%E4%B9%A0-9/</id>
    <published>2021-05-31T07:16:14.000Z</published>
    <updated>2021-05-31T10:49:47.114Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习JavaWeb的JSON和AJAX。</p><a id="more"></a><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>JSON是客户端与服务器之间进行数据交换的一种格式。它使用的是大括号，然后里面是键值对，每个键值对之间使用,分割。</p><h2 id="在JavaSctipt中"><a href="#在JavaSctipt中" class="headerlink" title="在JavaSctipt中"></a>在JavaSctipt中</h2><p>首先新建一个新的模块Json_Ajax, 然后在web目录下新建一个json.html。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var JsonObj &#x3D; &#123;</span><br><span class="line">        &quot;key1&quot;:1,</span><br><span class="line">        &quot;key2&quot;:&quot;2&quot;,</span><br><span class="line">        &quot;key3&quot;:true,</span><br><span class="line">        &quot;key4&quot;:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],</span><br><span class="line">        &quot;key5&quot;:&#123;</span><br><span class="line">            &quot;key_1&quot;:11,</span><br><span class="line">            &quot;key_2&quot;:&quot;12&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;key6&quot;:[&#123;</span><br><span class="line">            &quot;key6_1&quot;:61,</span><br><span class="line">            &quot;key6_2&quot;:&quot;62&quot;</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            &quot;key6_3&quot;:63,</span><br><span class="line">            &quot;key6_4&quot;:&quot;64&quot;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>键都是字符串, 值可以是整数、字符串、数组、JSON对象，数组里面也可以是JSON对象。</p><p>访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JsonObj.key1;</span><br><span class="line">JsonObj.key4[0];</span><br><span class="line">JsonObj.key5.key_1;</span><br><span class="line">JsonObj.key6[0].key6_1;</span><br></pre></td></tr></table></figure><p>JSON类型是对象。所以可以用点来访问。</p><p><strong>JSON对象与字符串转化</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var JsonString &#x3D; JSON.stringify(JsonObj);</span><br><span class="line">    var Json &#x3D; JSON.parse(JsonString);</span><br><span class="line">    Json.key_1;</span><br></pre></td></tr></table></figure><p>JSON.stringify(对象)：将JSON对象转换成字符串。</p><p>JSON.parse(字符串)：将JSON字符串转成JSON对象。</p><h2 id="在Java中"><a href="#在Java中" class="headerlink" title="在Java中"></a>在Java中</h2><p>有三种转换。</p><h3 id="JavaBean和Json的转换"><a href="#JavaBean和Json的转换" class="headerlink" title="JavaBean和Json的转换"></a>JavaBean和Json的转换</h3><p>JavaBean其实就是一个类的实例。需要使用到gson-xxx.jar包。在工程目录下新建一个Lib库，将jar包加载进来。然后在src下新建package，新建一个Person类。</p><p>Person类里有id和name两个变量，然后生成构造函数、Getter and Setter, toString方法。</p><p>之后新建一个JsonTest类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class JsonTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test()&#123;</span><br><span class="line">        Person person &#x3D; new Person(1, &quot;ggy&quot;);</span><br><span class="line">        Gson gson &#x3D; new Gson();</span><br><span class="line">        String s &#x3D; gson.toJson(person);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        Person person1 &#x3D; gson.fromJson(s, Person.class);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意使用@Test, 会产生一个警告，然后将jUtil加载进来就行了。</p><p>首先需要生成Gson对象。</p><ul><li>gson.toJson(对象)，将对象转换成Json字符串。</li><li>gson.fromJson(Json字符串, 原来的类型)，注意是Person.class。将字符串转换成原来的对象类型。</li></ul><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;ggy&quot;&#125;</span><br><span class="line">Person&#123;id&#x3D;1, name&#x3D;&#39;ggy&#39;&#125;</span><br></pre></td></tr></table></figure><h3 id="List和Json的转换"><a href="#List和Json的转换" class="headerlink" title="List和Json的转换"></a>List和Json的转换</h3><p>将List类型转换成Json字符串与上面的一致，但是从Json字符串转成List类型，而且List里面的值是Person类型就不一样了。</p><p>首先新建一个test1函数，创建一个List集合，里面值类型是Person对象，然后使用add函数，将实例化后的Person添加进来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void test1()&#123;</span><br><span class="line">      List&lt;Person&gt; list &#x3D; new ArrayList&lt;Person&gt;();</span><br><span class="line">      list.add(new Person(1,&quot;ggy&quot;));</span><br><span class="line">      list.add(new Person(2, &quot;ggg&quot;));</span><br><span class="line"></span><br><span class="line">      Gson gson &#x3D; new Gson();</span><br><span class="line">      String s &#x3D; gson.toJson(list);</span><br><span class="line">      System.out.println(s);</span><br><span class="line"></span><br><span class="line">      List&lt;Person&gt; o &#x3D; gson.fromJson(s, new PersonList().getType());</span><br><span class="line">      System.out.println(o);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>之后新建一个Gson对象，使用toJson将list转换成Json字符串。但是反过来时，首先需要新建一个类Person List</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class PersonList extends TypeToken&lt;List&lt;Person&gt;&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它只需要继承TypeToken即可，&lt;&gt;里面是list的类型。大括号里面不用写任何东西。TypeToken是Gson.jar包提供的。</p><p>之后直接使用fromJson</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Person&gt; o &#x3D; gson.fromJson(s, new PersonList().getType());</span><br></pre></td></tr></table></figure><p>类型的话，就需要先new那个PersonList类，然后调用getType方法即可。</p><h3 id="Map和JSON的转换"><a href="#Map和JSON的转换" class="headerlink" title="Map和JSON的转换"></a>Map和JSON的转换</h3><p>跟List差不多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void test2()&#123;</span><br><span class="line">       Map&lt;Integer, Person&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">       map.put(1, new Person(1, &quot;ggy&quot;));</span><br><span class="line">       map.put(2, new Person(2, &quot;ggg&quot;));</span><br><span class="line"></span><br><span class="line">       Gson gson &#x3D; new Gson();</span><br><span class="line">       String s &#x3D; gson.toJson(map);</span><br><span class="line">       System.out.println(s);</span><br><span class="line"></span><br><span class="line">       Map&lt;Integer, Person&gt; o &#x3D; gson.fromJson(s, new PersonMap().getType());</span><br><span class="line">       System.out.println(o.get(1));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>每次要将JSON转成List或者Map时，都要新建一个类去继承TypeToken, 因此可以使用匿名类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Person&gt; o &#x3D; gson.fromJson(s, new TypeToken&lt;Map&lt;Integer, Person&gt;&gt;()&#123;&#125;.getType());</span><br></pre></td></tr></table></figure><p>直接newTypeToken，(){}必不可少。</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>Ajax，浏览器通过js异步发起请求，局部动态更新页面。</p><h2 id="原生JS使用"><a href="#原生JS使用" class="headerlink" title="原生JS使用"></a>原生JS使用</h2><p>首先新建一个html文件。有一个按钮和一个div标签，点击按钮就调用ajax函数，发起一个ajax请求，然后将获得的返回数据输出到div标签中。</p><p><img src="https://i.loli.net/2021/05/31/WoZeaxiPYwfF6br.png" alt="image-20210531173450553"></p><p>因为客户端与服务器交换的数据类型是JSON的，因此接收到之后，使用JSON.parse将其变为JSON对象，然后访问里面的键即可。</p><p>服务器端，新建一个AjaxServlet</p><p><img src="https://i.loli.net/2021/05/31/ecsD8MQEPqFO2Lg.png" alt="image-20210531173701032"></p><p>自己创建一个JSON字符串，然后返回。本来是想用创建一个Person对象，然后使用Gson将其转换成JSON字符串的，但是不知为什么没有办法将转换之后的JSON字符串输出来。。。</p><h2 id="JQuery使用"><a href="#JQuery使用" class="headerlink" title="JQuery使用"></a>JQuery使用</h2><p>1.$.ajax 方法</p><ul><li>url: 请求的地址</li><li>type:  请求的类型，GET、POST</li><li>data:  发送的数据，可以有两种格式：name=value&amp;name=value, 或者：{key：value}</li><li>success: 请求成功，响应的回调函数。</li><li>dataType:  响应的数据类型：text, 纯文本；xml，xml数据；json，json对象。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">url: xxx,</span><br><span class="line">type: GET,</span><br><span class="line">data: name&#x3D;value,</span><br><span class="line">success: function(data)&#123;&#x2F;&#x2F;函数必须有个参数，表示返回来的东西。</span><br><span class="line">alert(data);</span><br><span class="line">&#125;,</span><br><span class="line">dataType: json,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.$.get方法和$.post方法</p><p>有四个参数，url, data, success, dataType。已经封装好了，直接传值即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.get(url, data, success, type);</span><br><span class="line">$.get(&quot;http:&#x2F;&#x2F;xxx&quot;, &quot;name&#x3D;value&quot;, &quot;function(data)&#123;alert(data);&#125;&quot;, &quot;text&quot;);</span><br></pre></td></tr></table></figure><p>post也一样。</p><p>3.getJSON方法</p><p>get请求，返回JSON对象，因此只有三个参数了。url, data, success。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(url, data, success);</span><br><span class="line">$.getJSON(&quot;http:&#x2F;&#x2F;xxx&quot;, &quot;name&#x3D;value&quot;, &quot;function(data)&#123;alert(data);&#125;&quot;)</span><br></pre></td></tr></table></figure><p>3.serialize方法</p><p>上面的data传的都是自己写固定的值，如果需要获取表单中的所有提交的键值对并拼接成name=value&amp;name2=value2，就需要使用serialize方法。</p><p>表单的id为form1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data &#x3D; $&#123;&quot;#form1&quot;&#125;.serialize()即可得到。</span><br><span class="line">$.getJSON(&quot;http:&#x2F;&#x2F;xxx&quot;, &quot;name&#x3D;value&amp;&quot;+data, &quot;function()&#123;&#125;&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习JavaWeb的JSON和AJAX。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(8)</title>
    <link href="https://ggyggy666.github.io/2021/05/16/JavaWeb%E5%AD%A6%E4%B9%A0-8/"/>
    <id>https://ggyggy666.github.io/2021/05/16/JavaWeb%E5%AD%A6%E4%B9%A0-8/</id>
    <published>2021-05-16T02:55:31.000Z</published>
    <updated>2021-05-31T05:11:07.057Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习Cookie和Session和Filter过滤器。</p><a id="more"></a><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>Cookie是服务器发送给客户端保存的一组组键值对，客户端传输数据给服务端时都要带上cookie，用来标识客户端。cookie大小不能超过4KB。</p><h2 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h2><p>首先创建CreateCookie类，doGet方法中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String action &#x3D; req.getParameter(&quot;action&quot;);</span><br><span class="line">if (&quot;createCookie&quot;.equals(action))&#123;</span><br><span class="line">        Cookie cookie &#x3D; new Cookie(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">        resp.getWriter().write(&quot;Success!&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>注意，字符串判断相等使用equals函数，不要直接使用==，不然没办法判断相等。</p><p>然后创建一个Cookie.jsp，里面写上一个a标签跳转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;cookie?action&#x3D;createCookie&quot;&gt;创建Cookie&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>在web.xml里面配置CreateCookie类的路径是/cookie，重新部署，访问jsp。</p><h2 id="服务端获取Cookie"><a href="#服务端获取Cookie" class="headerlink" title="服务端获取Cookie"></a>服务端获取Cookie</h2><p>cookie保存在客户端，每次发送请求都会发送cookie。服务器获取cookie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">else if(&quot;getCookie&quot;.equals(action))&#123;</span><br><span class="line">            Cookie[] cookies &#x3D; req.getCookies();</span><br><span class="line">            for(Cookie cookie : cookies)&#123;</span><br><span class="line">                resp.getWriter().write(&quot;Key: &quot;+cookie.getName()+&quot;, value: &quot;+cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>只能通过req对象的getCookies方法获取Cookie数组，而不能获得某个Cookie的键值对。也不能通过某个Key获得相应的值。jsp页面中加一个a标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;cookie?action&#x3D;getCookie&quot;&gt;获取Cookie&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h2 id="修改Cookie"><a href="#修改Cookie" class="headerlink" title="修改Cookie"></a>修改Cookie</h2><p>修改Cookie也很简单，只需要重新new 一个相同key的Cookie对象，值改为新值，然后添加进Cookie即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">else if(&quot;updateCookie&quot;.equals(action))&#123;</span><br><span class="line">            Cookie cookie &#x3D; new Cookie(&quot;key1&quot;, &quot;ggy&quot;);</span><br><span class="line">            resp.addCookie(cookie);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>然后jsp中增加a标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;cookie?action&#x3D;updateCookie&quot;&gt;修改Cookie&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>访问jsp页面，点击即可。</p><h2 id="Cookie存活时间"><a href="#Cookie存活时间" class="headerlink" title="Cookie存活时间"></a>Cookie存活时间</h2><p>先获取cookie对象，然后使用setMaxAge方法设置存活时间。</p><ul><li>正数：表示Cookie在多少秒后销毁。</li><li>-1：表示浏览器关闭就销毁，因此显示是session。</li><li>0：表示马上销毁</li></ul><p>默认是-1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie &#x3D; new Cookie(&quot;key1&quot;, &quot;ggy&quot;);</span><br><span class="line">            cookie.setMaxAge(-1);</span><br><span class="line">            resp.addCookie(cookie);</span><br></pre></td></tr></table></figure><h2 id="Cookie的path属性"><a href="#Cookie的path属性" class="headerlink" title="Cookie的path属性"></a>Cookie的path属性</h2><p>可以过滤哪些cookie可以发送给服务器</p><p><img src="/2021/05/16/JavaWeb%E5%AD%A6%E4%B9%A0-8/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210516214719722.png" alt="image-20210516214719722"></p><p>要符合path路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie &#x3D; new Cookie(&quot;key1&quot;, &quot;ggy&quot;);</span><br><span class="line">cookie.setPath(req.getContextPath()+&quot;&#x2F;abc&quot;);</span><br><span class="line">resp.addCookie(cookie);</span><br></pre></td></tr></table></figure><p>req.getContextPath()可以获得当前工程路径，后面加了个/abc, 说明Cookie必须在访问<code>/工程路径/abc</code>下的页面时才会发送。</p><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>Session保存在服务器，用来保存客户端的状态，一个客户端一个Session。</p><h2 id="创建和获取Session"><a href="#创建和获取Session" class="headerlink" title="创建和获取Session"></a>创建和获取Session</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HttpSession session &#x3D; req.getSession();</span><br><span class="line">boolean aNew &#x3D; session.isNew();</span><br><span class="line">if(aNew)&#123;</span><br><span class="line">System.out.println(&quot;Session is New&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String id &#x3D; session.getId();</span><br><span class="line">System.out.println(id);</span><br></pre></td></tr></table></figure><p>首先创建Session对象。创建和获取都是使用getSession()函数，那怎么判断它是创建还是获取呢？使用session.isNew()，返回true就代表创建，false代表获取。然后使用session.getId()可以获取sessionID。</p><h2 id="往Session域存取数据"><a href="#往Session域存取数据" class="headerlink" title="往Session域存取数据"></a>往Session域存取数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req.getSession().setAttribute(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class="line">req.getSession().getAttribute(&quot;key1&quot;);</span><br></pre></td></tr></table></figure><h2 id="Session存活时间"><a href="#Session存活时间" class="headerlink" title="Session存活时间"></a>Session存活时间</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getSession().getMaxInactiveInterval();</span><br></pre></td></tr></table></figure><p>获取存活时间间隔，没有设置的话就是获取默认的存活时间是30分钟。然后在web.xml中可以全局配置默认的存活时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">        &lt;session-timeout&gt;20&lt;&#x2F;session-timeout&gt;</span><br><span class="line">&lt;&#x2F;session-config&gt;</span><br></pre></td></tr></table></figure><p>存活时间是20分钟。注意这个存活时间是两次请求的间隔时间。</p><p>设置时间间隔（秒）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getSession().setMaxInactiveInterval(3);</span><br></pre></td></tr></table></figure><p>存活时间是3秒。如果是负数，则永不超时。</p><p>设置立即无效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.getSession().invalidate();</span><br></pre></td></tr></table></figure><h1 id="Cookie与Session的组合"><a href="#Cookie与Session的组合" class="headerlink" title="Cookie与Session的组合"></a>Cookie与Session的组合</h1><p>首先，浏览器第一次请求服务器，这时候没有session和cookie。然后服务器创建一个session对象，同时生成相应的sessionID，然后将这个sessionID作为值与JSESESSIONID组合成键值对，保存到cookie中。服务器将cookie发送回客户端。之后的请求客户端都会发送cookie，服务器接收到后，解析cookie获得sessionID值，然后找到服务器中保存的sessionID对应的session对象，之后处理。</p><h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><p>用于过滤请求，进行权限管理。</p><p>新建一个Filter工程，然后在web目录下新建一个admin目录，在该目录下新建admin.jsp, 部署访问：<a href="http://localhost:8080/Filter/admin/admin.jsp。此时可以访问。" target="_blank" rel="noopener">http://localhost:8080/Filter/admin/admin.jsp。此时可以访问。</a></p><p>但是admin目录下，我们必须要让admin登陆之后才能访问这个页面，就需要配置Filter过滤器了。</p><p>Filter过滤器会拦截请求，根据doFilter函数中的代码进行权限校验。</p><h2 id="Filter过滤器-1"><a href="#Filter过滤器-1" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p>首先在src目录下新建一个包，然后新建一个AdminFilter类。</p><p><img src="https://i.loli.net/2021/05/31/SN4TIzdOEoGgcDP.png" alt="image-20210531105735121"></p><p>该类实现Filter类，注意，Filter类在很多包里面都有，因此需要选择java.servlet的。然后在dofilter函数中编写校验代码。</p><p>首先拦截http请求，为了获取session域中的数据，需要先将servletRequest强制转换成HttpServletRequest，然后调用getSession获取session对象，再获取username的值。类型是Object哦。之后判断如果user为空，说明没有登陆，就将请求转发到login.jsp登陆界面。否则，说明登陆了，就使用filterChain.doFilter放行请求，继续访问原来要访问的资源。如果没有这句话，请求就会被丢弃，访问是一片空白。</p><p>当然需要在web.xml中配置</p><p><img src="https://i.loli.net/2021/05/31/uQxTcF1W6CS7Ptb.png" alt="image-20210531110227479"></p><p>该Filter过滤器只过滤要访问admin目录下所有资源的请求。之后部署访问即可，发现跳转到了登陆界面。</p><h2 id="加上用户登陆"><a href="#加上用户登陆" class="headerlink" title="加上用户登陆"></a>加上用户登陆</h2><p>新建一个Sevlet包，新建一个LoginServlet类。</p><p><img src="https://i.loli.net/2021/05/31/It5BuwDZnE8GUeV.png" alt="image-20210531112152890"></p><p>然后配置web.xml</p><p><img src="https://i.loli.net/2021/05/31/eRXnsyCvHdN5oMq.png" alt="image-20210531111556509"></p><p>之后login.jsp写一个表单</p><p><img src="https://i.loli.net/2021/05/31/LXCGx15tzDHrhac.png" alt="image-20210531112217710"></p><p>action中写工程名和servlet路径。</p><p>因此，流程如下：login.jsp输入账户密码后，登陆，请求先提交给login即LoginServlet类，检查账户密码是否正确，如果正确，那么获取session对象，设置用户数据。之后访问admin下的admin.jsp时，请求会被Filter过滤器拦截，判断出session域下的用户名存在，说明登陆成功了，那么放行请求，即可访问到admin.jsp。</p><h2 id="Filter的生命周期"><a href="#Filter的生命周期" class="headerlink" title="Filter的生命周期"></a>Filter的生命周期</h2><p>1.构造函数，当启动web工程时就执行。</p><p>2.init初始化，当启动web工程时就执行。</p><p>3.doFilter方法，每次拦截到请求，就执行。</p><p>4.destroy方法，当停止web工程时就执行。</p><h2 id="FilterConfig类"><a href="#FilterConfig类" class="headerlink" title="FilterConfig类"></a>FilterConfig类</h2><p>在Filter过滤器的类中的init函数</p><p><img src="https://i.loli.net/2021/05/31/IqLEsN9r6bSxoZV.png" alt="image-20210531113449468"></p><p>FilterConfig有三个功能，获取Filter的名称，获取Filter的配置参数，获取servletContext上下文对象。</p><p>然后在web.xml中配置init-param</p><p><img src="https://i.loli.net/2021/05/31/aLVfESPd18cIKFA.png" alt="image-20210531113611187"></p><p>需要放在filter中。之后重新部署即可。</p><h2 id="filterChain类"><a href="#filterChain类" class="headerlink" title="filterChain类"></a>filterChain类</h2><p>过滤器链，对同一个url资源可以配置多个过滤器，它们的工作流程如下：</p><p><img src="https://i.loli.net/2021/05/31/GOEKvPhuS8ad92z.png" alt="image-20210531130141537"></p><p>其实就是一个过滤器拦截请求后，使用filterChain放行后，下一个过滤器又拦截了。</p><h2 id="Filter拦截路径"><a href="#Filter拦截路径" class="headerlink" title="Filter拦截路径"></a>Filter拦截路径</h2><ul><li>精确匹配：<code>&lt;url-pattern&gt;/admin.jsp&lt;/url-pattern&gt;</code>, 匹配到的是工程路径下的admin.jsp。</li><li>目录匹配：<code>&lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;</code>, 匹配到的是当前工程路径下的admin目录下的所有文件。</li><li>后缀匹配：<code>&lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;</code>, 注意不能有/, 匹配到的是当前工程路径下的以jsp结尾的文件。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习Cookie和Session和Filter过滤器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(7)</title>
    <link href="https://ggyggy666.github.io/2021/05/15/JavaWeb%E5%AD%A6%E4%B9%A0-7/"/>
    <id>https://ggyggy666.github.io/2021/05/15/JavaWeb%E5%AD%A6%E4%B9%A0-7/</id>
    <published>2021-05-15T13:09:44.000Z</published>
    <updated>2021-05-15T15:37:46.943Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习文件上传和下载。</p><a id="more"></a><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>文件上传，需要前后端操作处理。前端上传，后端处理数据。</p><h2 id="前端上传"><a href="#前端上传" class="headerlink" title="前端上传"></a>前端上传</h2><p>写上传代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#x2F;upload&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot;&gt;&lt;br&gt;</span><br><span class="line">    头像：&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;photo&quot;&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>enctype类型是multipart/form-data, 代表文件是多段上传，而且上传的是二进制流数据。</p><h2 id="后端处理"><a href="#后端处理" class="headerlink" title="后端处理"></a>后端处理</h2><p>首先得看一下文件上传时的请求包</p><p><img src="/2021/05/15/JavaWeb%E5%AD%A6%E4%B9%A0-7/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210515212918146.png" alt="image-20210515212918146"></p><p>使用boundary作为分割，将每一个input表单项分开。上传的文件数据是二进制流格式，因此需要使用读取输入流的方式。</p><p>写后端处理程序UploadServlet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;doPost方法：</span><br><span class="line">ServletInputStream inputStream &#x3D; req.getInputStream();</span><br><span class="line">byte[] buffer &#x3D; new byte[1024000];</span><br><span class="line">int read &#x3D; inputStream.read(buffer);</span><br><span class="line">System.out.println(new String(buffer, 0, read));</span><br></pre></td></tr></table></figure><p>首先获取输入流数据，然后定义一个字节数组，大小是1024000，大点能装得下数据就行。然后使用输入流的read方法，将输入流保存到buffer里面，并且返回输入流的长度给read。最后输出，需要实例化String对象，传buffer进去，将0到read长度（即所有流数据）变成字符串输出。</p><p>当然，还需要给Servlet程序配置web.xml，并且前端代码的action修改成Servlet的路径<code>http://localhost:8080/EL_JSTL/upload</code>, 这是绝对路径，如果是相对路径，因为在web目录，可使用：upload。注意不要用/upload, 不然会默认是根目录下的。然后重新部署。</p><p><img src="/2021/05/15/JavaWeb%E5%AD%A6%E4%B9%A0-7/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210515214105875.png" alt="image-20210515214105875"></p><p>获取到了上传的数据。</p><h2 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h2><p>需要使用commons-fileupload.jar包，到apache下。然后导入。</p><p>还需要commons-io.jar, 因为输入输出流需要IO操作。</p><p>用到的类是：ServletFileUpload类，它涉及以下方法：</p><ul><li>ServletFileUpload.isMultipartContent(HttpServletRequest request), 判断上传的数据是不是多段数据，返回true或false。</li><li>ServletFileUpload.parseRequest(HttpServletReqeust request), 解析上传的数据，提取出每一个表单项，装到List集合。</li><li>isFormField(), 判断当前表单项是否是普通表单项，是则表示普通表单项，否则是上传文件项。</li><li>getFieldName(), 获得表单项中的name属性值。</li><li>getString(), 获得当前表单项的值。</li><li>getName(), 获得上传的文件名。</li><li>write(file), 将上传的文件写到file所指的磁盘路径文件。</li></ul><p>doPost函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if(ServletFileUpload.isMultipartContent(req))&#123;</span><br><span class="line">           &#x2F;&#x2F;创建FileItemFactory工厂实现类</span><br><span class="line">           DiskFileItemFactory diskFileItemFactory &#x3D; new DiskFileItemFactory();</span><br><span class="line">           &#x2F;&#x2F;创建用于解析上传数据的工具栏ServletFileUpload</span><br><span class="line">           ServletFileUpload servletFileUpload &#x3D; new ServletFileUpload(diskFileItemFactory);</span><br><span class="line">           try &#123;</span><br><span class="line">               List&lt;FileItem&gt; list &#x3D; servletFileUpload.parseRequest(req);</span><br><span class="line">               for(FileItem item : list)&#123;</span><br><span class="line">                   if(item.isFormField())&#123;</span><br><span class="line">                       &#x2F;&#x2F;普通表单项</span><br><span class="line">                       System.out.println(&quot;表单项的name属性值：&quot;+item.getFieldName());</span><br><span class="line">                       System.out.println(&quot;表单项的值：&quot;+item.getString(&quot;UTF-8&quot;));</span><br><span class="line">                   &#125;else&#123;</span><br><span class="line">                       System.out.println(&quot;上传的文件名：&quot;+item.getName());</span><br><span class="line">                       System.out.println(&quot;表单项的name属性值：&quot;+item.getFieldName());</span><br><span class="line">                       item.write(new File(&quot;D:\\&quot;+item.getName()));</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; catch (FileUploadException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; catch (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>D盘下就可以看到上传的文件了。</p><h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><p>创建DownloadServlet类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取要下载的文件名</span><br><span class="line">        String fileName &#x3D; &quot;burp.png&quot;;</span><br><span class="line">        &#x2F;&#x2F;获取要下载的文件名的类型</span><br><span class="line">        ServletContext servletContext &#x3D; getServletContext();</span><br><span class="line">        String mimeType &#x3D; servletContext.getMimeType(&quot;file&#x2F;&quot;+fileName);</span><br><span class="line">        System.out.println(&quot;要下载的文件类型：&quot;+mimeType);</span><br><span class="line">        &#x2F;&#x2F;设置返回的数据类型</span><br><span class="line">        resp.setContentType(mimeType);</span><br><span class="line">        &#x2F;&#x2F;设置返回头，告诉客户端是下载文件,attachment表示附件</span><br><span class="line">        resp.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot;+fileName);</span><br><span class="line">        &#x2F;&#x2F;获取文件流</span><br><span class="line">        InputStream resourceAsStream &#x3D; servletContext.getResourceAsStream(&quot;file&#x2F;&quot; + fileName);</span><br><span class="line">        &#x2F;&#x2F;获取响应的输出流</span><br><span class="line">        OutputStream outputStream &#x3D; resp.getOutputStream();</span><br><span class="line">        &#x2F;&#x2F;将文件流复制到输出流输出</span><br><span class="line">        IOUtils.copy(resourceAsStream, outputStream);</span><br></pre></td></tr></table></figure><p>这里是在web目录下新建了一个file目录，里面是burp.png图片。之后部署web.xml，访问路径是/download, 然后重新部署。访问即可下载。</p><h2 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h2><p>setHeader里面，文件名可以是自定义的。但如果是中文名，需要使用URL编码，针对谷歌浏览器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot;+ URLEncoder.encode(&quot;中国.png&quot;, &quot;UTF-8&quot;));</span><br></pre></td></tr></table></figure><p>使用URLEncoder.encode即可。</p><h2 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h2><p>如果是火狐浏览器，对于中文名称的文件使用的是Base64编码。下面先测试使用base64：</p><p>加密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String content &#x3D; &quot;这是base64要编码的中文内容&quot;;</span><br><span class="line">&#x2F;&#x2F;new一个base64编码对象</span><br><span class="line">Base64.Encoder encoder &#x3D; Base64.getEncoder();</span><br><span class="line">&#x2F;&#x2F;将content内容使用getBytes转换成字节流，然后再encode，返回也是字节数组</span><br><span class="line">byte[] encodecontent &#x3D; encoder.encode(content.getBytes(&quot;UTF-8&quot;));</span><br><span class="line">&#x2F;&#x2F;需要将字节流转换成字符串输出</span><br><span class="line">System.out.println(new String(encodecontent));</span><br></pre></td></tr></table></figure><p>解密</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取解密对象</span><br><span class="line">Base64.Decoder decoder &#x3D; Base64.getDecoder();</span><br><span class="line">&#x2F;&#x2F;将加密后的字节流解密，返回也是字节数组</span><br><span class="line">byte[] decode &#x3D; decoder.decode(encodecontent);</span><br><span class="line">&#x2F;&#x2F;将字节数组转换成字符串输出</span><br><span class="line">System.out.println(new String(decode, &quot;UTF-8&quot;));</span><br></pre></td></tr></table></figure><p>但是到Servlet程序中进行文件下载时，setHeader的文件名进行base64编码需要有一个特定的格式：</p><p><code>?charset?B?xxx?=</code></p><p>charset表示编码类型，B表示是Base64编码，xxx是Base64加密后的内容，=是结束。因此有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">resp.setHeader(&quot;Content-Disposition&quot;,</span><br><span class="line">                &quot;attachment; filename&#x3D;?UTF-8?B?&quot;+Base64.getEncoder().encode(&quot;中国.png&quot;.getBytes(&quot;UTF-8&quot;))+&quot;?&#x3D;&quot;);</span><br></pre></td></tr></table></figure><h2 id="User-Agent判断"><a href="#User-Agent判断" class="headerlink" title="User-Agent判断"></a>User-Agent判断</h2><p>但是用了火狐设置的方法，IE又不支持了。。因此需要根据User-Agent来判断浏览器，从而判断应该使用哪种方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(req.getHeader(&quot;User-Agent&quot;).contains(&quot;FireFox&quot;))&#123;</span><br><span class="line">            resp.setHeader(&quot;Content-Disposition&quot;,</span><br><span class="line">                    &quot;attachment; filename&#x3D;?UTF-8?B?&quot;+Base64.getEncoder().encode(&quot;中国.png&quot;.getBytes(&quot;UTF-8&quot;))+&quot;?&#x3D;&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            resp.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename&#x3D;&quot;+ URLEncoder.encode(&quot;中国.png&quot;, &quot;UTF-8&quot;));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="MVC概念"><a href="#MVC概念" class="headerlink" title="MVC概念"></a>MVC概念</h1><p>主要是将Web层分开工作，更好的解耦合。</p><p><img src="/2021/05/15/JavaWeb%E5%AD%A6%E4%B9%A0-7/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210515233352946.png" alt="image-20210515233352946"></p><p>M是module, 表示模型，V是View，表示视图，C是Controller，表示控制器。</p><ul><li>Module：将与业务相关的数据封装成JavaBean类，但是不处理数据。有：JavaBean/domain/entity/pojo。</li><li>View：只负责展示界面和输出数据。有：JSP/HTML</li><li>Controller：只负责接收请求，然后调用业务层的代码处理请求，获取数据，然后派发界面，跳转到某个界面。有：Servlet。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习文件上传和下载。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(6)</title>
    <link href="https://ggyggy666.github.io/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/"/>
    <id>https://ggyggy666.github.io/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/</id>
    <published>2021-05-14T02:23:36.000Z</published>
    <updated>2021-05-15T13:10:30.750Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习EL表达式和JSTL标签库。</p><a id="more"></a><h1 id="EL表达式使用"><a href="#EL表达式使用" class="headerlink" title="EL表达式使用"></a>EL表达式使用</h1><p><strong>EL表达式：${key}</strong></p><p>创建一个新的工程，在index.jsp页面写</p><p><img src="https://i.loli.net/2021/05/14/lu9D4WqtZorbf52.png" alt="image-20210514102530819"></p><p>首先先在request中保存数据，然后按两种表达式方法输出。</p><p><img src="/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210514102435242.png" alt="image-20210514102435242"></p><p>都成功输出来了。但是如果key不存在，比如改成获取key1的值</p><p><img src="https://i.loli.net/2021/05/14/edVgEQyWCK1M6Nq.png" alt="image-20210514102700828"></p><p>表达式脚本会输出null, EL表达式直接为空。因此EL表达式输出更加精确。</p><h1 id="四个域对象输出顺序"><a href="#四个域对象输出顺序" class="headerlink" title="四个域对象输出顺序"></a>四个域对象输出顺序</h1><p><strong>如果它们域中保存的key名称都相同，按照域对象从小到大的顺序输出</strong></p><p><img src="https://i.loli.net/2021/05/14/fzMl9DFN6xWkw4H.png" alt="image-20210514103245806"></p><p>key值都是key,那么输出是：1</p><p>将pageContext那行注释掉，输出是：2</p><p>将request那行注释掉，输出是：3</p><p>将session那行注释掉后，还得重启浏览器清除掉session, 输出是：4</p><p>将application那行注释掉后，重启tomcat服务，没有输出了。</p><h1 id="输出Bean对象的属性"><a href="#输出Bean对象的属性" class="headerlink" title="输出Bean对象的属性"></a>输出Bean对象的属性</h1><p>有普通属性、数组、List和Map属性</p><p>首先定义一个Person类</p><p><img src="https://i.loli.net/2021/05/14/Csq7pHEbWZU6I2D.png" alt="image-20210514105107548"></p><p>定义了普通String类型，字符数组类型，List类型和Map类型。生成了有参和无参的构造函数，生成了Getter和Setter方法，最后生成了toString方法。</p><p>在b.jsp中，创建一个Person对象，然后调用Setxxx的方法将Person里的属性初始化。</p><p><img src="https://i.loli.net/2021/05/14/EnM6eDhIwdmNP2i.png" alt="image-20210514105334131"></p><p>初始化数组并作为参数：<code>new String[]{&quot;&quot;,&quot;&quot;}</code></p><p>定义List,里面值是String类型：</p><p><code>List&lt;String&gt; cities = new ArrayList&lt;String&gt;();</code></p><p>定义Map，key是String类型，value是Object类型：</p><p><code>Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</code></p><p>最后，将这个实例化后的对象保存在pageContext对象中。</p><ol><li>获取person对象：<code>${p}</code></li></ol><p><img src="https://i.loli.net/2021/05/14/M69riECOyVXTJYv.png" alt="image-20210514105824600"></p><p>全都输出来了。</p><ol start="2"><li><p>获取name: <code>${p.name}</code></p></li><li><p>获取数组：<code>${p.phone}</code></p><p>输出了：[Ljava.lang.String;@2af43773，显然不行。因为数组的值需要用下标访问。</p><p><code>${p.phone[0]}</code></p></li><li><p>获取List属性值：<code>${p.cities}</code></p><p>与数组不同，这样可以直接输出List里面所有值。如果想获取某个值：<code>${p.cities[0]}</code></p></li><li><p>获取map属性值：<code>${p.map}</code></p><p>同样可以直接将map里面的所有键值对输出。要获取某个键的值：<code>${p.map.key1}</code></p></li></ol><p>这里要注意一点，输出对象里面的属性值，这个值是根据那个对象的Get函数方法返回的，而不是直接访问那个属性。</p><p>比如在Person类里面定义多一个属性：<code>private int age = 18;</code></p><p>然后JSP里面使用：<code>${p.age}</code>是不行的。这个时候需要给age属性生成一个Get方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int getAge() &#123;</span><br><span class="line">    return age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候才会输出18来。而且就算没有定义age, 直接使用Get方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int getAge() &#123;</span><br><span class="line">    return 18;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新部署后，也能输出18。它是根据Getxxx方法，获取Get后面的字符，将其转换为小写作为属性输出。</p><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><p>EL表达式里面也可以进行各种运算。</p><p><strong>关系运算：</strong></p><p><img src="https://i.loli.net/2021/05/14/6IRd2JxGsrHEo5P.png" alt="image-20210514111443950"></p><p><strong>逻辑运算：</strong></p><p><img src="https://i.loli.net/2021/05/14/go8hNnwU1zYC23I.png" alt="image-20210514111503633"></p><p><strong>算术运算</strong></p><p><img src="https://i.loli.net/2021/05/14/Swzj4XM7lKVhARQ.png" alt="image-20210514111728149"></p><p>注意，除法得到的是浮点数，12.0</p><p><strong>empty运算</strong></p><p>${empty xxx}, 判断xxx是否为空</p><p><img src="https://i.loli.net/2021/05/14/cSxY3UHRVvBikGj.png" alt="image-20210514112203440"></p><p>比如：${empty emptyNull}, 返回true</p><p><strong>三元运算</strong></p><p><code>(12==12)?&quot;yes&quot;:&quot;no&quot;</code></p><p><strong>点运算和[]运算</strong></p><p>其实就是获取键值对的值。比如一个map对象，map.key就行。如果key本身包含运算符，就不能用.了。比如key是：a.a.a,或者b+b+b，不能用map.a.a.a这些，需要用[]。如：map[‘a.a.a’], map[‘b+b+b’], 需要用引号。</p><h1 id="EL表达式的11个隐含对象"><a href="#EL表达式的11个隐含对象" class="headerlink" title="EL表达式的11个隐含对象"></a>EL表达式的11个隐含对象</h1><p>它们都是EL表达式自己定义的，可以直接使用。</p><p><img src="https://i.loli.net/2021/05/14/7xXyzUgN8poMZ9Q.png" alt="image-20210514123710581"></p><p><img src="https://i.loli.net/2021/05/14/cmXhxHDdls4gfES.png" alt="image-20210514123725522"></p><h2 id="获取四个域的属性值"><a href="#获取四个域的属性值" class="headerlink" title="获取四个域的属性值"></a>获取四个域的属性值</h2><p>上面也提到过，四个域，当它们的键key一样时，输出会按照域的大小顺序来输出，而且只输出最小的那个。这样想获取其它域的key的值的时候就没有办法获取。于是，可以使用EL表达式的四个域获取。</p><p><img src="https://i.loli.net/2021/05/14/J9KPtoEYy8NVp7s.png" alt="image-20210514124137930"></p><p>这样四个数字都能输出来。</p><h2 id="pageContext的使用"><a href="#pageContext的使用" class="headerlink" title="pageContext的使用"></a>pageContext的使用</h2><p>这个pageContext可以获取其它九大对象，因此也可以使用相应的方法。比如request对象和session对象。</p><p><img src="https://i.loli.net/2021/05/14/BshWKjue1cqOHvM.png" alt="image-20210514125042396"></p><p>输出：</p><p><img src="https://i.loli.net/2021/05/14/kICxJs8tBOWjLpU.png" alt="image-20210514125101937"></p><p>但是这样比原来的表达式脚本还麻烦，因此需要一个技巧：</p><p><img src="https://i.loli.net/2021/05/14/G5SLyldnZv8wMWk.png" alt="image-20210514125249587"></p><p>先把request域存储起来，之后使用req就可以了。其它对象类似。</p><h2 id="其它对象"><a href="#其它对象" class="headerlink" title="其它对象"></a>其它对象</h2><h3 id="param"><a href="#param" class="headerlink" title="param"></a>param</h3><p>可以获取请求参数的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;param.username&#125;&lt;br&gt;</span><br><span class="line">$&#123;paramValues.hobby[0]&#125;&lt;br&gt;</span><br><span class="line">$&#123;paramValues.hobby[1]&#125;&lt;br&gt;</span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/EL_JSTL/d.jsp?username=ggy&amp;hobby=run&amp;hobby=sing" target="_blank" rel="noopener">http://localhost:8080/EL_JSTL/d.jsp?username=ggy&amp;hobby=run&amp;hobby=sing</a></p><p>页面输出：ggy run sing</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p><img src="https://i.loli.net/2021/05/14/6wzOnBxMq5FjKls.png" alt="image-20210514125958783"></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>因为cookie是键值对<code>xxx=xxx</code>, 所以它有name和value之分</p><p><img src="/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210514130205910.png" alt="image-20210514130205910"></p><h3 id="initParam"><a href="#initParam" class="headerlink" title="initParam"></a>initParam</h3><p>可以输出web.xml中配置的context-param值</p><p>web.xml中配置：</p><p><img src="/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210514130449476.png" alt="image-20210514130449476"></p><p>代码：</p><p><img src="/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210514130356972.png" alt="image-20210514130356972"></p><p>可以通过${initParam.参数名}获取参数值。</p><h1 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h1><p>JSP Standard Tag Library.</p><p><img src="/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210515121912297.png" alt="image-20210515121912297"></p><p>需要在JSP页面中使用taglib指令将标签库引进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot;%&gt;</span><br></pre></td></tr></table></figure><p>prefix是别名，之后就可以使用：<code>&lt;c:xx&gt;</code>作为标签使用。</p><p>当然，其它库的别名是：x, fmt, sql, fn</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先得下载两个jar包。taglibs-standard-spec-1.2.5， taglibs-standard-impl-1.2.5， 然后导入到工程模块中。</p><p>之后可以手动输入taglib, 或者可以输入：<code>&lt;c:forEach</code>, 就会出现提示，按tab就行。</p><h3 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h3><p>可以在域中存储数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set scope&#x3D;&quot;page&quot; var&#x3D;&quot;a&quot; value&#x3D;&quot;ggy&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>scope代表域，var就是key，value就是值。</p><ul><li>page: pageContext域</li><li>request: request域</li><li>session：session域</li><li>application：ServletContext域</li></ul><p>之后使用EL表达式读取域的数据即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set scope&#x3D;&quot;request&quot; var&#x3D;&quot;a&quot; value&#x3D;&quot;ggy&quot;&gt;&lt;&#x2F;c:set&gt;</span><br><span class="line">$&#123;requestScope.a&#125;</span><br></pre></td></tr></table></figure><h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>用来做判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:if test&#x3D;&quot;$&#123;12&#x3D;&#x3D;12&#125;&quot;&gt;</span><br><span class="line">    &lt;h1&gt;ggy666&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;c:if&gt;</span><br></pre></td></tr></table></figure><p>test的值应该是True或者False，而要得到这两个值，需要使用EL表达式进行条件判断。如果True，则执行标签里面的内容<code>&lt;h1&gt;</code>, 否则不会执行。</p><h3 id="choose标签"><a href="#choose标签" class="headerlink" title="choose标签"></a>choose标签</h3><p>choose, when, otherwise一起用的。相当于switch case default，进行多项选择。但是case某一个是真，后面如果没有break的话，之后都会执行。而when只执行那一个when标签里的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(&quot;ggy&quot;, &quot;ggy666&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test&#x3D;&quot;$&#123;requestScope.ggy&#x3D;&#x3D;&#39;ggy666&#39;&#125;&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Yes&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        &lt;h3&gt;Error!&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;&#x2F;c:otherwise&gt;</span><br><span class="line">&lt;&#x2F;c:choose&gt;</span><br></pre></td></tr></table></figure><p>有一个注意点，choose标签里面不能使用HTML注释，只能用JSP注释。when的父标签必须是choose标签。就是说，如果otherwise标签里面也有选择判断，需要使用when, 那么就必须先使用choose, 再加when</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:otherwise&gt;</span><br><span class="line">    &lt;c:choose&gt;</span><br><span class="line">        &lt;c:when test&#x3D;&quot;$&#123;requestScope.ggy!&#x3D;&#39;ggy666&#39;&#125;&quot;&gt;</span><br><span class="line">            &lt;h3&gt;No&lt;&#x2F;h3&gt;</span><br><span class="line">        &lt;&#x2F;c:when&gt;</span><br><span class="line">    &lt;&#x2F;c:choose&gt;</span><br><span class="line">&lt;&#x2F;c:otherwise&gt;</span><br></pre></td></tr></table></figure><h3 id="forEach标签"><a href="#forEach标签" class="headerlink" title="forEach标签"></a>forEach标签</h3><h4 id="循环遍历数字范围"><a href="#循环遍历数字范围" class="headerlink" title="循环遍历数字范围"></a>循环遍历数字范围</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c:forEach begin&#x3D;&quot;1&quot; end&#x3D;&quot;10&quot; var&#x3D;&quot;i&quot;&gt;</span><br><span class="line">    $&#123;i&#125;</span><br><span class="line">&lt;&#x2F;c:forEach&gt;</span><br></pre></td></tr></table></figure><p>输出1到10. begin是开始循环，end是结束循环，var是循环的变量。</p><h4 id="循环遍历数组"><a href="#循环遍历数组" class="headerlink" title="循环遍历数组"></a>循环遍历数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(&quot;arr&quot;, new String[]&#123;&quot;gg&quot;, &quot;ggy&quot;, &quot;ggy666&quot;&#125;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items&#x3D;&quot;$&#123;requestScope.arr&#125;&quot; var&#x3D;&quot;n&quot;&gt;</span><br><span class="line">    $&#123;n&#125;</span><br><span class="line">&lt;&#x2F;c:forEach&gt;</span><br></pre></td></tr></table></figure><p>首先保存一个数组到request域中，之后使用${requestScope.arr}定位到arr数组，并且赋值到items，表示要遍历的数组，var则是遍历的变量。</p><h4 id="循环遍历Map"><a href="#循环遍历Map" class="headerlink" title="循环遍历Map"></a>循环遍历Map</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Map&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">    map.put(&quot;key1&quot;, &quot;ggy666&quot;);</span><br><span class="line">    map.put(&quot;key2&quot;, &quot;root&quot;);</span><br><span class="line">    request.setAttribute(&quot;map&quot;, map);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items&#x3D;&quot;$&#123;requestScope.map&#125;&quot; var&#x3D;&quot;m&quot;&gt;</span><br><span class="line">    $&#123;m&#125;</span><br><span class="line">&lt;&#x2F;c:forEach&gt;</span><br></pre></td></tr></table></figure><p>同样先定义初始化map, 然后保存到request域中。之后遍历。不过因为是map，所以${m}输出的是键值对。如果只想输出key获取value，使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;m.key&#125;</span><br><span class="line">$&#123;m.value&#125;</span><br></pre></td></tr></table></figure><h4 id="循环遍历List集合中对象的属性"><a href="#循环遍历List集合中对象的属性" class="headerlink" title="循环遍历List集合中对象的属性"></a>循环遍历List集合中对象的属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    List&lt;Person&gt; personList &#x3D; new ArrayList&lt;Person&gt;();</span><br><span class="line">    for(int i&#x3D;0; i&lt;5; i++)&#123;</span><br><span class="line">        personList.add(new Person(&quot;name&quot;+i, &quot;134&quot;+i));</span><br><span class="line">    &#125;</span><br><span class="line">    request.setAttribute(&quot;per&quot;, personList);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items&#x3D;&quot;$&#123;requestScope.per&#125;&quot; var&#x3D;&quot;i&quot;&gt;</span><br><span class="line">    $&#123;i.name&#125;</span><br><span class="line">    $&#123;i.phone&#125;</span><br><span class="line">&lt;&#x2F;c:forEach&gt;</span><br></pre></td></tr></table></figure><p>创建一个Person类，然后创建List集合，实例化五个Person对象加入集合，然后将List装进request域。最后遍历，变量.属性即可。</p><h4 id="其它属性"><a href="#其它属性" class="headerlink" title="其它属性"></a>其它属性</h4><p>step表示遍历的步长值，比如i++, i+=2这样，2就是步长。</p><p>varStatus: 表示当前遍历的变量的状态。这个有很多用：</p><p><img src="/2021/05/14/JavaWeb%E5%AD%A6%E4%B9%A0-6/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210515131842849.png" alt="image-20210515131842849"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach varStatus&#x3D;&quot;status&quot; begin&#x3D;&quot;1&quot; end&#x3D;&quot;5&quot; step&#x3D;&quot;2&quot;&gt;</span><br><span class="line">    $&#123;status.begin&#125;</span><br><span class="line">    $&#123;status.step&#125;</span><br><span class="line">    $&#123;status.current&#125;</span><br><span class="line">&lt;&#x2F;c:forEach&gt;</span><br></pre></td></tr></table></figure><p>前面说过，EL表达式其实获取的是Getxxx函数（或者isxxx)返回的值，因此看status的方法，比如有getIndex(), 那么EL表达式中使用：<code>${status.index}</code>即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习EL表达式和JSTL标签库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(5)</title>
    <link href="https://ggyggy666.github.io/2021/05/11/JavaWeb%E5%AD%A6%E4%B9%A0-5/"/>
    <id>https://ggyggy666.github.io/2021/05/11/JavaWeb%E5%AD%A6%E4%B9%A0-5/</id>
    <published>2021-05-11T11:52:10.000Z</published>
    <updated>2021-05-13T09:09:23.434Z</updated>
    
    <content type="html"><![CDATA[<p>今天接着学习jsp的内容</p><a id="more"></a><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>JSP页面中可以有三种注释。</p><ul><li>HTML注释：<code>&lt;!-- xxx --&gt;</code>,会被JSP编译器翻译成out.write直接输出到客户端。</li><li>Java代码注释：单行<code>//</code>, 多行<code>/* xx */</code>。会被翻译到Java文件中作为注释，这是因为它需要放到<code>&lt;% xxx %&gt;</code>里面，作为代码部分。</li><li>JSP注释：<code>&lt;%-- xx --%&gt;</code>, 不会输出到客户端源码，也不会翻译到Java文件中它也可以注释掉JSP页面中所有代码。包括其它注释。</li></ul><p>另外注意：HTML注释中，JSP的表达式脚本可以运行。</p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210511200639080.png" alt="image-20210511200639080"></p><p><img src="https://raw.githubusercontent.com/ggyggy666/ggyggy666.github.io/master/img/image-20210511200833493.png" alt></p><p>嵌在HTML注释中的JSP表达式脚本被执行了返回ggy，然后作为HTML中的注释被输出。</p><h1 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h1><ul><li>request：请求对象。</li><li>response：响应对象。</li><li>pageContext: jsp的上下文对象。</li><li>session: 会话对象。</li><li>application：ServletContext对象。</li><li>config：ServletConfig对象。</li><li>out: jsp输出流对象。</li><li>page：指向当前jsp的对象。</li><li>exception: 异常对象。</li></ul><h1 id="四大域对象"><a href="#四大域对象" class="headerlink" title="四大域对象"></a>四大域对象</h1><ul><li>pageContext对象（pageContextimpl类）：有效范围是当前jsp页面。</li><li>request对象（HttpServletRequest类）：一次请求内有效</li><li>session对象（HttpSession类）：一个会话范围内有效。</li><li>application对象（ServletContext类）：整个web工程有效。</li></ul><p>域对象是指可以像Map一样存取数据。</p><p>首先创建一个scope.jsp</p><p><img src="https://i.loli.net/2021/05/11/6L7abYUI9p23jXB.png" alt="image-20210511202900212"></p><p>设置好域对象的数据，然后获取输出到页面，访问scope.jsp即可看到四个数据。接下来一个个测试它们的作用范围。</p><p>首先是pageContext对象，作用范围是当前JSP页面。</p><p>新建一个JSP页面scope2.JSP，其内容是获取四个域对象的数据。</p><p><img src="https://i.loli.net/2021/05/11/EWgmvArP8QF7DkC.png" alt="image-20210511203056738"></p><p>然后在scope.jsp中将请求转发到scope2.jsp。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%     request.getRequestDispatcher(&quot;&#x2F;scope2.jsp&quot;).forward(request, response);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这样，访问scope.jsp的时候会转发请求然后跳到scope2.jsp, scope2.jsp就无法获取到scope.jsp中设置的pageContext域对象数据。</p><p><img src="https://i.loli.net/2021/05/11/oDZKbVn17SOgRwv.png" alt="image-20210511203246438"></p><p>然后是直接访问scope2.jsp，会看到request域对象的数据也是null。</p><p>之后将浏览器关闭，再重新访问scope2.jsp，发现session数据也没了。</p><p>最后重启tomcat，访问scope2.jsp, application数据没了。</p><h1 id="out和response输出"><a href="#out和response输出" class="headerlink" title="out和response输出"></a>out和response输出</h1><p>先看代码</p><p><img src="https://i.loli.net/2021/05/11/7IZjsTM3A9eLUxw.png" alt="image-20210511204011521"></p><p>访问</p><p><img src="https://i.loli.net/2021/05/11/qaoDm4eCfXWlP5i.png" alt="image-20210511204030350"></p><p>发现response的输出比out更靠前了！</p><p>这是因为，out有缓冲区，response也有缓冲区。当页面代码执行完毕后要输出时，会先执行out.flush()操作，将out缓冲区中的内容追加到response缓冲区中，然后再执行response缓冲区的刷新操作输出。</p><p>当然，也可以手动改变输出顺序，可以在out打印之后就执行out.flush()</p><p><img src="https://i.loli.net/2021/05/11/HUA1EYJMlPNj8Gk.png" alt="image-20210511204343889"></p><p>执行输出顺序就变成：test1-&gt;test3-&gt;test4-&gt;test2了。</p><p>由于JSP编译器将JSP代码翻译成java文件时，使用的就是out.write。因此，<strong>为了避免输出顺序乱了，应使用out.write输出</strong></p><h1 id="out和print打印"><a href="#out和print打印" class="headerlink" title="out和print打印"></a>out和print打印</h1><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    out.write(&quot;ggy&quot;);</span><br><span class="line">    out.print(&quot;ggy&quot;);</span><br><span class="line">    </span><br><span class="line">    out.write(&quot;12&quot;);</span><br><span class="line">    out.print(&quot;12&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>结果是两个都能正确打印。因为打印的是字符串。</p><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    out.write(12);</span><br><span class="line">    out.print(12);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>打印数字，第一个out.write打印出来奇怪的东西，而out.print正确打印出来了12。</p><p>这是因为：out.write打印字符串没问题，打印数字时，会将数字作为ASCII码，然后将该ASCII码对应的字符输出来。而out.print不管打印什么类型的，都会先将其转换成字符串类型再打印出来。</p><p>因此，最好使用：out.print()打印。</p><h1 id="包含其它jsp文件"><a href="#包含其它jsp文件" class="headerlink" title="包含其它jsp文件"></a>包含其它jsp文件</h1><h2 id="静态包含"><a href="#静态包含" class="headerlink" title="静态包含"></a>静态包含</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file&#x3D;&quot;&#x2F;include&#x2F;footer.jsp&quot;%&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;%@ xx %&gt;</code>表示的是指令，比如：<code>&lt;%@ page=xx %&gt;</code>也是。</p><p>静态包含会将其它jsp文件的内容包含进来，相当于在本jsp文件中加入了其它jsp文件里的内容，翻译成Java文件输出。</p><p>被包含的jsp文件不会被翻译成java文件。</p><h2 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page&#x3D;&quot;footer.jsp&quot;&gt;&lt;&#x2F;jsp:include&gt;</span><br></pre></td></tr></table></figure><p>翻译成java文件后</p><p><img src="https://i.loli.net/2021/05/11/P2O3sGXtmW6hQqc.png" alt="image-20210511210029073"></p><p>发现是一行代码，该代码作用：main.jsp动态包含footer.jsp, 那么main.jsp会将request和response，out对象都传给footer.jsp供它使用，那么这两个文件操作的都是同一个域对象，可以共享数据。</p><p><img src="https://i.loli.net/2021/05/11/IlXjJFT8HfYdD1s.png" alt="image-20210511210243654"></p><p>动态包含可以传递数据。</p><p>main.jsp中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page&#x3D;&quot;footer.jsp&quot;&gt;</span><br><span class="line">    &lt;jsp:param name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">    &lt;jsp:param name&#x3D;&quot;password&quot; value&#x3D;&quot;ggy666&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;jsp:include&gt;</span><br></pre></td></tr></table></figure><p>footer.jsp中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%&#x3D;request.getParameter(&quot;username&quot;)%&gt;</span><br><span class="line">&lt;%&#x3D;request.getParameter(&quot;password&quot;)%&gt;</span><br></pre></td></tr></table></figure><p>再访问main.jsp, 然后看到包含进来的footer.jsp输出了root和ggy666。</p><h1 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h1><p>之前的servlet的请求转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(&quot;&#x2F;scope2.jsp&quot;).forward(request, response);</span><br></pre></td></tr></table></figure><p>现在JSP的请求转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page&#x3D;&quot;scope2.jsp&quot;&gt;&lt;&#x2F;jsp:forward&gt;</span><br></pre></td></tr></table></figure><h1 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h1><p>JavaWeb三大组件：Servlet程序、Filter过滤器和Listener监听器。</p><p>它其实就是个接口，负责监听事件，然后需要我们去实现接口，当触发事件时执行相应的函数。</p><p>有八大监听器。</p><p><strong>ServletContextListener监听器</strong></p><p>主要是用于监听ServletContext对象的创建和销毁。而Web工程创建时会创建ServletContext对象，重新部署运行会销毁。</p><ul><li>contextInitialized(ServletContextEvent sce): 创建</li><li>contextDestroyed(ServletContextEvent sce): 销毁</li></ul><p>新建一个类，然后实现监听器接口</p><p><img src="https://i.loli.net/2021/05/12/AgekWn6FYXI9r4D.png" alt="image-20210512231412306"></p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><p><img src="https://i.loli.net/2021/05/13/X1vYHtSE42NOUPw.png" alt="image-20210513132509951"></p><p><img src="https://i.loli.net/2021/05/13/TBwLtkdvFes8Z2y.png" alt="image-20210513132523893"></p><h2 id="输出学生信息"><a href="#输出学生信息" class="headerlink" title="输出学生信息"></a>输出学生信息</h2><p>1.首先定义一个学生类，类里面定义学生的属性，然后构造函数初始化，再生成Getter and Setter, 最好再生成一个toString方法将学生属性输出。</p><p><img src="https://i.loli.net/2021/05/13/Mkpt5ZC6iEVxbOJ.png" alt="image-20210513164444178"></p><p>2.使用JSP文件，先是生成10个学生对象并同时对它们进行初始化，然后将对象保存进一个数组中</p><p><img src="https://i.loli.net/2021/05/13/hPxvy5LldciKYCf.png" alt="image-20210513164549105"></p><p>注意，Java的列表使用的是List&lt;&gt;，需要动态new一个空间出来，空间大小则是根据&lt;&gt;里的类型而定。然后列表有add方法，可以直接将内容添加到数组中。</p><p>3.遍历列表中保存的学生对象，将每个对象的属性数据输出</p><p><img src="https://i.loli.net/2021/05/13/6HEmAOCXRjzvqBU.png" alt="image-20210513164814918"></p><p>注意，遍历数组时，for循环可以直接用(Student student: 列表)的形式。稍微加一些css即可</p><p><img src="https://i.loli.net/2021/05/13/aIQGYT7RJDAV1Pu.png" alt="image-20210513164937190"></p><h2 id="JSP与Servlet联动"><a href="#JSP与Servlet联动" class="headerlink" title="JSP与Servlet联动"></a>JSP与Servlet联动</h2><p>Servlet程序在web.xml中部署了访问路径，用户首先可以访问这个servlet路径，发起一个请求。Servlet接收到请求后，获取请求参数，然后将参数拼接到sql语句去查询数据库，得到的数据保存到request中。然后使用<strong>请求转发</strong>的方式，将请求转发到JSP中。由于请求转发的request对象和response对象都不变，JSP中则可以使用request对象访问到Servlet程序保存的数据，并输出到页面。</p><p>1.新建一个Servlet程序，在doGet方法中</p><p><img src="https://i.loli.net/2021/05/13/l34EbVQnhzYLSkj.png" alt="image-20210513170517514"></p><p>2.修改test2.jsp内容，这次不用再生成学生对象了，只需要接收request中的学生对象数组。</p><p><img src="https://i.loli.net/2021/05/13/C3dxHbDvwaBOScJ.png" alt="image-20210513170609627"></p><p>3.配置web.xml, 增加访问Servlet程序的路径</p><p><img src="https://i.loli.net/2021/05/13/n3Da5467qGwL1jY.png" alt="image-20210513170735806"></p><p>一定要重新部署，然后访问student即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天接着学习jsp的内容&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(4)</title>
    <link href="https://ggyggy666.github.io/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/"/>
    <id>https://ggyggy666.github.io/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/</id>
    <published>2021-05-07T02:35:27.000Z</published>
    <updated>2021-05-07T03:49:37.990Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始学习jsp。</p><a id="more"></a><p>之前用的Servlet返回数据给页面，如果返回的是一个网页，那么得一行行输出返回，实在麻烦。而Jsp可以像写网页那样直接写网页就行了，方便很多。访问也可以直接访问xxx.jsp即可。</p><h1 id="Jsp本质"><a href="#Jsp本质" class="headerlink" title="Jsp本质"></a>Jsp本质</h1><blockquote><p>当第一次访问Jsp时，tomcat服务器会将jsp文件翻译成一个.class和java源文件。路径是：C:\Users\29924.IntelliJIdea2019.3\system\tomcat\Tomcat_8_5_60_JavaWeb_5\work\Catalina\localhost\Jsp\org\apache\jsp</p></blockquote><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507111104179.png" alt="image-20210507111104179"></p><p>而java源文件里面</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507104712419.png" alt="image-20210507104712419"></p><p>我创建的是test.jsp, 它则定义了一个test_jsp类，继承了HttpJspBase, 而这个HttpJspBase又是继承了HttpServlet, 因此jsp可以说是HttpServlet的封装。看后面内容</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507104842063.png" alt="image-20210507104842063"></p><p>这是Jsp的内容，但在这个源文件里，也是像servlet程序那样将内容一行行输出。所以说，我们在jsp文件里输的内容，tomcat服务器会帮我们自动转化成servlet输出返回的形式封装在这个Java源文件里面。我们只需要专心写网页就行，tomcat帮我们做好了输出返回。</p><h1 id="page标签"><a href="#page标签" class="headerlink" title="page标签"></a>page标签</h1><p>注意到jsp文件页面的首部有一个page标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br></pre></td></tr></table></figure><p>它可以用来修改页面的属性。属性如下：</p><ul><li>language: jsp翻译后是什么程序的文件，暂时只支持Java，就是上面说的Java源文件。</li><li>contentType: jsp返回的数据类型，text/html返回HTML。</li><li>pageEncoding: 当前jsp页面的字符集编码。</li><li>import: 导入包和类。</li><li>autoFlush：缓冲区满了之后，是否自动刷新缓冲区。默认是true。</li><li>buffer: 缓冲区的大小，默认是8kb. </li><li>errorPage: 出错后重定向到哪个错误页面。</li><li>isErrorPage: 当前页面是否是错误页面。默认是false，如果是true可以获取异常信息。</li><li>session: 访问当前jsp页面时，是否创建HttpSession对象，默认是true。</li><li>extends: 将jsp翻译出来的java源文件里的java类默认继承谁。</li></ul><h1 id="声明脚本"><a href="#声明脚本" class="headerlink" title="声明脚本"></a>声明脚本</h1><p>可以在JSP页面声明属性、方法、静态代码块和内部类等。使用<code>&lt;%! %&gt;</code>即可。</p><p><strong>声明属性</strong></p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507111306247.png" alt="image-20210507111306247"></p><p>再访问一下jsp，然后看java源文件</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507111407853.png" alt="image-20210507111407853"></p><p>可以发现定义的东西一模一样的输出到了Java源文件里面。</p><p><strong>声明静态代码块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static&#123;</span><br><span class="line">map &#x3D; new HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(&quot;key1&quot;, &quot;value1&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int abc()&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明内部类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static class A &#123;</span><br><span class="line">private Integer id &#x3D; 12;</span><br><span class="line">private String name &#x3D; &quot;ggy&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将它们放在JSP文件里面，使用<code>&lt;%!  %&gt;</code>即可。</p><h1 id="表达式脚本"><a href="#表达式脚本" class="headerlink" title="表达式脚本"></a>表达式脚本</h1><p>表达式脚本可以在JSP页面上输出数据。使用：<code>&lt;%=表达式 %&gt;</code></p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507112628332.png" alt="image-20210507112628332"></p><p>注意map对象，静态代码块里面实例化的，定义的时候也需要static。访问JSP页面</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507112730378.png" alt="image-20210507112730378"></p><p>查看JAVA源文件</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507112807810.png" alt="image-20210507112807810"></p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507112841286.png" alt="image-20210507112841286"></p><p>都是直接调用out.print打印的。</p><p><strong>特点</strong></p><ul><li>所有的表达式脚本都是输出到jspService方法中的，因此jspService()中的对象、方法等在表达式脚本里边都可以调用。</li><li>表达式脚本都会被翻译成out.print打印输出到页面。</li><li>表达式脚本中的表达式不能以分号结束。</li></ul><p><strong>调用jspService的request对象</strong></p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507113239941.png" alt="image-20210507113239941"></p><p>访问：</p><p><a href="http://localhost:8080/Jsp/test.jsp?username=ggy" target="_blank" rel="noopener">http://localhost:8080/Jsp/test.jsp?username=ggy</a></p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507113324651.png" alt="image-20210507113324651"></p><p><strong>如果表达式以分号结束</strong></p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507113550637.png" alt="image-20210507113550637"></p><p>访问JSP页面，报错了，查看Java源文件</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507113634840.png" alt="image-20210507113634840"></p><p>很明显看到错误。因为表达式都是在out.print里面的，就是参数传进print函数，没有分号。</p><h1 id="代码脚本"><a href="#代码脚本" class="headerlink" title="代码脚本"></a>代码脚本</h1><p>就是写Java代码，格式：<code>&lt;% %&gt;</code></p><p><strong>if语句</strong></p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507114211766.png" alt="image-20210507114211766"></p><p>如果是i==1可以，如果是if(i)会报错。在Java源文件里面</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507114249298.png" alt="image-20210507114249298"></p><p>原样输出。同样是在jspService方法里面，也可以调用request对象等。<strong>可以用分号！</strong></p><p>重点是循环，与Jsp嵌套</p><p><strong>for循环</strong></p><p>for循环可以被jsp语句隔开，并不会影响它的完整性。</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507114745832.png" alt="image-20210507114745832"></p><p>其实跟PHP那种写法一样的。访问jsp</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507114754963.png" alt="image-20210507114754963"></p><p>刚开始很难理解，但是去看Java源文件后</p><p><img src="/2021/05/07/JavaWeb%E5%AD%A6%E4%B9%A0-4/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210507114831000.png" alt="image-20210507114831000"></p><p>要时刻记住，jsp的html语句会被翻译成out.write(xxx)，这样的效果就是循环打印了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天开始学习jsp。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(3)</title>
    <link href="https://ggyggy666.github.io/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/"/>
    <id>https://ggyggy666.github.io/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/</id>
    <published>2021-05-04T05:00:32.000Z</published>
    <updated>2021-05-07T02:39:57.243Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习书城项目的功能的编写。</p><a id="more"></a><h1 id="JavaEE三层架构"><a href="#JavaEE三层架构" class="headerlink" title="JavaEE三层架构"></a>JavaEE三层架构</h1><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504130148345.png" alt="image-20210504130148345"></p><p>客户端发送请求给服务端，服务端有三层，首先是Web层，负责封装请求，然后调用业务层的service处理业务；接着是业务层，负责处理业务请求，然后调用数据库进行存储；最后是持久层，负责与数据库进行交互。当然，这还得有个数据库才行。最后web层响应数据给客户端。</p><p>因此，一个完整的前后端项目需要的包为：</p><table><thead><tr><th>web层</th><th>com.JavaWeb.web/servlet/controller</th><th></th></tr></thead><tbody><tr><td>service层</td><td>com.JavaWeb.service</td><td>service接口包</td></tr><tr><td>service层</td><td>com.JavaWeb.service.impl</td><td>service接口实现包</td></tr><tr><td>dao持久层</td><td>com.JavaWeb.dao</td><td>dao接口包</td></tr><tr><td>dao持久层</td><td>com.JavaWeb.dao.impl</td><td>dao接口实现类</td></tr><tr><td>实体bean对象</td><td>com.JavaWeb.pojo/entity/domain/bean</td><td>JavaBean类</td></tr><tr><td>测试包</td><td>com.JavaWeb.test/unit</td><td></td></tr><tr><td>工具类</td><td>com.JavaWeb.utils</td><td></td></tr></tbody></table><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504132236612.png" alt="image-20210504132236612"></p><p>注意：在com.JavaWeb上新建package后得到service包，然后在service包上新建package得到service.impl包。最后只显示了service.impl包。</p><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>需要先搭建好数据库并进行操作。</p><h2 id="MySQL创建数据库和表"><a href="#MySQL创建数据库和表" class="headerlink" title="MySQL创建数据库和表"></a>MySQL创建数据库和表</h2><p>首先打开PHP Study的MySQL数据库，然后在PHP Study的设置中</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504150559284.png" alt="image-20210504150559284"></p><p>图中是Mysql8.0的，但是最后使用的是5.7。打开MySql的安装目录，进入到bin目录下，可以发现存在mysql.exe。因此将此时所在目录添加到环境变量。然后命令行中：<code>mysql -uroot -p</code>, 输入密码即可连接到数据库。</p><p>创建book数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database book;</span><br><span class="line">use book;</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">    &#96;id&#96; int primary key auto_increment,</span><br><span class="line">    &#96;username&#96; varchar(20) not null unique,</span><br><span class="line">    &#96;password&#96; varchar(32) not null,</span><br><span class="line">    &#96;email&#96; varchar(200));</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(&#96;username&#96;,&#96;password&#96;,&#96;email&#96;) values (&#39;admin&#39;,&#39;ggy666&#39;,&#39;123@qq.com&#39;);</span><br></pre></td></tr></table></figure><p>查看数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user;</span><br></pre></td></tr></table></figure><h2 id="编写数据库表对应的JavaBean对象"><a href="#编写数据库表对应的JavaBean对象" class="headerlink" title="编写数据库表对应的JavaBean对象"></a>编写数据库表对应的JavaBean对象</h2><p>Bean对象在pojo包下创建。创建一个类User，对应数据库的user表。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504152536441.png" alt="image-20210504152536441"></p><p>首先编写4个变量，然后右键点击Generate，点击Getter and Setter, 就会生成get和set的方法。继续右键单击Generate，点击toString方法，然后是一个空的Constructor, 最后是4个变量的Constructor。</p><h2 id="编写工具类获取数据库连接和关闭"><a href="#编写工具类获取数据库连接和关闭" class="headerlink" title="编写工具类获取数据库连接和关闭"></a>编写工具类获取数据库连接和关闭</h2><p>工具类包是Utils，在其下新建一个类JdbcUtils</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504153057140.png" alt="image-20210504153057140"></p><p>有两个方法，获取数据库连接和关闭数据库连接。</p><p>要连接数据库，还需要一个数据库的配置文件，应该在src目录下新建一个文件：jdbc.properties</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504165527099.png" alt="image-20210504165527099"></p><p>然后在JdbcUtils.java中去读取配置文件</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504165619172.png" alt="image-20210504165619172"></p><p>注意，需要导入两个jar包</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504165725209.png" alt="image-20210504165725209"></p><p>用的连接Mysql包是5.几的版本，因此需要使用Mysql5.x的版本。最开始使用的是8.x的，报错了。</p><p>实现创建连接对象和关闭连接的函数</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504165649506.png" alt="image-20210504165649506"></p><p>到Test包里写一个测试类JdbcUtilsTest，测试能否顺利连接数据库</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504165920921.png" alt="image-20210504165920921"></p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504165954853.png" alt="image-20210504165954853"></p><p>返回了连接数据库的对象。</p><h2 id="编写BaseDao类操作数据库"><a href="#编写BaseDao类操作数据库" class="headerlink" title="编写BaseDao类操作数据库"></a>编写BaseDao类操作数据库</h2><p>在dao.impl包下新建一个BaseDao类，这个类是抽象类。需要先下载一个common-dbutils-1.3 jar, 并导入进来。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504172336518.png" alt="image-20210504172336518"></p><p>首先创建一个QueryRunner对象，它就是用来执行sql语句的。</p><p>然后是update方法，传sql语句以及参数进去，先连接数据库，然后执行sql语句。它可以进行增删改操作。同理</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504172459890.png" alt="image-20210504172459890"></p><p>它可以执行查询sql语句后返回一条数据</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504172555245.png" alt="image-20210504172555245"></p><p>这个可以返回多条数据</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504172613075.png" alt="image-20210504172613075"></p><p>这个可以返回一行一列的数据。</p><h2 id="编写UserDao接口类"><a href="#编写UserDao接口类" class="headerlink" title="编写UserDao接口类"></a>编写UserDao接口类</h2><p>根据前端的功能，需要进行相应的数据库操作。上面已经实现了数据库操作方法，UserDao就是提供了一个接口去根据相应功能操作数据库。</p><p>首先在dao.impl包下，新建一个UserDao接口。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504175642548.png" alt="image-20210504175642548"></p><p>但是UserDao需要在dao下，而不是dao.impl下，因此将impl删除。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504175721974.png" alt="image-20210504175721974"></p><p>报错了，点击错误，选择移动即可</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504175806056.png" alt="image-20210504175806056"></p><p>填写上接口</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504180141357.png" alt="image-20210504180141357"></p><p>一个是根据用户名查询用户信息，用来注册时检查用户名是否已经存在；</p><p>一个是根据用户名和密码查询用户信息，用来检查登陆信息是否正确；</p><p>最后是保存用户信息。用来注册用户。</p><h2 id="编写UserDaoImpl实现类"><a href="#编写UserDaoImpl实现类" class="headerlink" title="编写UserDaoImpl实现类"></a>编写UserDaoImpl实现类</h2><p>继承BaseDao类，实现UserDao类，去实现3个功能接口。</p><p>在dao的impl下新建UserDaoImpl类</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504180539420.png" alt="image-20210504180539420"></p><p>选择三个接口函数后确认。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504181059732.png" alt="image-20210504181059732"></p><p>实现三个接口。之后要测试这三个接口，可以到UserDao接口类中，按Ctrl+Shift+T</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504181220446.png" alt="image-20210504181220446"></p><p>点击</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504181324781.png" alt="image-20210504181324781"></p><p>按图中选择，确定</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504181525727.png" alt="image-20210504181525727"></p><p>新建UserDao对象，调用方法，查询admin记录</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504181555928.png" alt="image-20210504181555928"></p><p>成功查询。最后完善方法</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504182042484.png" alt="image-20210504182042484"></p><h2 id="编写UserService接口类"><a href="#编写UserService接口类" class="headerlink" title="编写UserService接口类"></a>编写UserService接口类</h2><p>该接口提供处理业务的功能。在service.impl下新建一个接口类UserService, 同样在package中去掉impl, 然后点击错误处理的小灯，移动即可。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504182634203.png" alt="image-20210504182634203"></p><p>写了三个接口，注册，登陆，判断用户是否存在。</p><h2 id="编写UserServiceImpl实现类"><a href="#编写UserServiceImpl实现类" class="headerlink" title="编写UserServiceImpl实现类"></a>编写UserServiceImpl实现类</h2><p>在service的impl下新建，然后Ctrl+O，点击三个接口并确认，实现</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504183131528.png" alt="image-20210504183131528"></p><p>之后测试三个接口，同样切换到UserService接口类中，Ctrl+Shift+T</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504183240292.png" alt="image-20210504183240292"></p><p>填写函数</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504183913867.png" alt="image-20210504183913867"></p><h1 id="编写一个注册页面"><a href="#编写一个注册页面" class="headerlink" title="编写一个注册页面"></a>编写一个注册页面</h1><p>在web目录下新建user目录，然后新建regist.html</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504190044581.png" alt="image-20210504190044581"></p><p>访问：<a href="http://localhost:8080/book/user/regist.html" target="_blank" rel="noopener">http://localhost:8080/book/user/regist.html</a></p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504190100021.png" alt="image-20210504190100021"></p><h1 id="编写注册RegistServlet类"><a href="#编写注册RegistServlet类" class="headerlink" title="编写注册RegistServlet类"></a>编写注册RegistServlet类</h1><p>在web包下新建一个RegistServlet类（注意，首字母要大写，小写了在web.xml没找到…)</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504191402794.png" alt="image-20210504191402794"></p><p>web.xml中配置访问路径</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504191418506.png" alt="image-20210504191418506"></p><p>继续完善RegistServlet</p><p>首先检查验证码是否正确</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504191653299.png" alt="image-20210504191653299"></p><p>不正确就跳转回注册界面。正确之后</p><p>先检查用户名是否存在</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504192159331.png" alt="image-20210504192159331"></p><p>首先创建UserService对象，然后调用isExistName方法。注意需要throws SQLException，用户名存在还是转发回注册页面，否则就注册，插入数据：</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504192515099.png" alt="image-20210504192515099"></p><p>然后跳转到登录界面。但是这时候抛出的SQLException出错了。将它删除，然后鼠标移到红线的函数，按提示增加try-catch。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504192723203.png" alt="image-20210504192723203"></p><h1 id="编写登陆界面"><a href="#编写登陆界面" class="headerlink" title="编写登陆界面"></a>编写登陆界面</h1><p>先去user目录下新建一个login.html</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504193041297.png" alt="image-20210504193041297"></p><p>与注册页面差不多，只是不用邮箱了，改为了登陆页面。</p><p>重新部署，然后访问</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504192833432.png" alt="image-20210504192833432"></p><p>输入没有存在的用户名注册</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504193137996.png" alt="image-20210504193137996"></p><p>成功跳转到了登陆页面。</p><h1 id="编写LoginServlet登陆类"><a href="#编写LoginServlet登陆类" class="headerlink" title="编写LoginServlet登陆类"></a>编写LoginServlet登陆类</h1><p>类似注册类。首先在web下新建一个LoginServlet类，然后配置web.xml</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504210619396.png" alt="image-20210504210619396"></p><p>登陆页面login.html的表单的action也应该修改</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504210700267.png" alt="image-20210504210700267"></p><p>实现LoginServlet类</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504213557771.png" alt="image-20210504213557771"></p><p>首先判断验证码是否正确，正确就判断用户名和密码是否正确，正确就进入index.html。</p><p>这里必须要注意，之前那个userService.login函数有问题，它返回的是void类型。因此我将它改成了boolean型，如下</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504213715153.png" alt="image-20210504213715153"></p><p>这是在UserServiceImpl里的。因此UserService接口类也需要改成boolean型</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504213802276.png" alt="image-20210504213802276"></p><p>还需要编写一个index.html</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504211336686.png" alt="image-20210504211336686"></p><p>之后重新部署，访问登陆界面：<a href="http://localhost:8080/book/user/login.html" target="_blank" rel="noopener">http://localhost:8080/book/user/login.html</a></p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504211637927.png" alt="image-20210504211637927"></p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504213900588.png" alt="image-20210504213900588"></p><p>登陆成功。</p><h1 id="debug调试"><a href="#debug调试" class="headerlink" title="debug调试"></a>debug调试</h1><p>首先停止tomcat服务后，点击debug启动</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504204739971.png" alt="image-20210504204739971"></p><p>启动之后一样会打开浏览器访问book工程，即正常运行。在注册类的开头下一个断点</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504204919583.png" alt="image-20210504204919583"></p><p>然后访问注册页面：<a href="http://localhost:8080/book/user/regist.html，输入信息" target="_blank" rel="noopener">http://localhost:8080/book/user/regist.html，输入信息</a></p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504205023315.png" alt="image-20210504205023315"></p><p>点击提交后，浏览器在转圈，看IDEA</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504205101737.png" alt="image-20210504205101737"></p><p>程序停在了断点处，并出现了debug信息。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504205314720.png" alt="image-20210504205314720"></p><p>查看调试相关的按钮</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504205451293.png" alt="image-20210504205451293"></p><ul><li>1：运行到下一行。</li><li>2：进入自己写的函数体部分。比如运行到一个getConnection()函数处，按下2，就会打开这个函数所在的文件，并定位到该函数的实现位置。注意必须是自己写的，不是系统函数。</li><li>3：强制进入函数体部分，包括系统函数。</li><li>4：退出函数体查看，返回上一个文件调用该函数的位置。</li><li>5：不太清楚。应该是打开文件，定位到当前所在行的所在函数的定义处</li><li>6：鼠标点到哪一行，按下6后就会运行到那一行的位置。</li></ul><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504205904262.png" alt="image-20210504205904262"></p><p>这个是运行的函数的堆栈信息。下面的函数调用上面的函数。</p><p><img src="/2021/05/04/JavaWeb%E5%AD%A6%E4%B9%A0-3/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210504205957798.png" alt="image-20210504205957798"></p><p>分别是停止服务，运行到下一个断点处，临时取消所有断点运行。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该书城注册和登陆完全就是照着JavaEE的三层架构写的。</p><ul><li>首先是数据库和表，使用Mysql建立了book数据库和user表，并添加了数据。</li><li>针对User表，有4个数据，在pojo包下建立了User类，这个类作为JavaBean对象，可以让其它类访问或者设置里面的4个数据。用法是：传4个数据进去给构造函数new一个user对象出来，就可以直接传递这个user对象，其它类获取这个对象后就可以得到4个数据。</li><li>然后是Dao层。有BaseDao类和UserDao接口及UserDaoImpl实现类。BaseDao类只针对数据库操作，增删改查并返回数据。UserDao接口就要考虑到实际需要用到数据库的功能，因此定义了<strong>注册和登陆，查询用户是否存在</strong>3个接口。UserDaoImpl就负责调用BaseDao的方法去实现。</li><li>接着是业务层。在service包下有UserService接口和实现类。接口就要处理业务，而处理业务就需要用到数据库。<strong>业务有3个，注册和登陆，查询用户是否存在。</strong>实现接口就只需要去调用UserDaoImpl中的方法即可。</li><li>之后就是web层。有注册和登陆类。因为是web层，类就首先解析请求中的数据，将一些数据(如username, password)传进service层的方法去查询数据库得到结果，并与解析出来的一些数据进行对比。</li><li>最后就是前端的注册和登陆界面了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习书城项目的功能的编写。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(2)</title>
    <link href="https://ggyggy666.github.io/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/"/>
    <id>https://ggyggy666.github.io/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/</id>
    <published>2021-05-02T15:01:21.000Z</published>
    <updated>2021-05-03T10:27:40.079Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续学习JavaWeb的Servlet.</p><a id="more"></a><h1 id="ServletConfig类"><a href="#ServletConfig类" class="headerlink" title="ServletConfig类"></a>ServletConfig类</h1><p>通常用于初始化获取配置文件web.xml中的值，该类的作用：</p><ol><li><p>获取web.xml中Servlet-name的值。</p></li><li><p>获取web.xml中init-param的初始化参数名对应的值</p></li><li><p>获取ServletContext对象</p></li></ol><p>首先看到HelloServlet类的init函数</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502230917858.png" alt="image-20210502230917858"></p><p>可以发现传进来的就是ServletConfig对象。</p><p>要获取init-param初始化参数，还需要在web.xml中先定义</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502231357341.png" alt="image-20210502231357341"></p><p>注意是写在servlet中的。代码如下</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502231547666.png" alt="image-20210502231547666"></p><p>之后重启tomcat，访问hello</p><p><img src="https://i.loli.net/2021/05/02/KsiVZBMRmhDnkSJ.png" alt="image-20210502231713621"></p><p>当然ServletConfig类也可以在其它地方使用，只需要建立一个对象即可。如在HelloServlet2中：</p><p><img src="https://i.loli.net/2021/05/02/1i45CPxoFGb2HJ9.png" alt="image-20210502232317666"></p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502232412428.png" alt="image-20210502232412428"></p><p>如果要访问init-param，则需要在web.xml的HelloServlet2的Servlet中添加。</p><p>这里注意，如果HelloServlet2要重写init函数，需要先实现父类</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502232755800.png" alt="image-20210502232755800"></p><p>这是因为HelloServlet2继承的是HttpServlet, 需要super, 而HelloServlet是实现Servlet，不是继承，因此不用super。</p><h1 id="ServletContext类"><a href="#ServletContext类" class="headerlink" title="ServletContext类"></a>ServletContext类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>上面说了ServletConfig可以通过getServletContext()方法获得ServletContext对象。那么什么是ServletContext？</p><blockquote><p>它是一个接口，表示Servlet的上下文对象；一个Web工程只有一个ServletContext对象实例；ServletContext对象是一个域对象。</p><p>域对象：可以像map一样存储数据，域指存储的数据的操作范围，即整个web工程。</p></blockquote><p><img src="https://i.loli.net/2021/05/03/Jm67UGbwgkiu9ol.png" alt="image-20210503103511012"></p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>能够获取web.xml中上下文参数的值</li><li>能够获取当前工程名字</li><li>能够获取当前工程在硬盘中的真实路径</li><li>能够像map一样存储数据。注意，这个对象是存在于整个web工程的，任何Servlet去访问它都是同一个对象，因此存储的数据也是共享的。</li></ol><p>前3个作用：</p><p>首先新建一个ContextServlet, 然后web.xml中配置访问路径以及context-param</p><p><img src="https://i.loli.net/2021/05/03/6nyC9So5W2u8lQF.png" alt="image-20210503105125823"></p><p>注意，这个context-param不属于任何servlet，它只属于这个工程。上下文对象只能访问context-param, 不能访问其它servlet中的init-param。</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503105722385.png" alt="image-20210503105722385"></p><p>特别要注意获取真实路径，参数是”/“, 说明是当前工程真实路径的根目录</p><p><img src="https://i.loli.net/2021/05/03/IojCZT1mJQeb9yd.png" alt="image-20210503105846630"></p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503105909862.png" alt="image-20210503105909862"></p><p>它的内容对应着IDEA中的web目录。如果要获取web目录下的WEB-INF的真实路径，那么就应该这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;WEB-INF的真实路径是：&quot; + context.getRealPath(&quot;&#x2F;WEB-INF&quot;));</span><br></pre></td></tr></table></figure><p>存储数据：</p><p>首先还是新建ContextServlet1, web.xml中配置访问路径</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503111124034.png" alt="image-20210503111124034"></p><p>获取ServletContext对象，这次不用通过ServletConfig类获取，可以直接通过getServletContext()得到</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503111839987.png" alt="image-20210503111839987"></p><p>在存储前先获取一下数据，存储后再获取数据，对比：</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503112049269.png" alt="image-20210503112049269"></p><p>第一个是null, 存储之后就得到数据了。再新建一个ContextServlet2</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503112339679.png" alt="image-20210503112339679"></p><p>重新部署，然后访问context2, 发现是null值。再去访问context1, 发现先是null, 存储数据后是ggy666。再去访问context2，发现已经不是null值了，而是ggy666。</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503112608916.png" alt="image-20210503112608916"></p><p>由此可说明：ServletContext对象存储的数据生存期是在一次部署期间，重新部署后会被销毁，数据也就没有了。而一旦在部署期间，存储了数据之后，在其它Servlet也能访问到该对象存储的数据。</p><h1 id="常见MIME类型"><a href="#常见MIME类型" class="headerlink" title="常见MIME类型"></a>常见MIME类型</h1><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503122415808.png" alt="image-20210503122415808"></p><h1 id="HttpServletRequest类"><a href="#HttpServletRequest类" class="headerlink" title="HttpServletRequest类"></a>HttpServletRequest类</h1><p>请求进入tomcat服务器后，服务器会将请求封装到Request对象中，然后传递到service方法（doGet()和doPost())中。我们就可以通过doGet的参数里的HttpServletRequest对象调用方法获取请求信息。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getRequestURI()&#x2F;&#x2F;获取请求的资源路径（相对）</span><br><span class="line">getRequestURL()&#x2F;&#x2F;获取请求的资源路径（绝对）</span><br><span class="line">getRemoteHost()&#x2F;&#x2F;获取请求的IP</span><br><span class="line">getHeader(请求头)&#x2F;&#x2F;获取请求头</span><br><span class="line">getParameter(参数名)&#x2F;&#x2F;获取请求的参数</span><br><span class="line">getParameterValues(参数名)&#x2F;&#x2F;获取请求的参数值（多个）</span><br><span class="line">getMethod()&#x2F;&#x2F;获取请求的方法</span><br><span class="line">setAttribute(key, value)&#x2F;&#x2F;设置存储数据</span><br><span class="line">getAtrribute(key)&#x2F;&#x2F;通过key获取对应的值</span><br><span class="line">getRequestDispatcher()&#x2F;&#x2F;获取转发对象</span><br></pre></td></tr></table></figure><p>注意getParameter和getParameterValues的用法</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503125816183.png" alt="image-20210503125816183"></p><p>new一个module，然后new一个Serlvet，配置好访问路径</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503124218313.png" alt="image-20210503124218313"></p><p>在doGet方法中测试方法</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503125848188.png" alt="image-20210503125848188"></p><p>编辑配置</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503124829992.png" alt="image-20210503124829992"></p><p>运行</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503125903048.png" alt="image-20210503125903048"></p><p>可以注意到getParameterValues并没有正确使用。需要如下使用：</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503130715313.png" alt="image-20210503130715313"></p><p>加上Arrays.asList，将获取到的数据转为列表形式才行。然后重新部署后访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;HttpServlet&#x2F;httpServlet?a&#x3D;test&amp;a&#x3D;123&#x2F;&#x2F;a有多个值</span><br></pre></td></tr></table></figure><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503130827652.png" alt="image-20210503130827652"></p><p>但是注意，POST请求中获取参数时如果是中文时会乱码，此时需要设置编码</p><p>首先写一个post请求的表单</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503131343854.png" alt="image-20210503131343854"></p><p>java类中填写doPost</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503131453467.png" alt="image-20210503131453467"></p><p>重新部署，访问：<a href="http://localhost:8080/HttpServlet/test.html" target="_blank" rel="noopener">http://localhost:8080/HttpServlet/test.html</a></p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503131553126.png" alt="image-20210503131553126"></p><p>点击提交后</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503131610200.png" alt="image-20210503131610200"></p><p>乱码了。需要设置编码</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503131724958.png" alt="image-20210503131724958"></p><p>设置编码必须在开头就设置。</p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>客户端发送给服务端的servlet后，该servlet又转发给另一个servlet，从而达到一次请求有多个servlet处理的效果。</p><p>新建servlet1和servlet2，并配置好web.xml</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503143954637.png" alt="image-20210503143954637"></p><p>在servlet1中</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503144617410.png" alt="image-20210503144617410"></p><p>首先获取请求的参数，然后设置一个域对象数据，然后转发请求。注意，转发请求时，需要转发的目的的相对路径（web.xml)中配置的路径，而不是类名，因此这里是/servlet2。</p><p>servlet2中</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503145152104.png" alt="image-20210503145152104"></p><p>首先获取请求的参数，然后获取request对象的域数据，判断servlet1是否已经处理过，然后servlet2处理。</p><p>访问servlet1：<a href="http://localhost:8080/HttpServlet/servlet1?username=root" target="_blank" rel="noopener">http://localhost:8080/HttpServlet/servlet1?username=root</a></p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503145423964.png" alt="image-20210503145423964"></p><p>成功转发并接收。</p><p>需要注意点是：</p><ol><li><p>虽然使用两个servlet处理，但是浏览器地址没有变化，还是访问的servlet1.</p></li><li><p>只是一次请求。</p></li><li><p>共享Request对象域中的数据。</p></li><li><p>浏览器直接访问WEB-INF目录下的文件是404的，如果转发请求的话，可以转发到WEB-INF目录下的文件。</p></li><li><p>不能转发到工程外的文件。</p></li></ol><h2 id="base标签的作用"><a href="#base标签的作用" class="headerlink" title="base标签的作用"></a>base标签的作用</h2><p>base标签是用来作为参照的路径的，请求转发是使用相对路径的，如果没有参照的基地址路径，很容易造成地址错误。</p><p>在web目录下新建一个目录a, a下新建一个目录b, b下新建一个c.html</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503150737741.png" alt="image-20210503150737741"></p><p>可以跳回test.html, 然后修改test.html</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503150838517.png" alt="image-20210503150838517"></p><p>然后访问：<a href="http://localhost:8080/HttpServlet/test.html" target="_blank" rel="noopener">http://localhost:8080/HttpServlet/test.html</a></p><p>两个HTML文件可以互相成功跳转。但是如果使用请求转发的方式就会出现问题：</p><p>新建Servlet：ForwardC</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503151141975.png" alt="image-20210503151141975"></p><p>将请求转发到a/b/c.html中。web.xml配置路径</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503151249092.png" alt="image-20210503151249092"></p><p>修改test.html</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503151335106.png" alt="image-20210503151335106"></p><p>因此可知，test.html跳转到FowardC, 然后FowardC将请求转发到c.html, 之后在c.html中点击跳转回test.html，然鹅真能跳回？</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503151541065.png" alt="image-20210503151541065"></p><p>这是因为请求转发时候，转发跳转到了c.html, 但是URL地址并没有变化</p><p><a href="http://localhost:8080/HttpServlet/ForwardC" target="_blank" rel="noopener">http://localhost:8080/HttpServlet/ForwardC</a></p><p>还是ForwardC, 因此导致了c.html中跳转回test.html的<code>../../test.html</code>失败，地址变成了：</p><p><a href="http://localhost:8080/test.html" target="_blank" rel="noopener">http://localhost:8080/test.html</a></p><p>因此需要base标签确定跳转的参照地址</p><p>在c.html中</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503151928719.png" alt="image-20210503151928719"></p><p>即可成功跳转。</p><h1 id="HttpServletResponse类"><a href="#HttpServletResponse类" class="headerlink" title="HttpServletResponse类"></a>HttpServletResponse类</h1><p>与Request一样，请求进来后，tomcat服务器都会生成一个Response对象，作为参数传到doGet或doPost中供我们使用。之前的输出都是在IDEA中打印的，而这个Response可以向客户端返回数据显示在客户端。</p><ul><li>getWriter()，字符流，返回字符串数据。</li><li>getOutputStream(), 字节流，返回的是二进制数据，通常用于下载。</li></ul><p>两种方法同时只能用其一。</p><h2 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h2><p>新建一个Response类，同时配置好访问路径，在类中的doGet方法中响应返回字符串数据。</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503175854087.png" alt="image-20210503175854087"></p><p>访问之后即可看到返回的数据。</p><p>如果是中文的话会乱码，因此还需要设置字符集是UTF-8.浏览器编码也要设置哦。</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503180345800.png" alt="image-20210503180345800"></p><p><strong>另有一个方法可以同时设置响应和浏览器编码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.setContentType(&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;)</span><br></pre></td></tr></table></figure><p>设置编码一定要在获取流对象即getWriter()方法之前使用。</p><h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><p><strong>第一种方案</strong></p><p>客户端向服务器发起一个请求，服务器响应时，将状态码修改成302，设置响应头是Location: URL, 这样客户端接受后就会重定向到新的URL地址。</p><p>新建Response1和Response2，配置web.xml的访问路径</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503181644543.png" alt="image-20210503181644543"></p><p>重新部署，然后访问response1</p><p><img src="/2021/05/02/JavaWeb%E5%AD%A6%E4%B9%A0-2/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210503181725946.png" alt="image-20210503181725946"></p><p>成功跳转到了Response2。</p><p>特点：</p><ol><li>URL地址变化</li><li>两次请求</li><li>不能共享域中的数据</li><li>不能跳转到WEB-INF中的资源文件</li><li>可以跳转到工程外的域名</li></ol><p><strong>第二种方案</strong></p><p>直接使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resp.sendRedirect(&quot;http:&#x2F;&#x2F;www.baidu.com&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续学习JavaWeb的Servlet.&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习(1)</title>
    <link href="https://ggyggy666.github.io/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/"/>
    <id>https://ggyggy666.github.io/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/</id>
    <published>2021-05-01T10:04:38.000Z</published>
    <updated>2021-05-02T14:59:55.784Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始好好学习JavaWeb。</p><a id="more"></a><p>主要是配合IDEA使用。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="IDEA添加tomcat"><a href="#IDEA添加tomcat" class="headerlink" title="IDEA添加tomcat"></a>IDEA添加tomcat</h2><p>前提：需要JAVA_HOME环境变量。</p><p>下载tomcat压缩包，解压后，在bin目录下点击startup.bat启动tomcat, 之后可以访问本地的8080端口看是否成功部署。成功后就可以关掉了。</p><p>IDEA中，进入settings设置，然后</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501181023506.png" alt="image-20210501181023506"></p><p>浏览目录，找到tomcat的安装目录，并确认</p><p><img src="https://i.loli.net/2021/05/01/Otf7NRo3UIwivZr.png" alt="image-20210501181121055"></p><p>自动显示出来了tomcat版本，确认后即可看到</p><p><img src="https://i.loli.net/2021/05/01/WlUXIQZhrgxFutf.png" alt="image-20210501181201515"></p><h2 id="新建JavaWeb工程"><a href="#新建JavaWeb工程" class="headerlink" title="新建JavaWeb工程"></a>新建JavaWeb工程</h2><p>点击File-&gt;new-&gt;new project，新建工程</p><p><img src="https://i.loli.net/2021/05/01/bEsZAdU4Mm5OurV.png" alt="image-20210501181332404"></p><p>按图中所示操作即可，之后next，输入项目名确认即可。</p><h2 id="导入第三方库"><a href="#导入第三方库" class="headerlink" title="导入第三方库"></a>导入第三方库</h2><p>首先在WEB-INF目录下新建一个lib目录，用来保存jar包</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501181635941.png" alt="image-20210501181635941"></p><p>导入第三方库有两种方法：</p><ol><li><p>复制jar包，鼠标移到lib目录，右键选择粘贴。然后再移到jar包，右键，选择：Add as library</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501181851414.png" alt="image-20210501181851414"></p></li><li><p>点击File-&gt;Project Structure</p><p><img src="https://i.loli.net/2021/05/01/Exzk2KvmiCDjt7B.png" alt="image-20210501181947452"></p><p>点击Libraries, 点击+</p><p><img src="https://i.loli.net/2021/05/01/VkC4glRZXOndEPw.png" alt="image-20210501182034698"></p><p>选择Java，然后浏览到jar包位置</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501182130167.png" alt="image-20210501182130167"></p><p>之后都是OK。然后点击Artifacts</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501182233103.png" alt="image-20210501182233103"></p><p>点击Fix, 选择添加</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501182321357.png" alt="image-20210501182321357"></p><p>OK之后可以在外部库中看到</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501182352781.png" alt="image-20210501182352781"></p></li></ol><h1 id="修改tomcat配置"><a href="#修改tomcat配置" class="headerlink" title="修改tomcat配置"></a>修改tomcat配置</h1><p>点击tomcat的配置进行编辑</p><p><img src="https://i.loli.net/2021/05/01/l5QTvqeWpdChUXx.png" alt="image-20210501182450280"></p><p>在Deployment中可以修改本项目的访问路径</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501182539202.png" alt="image-20210501182539202"></p><p>最好与工程名一致，即JavaWeb</p><p>在server中可以修改端口与热部署</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501182631195.png" alt="image-20210501182631195"></p><p>所谓热部署，就是在修改tomcat网页内容后，不用重启实例就能自动刷新网页。将On frame deactivation的值改为Update classes and resources就行。然后，On ‘Update’ action 修改为Restart server，意思是点击IDEA的tomcat的重启按钮时会默认显选中这个选项</p><p><img src="https://i.loli.net/2021/05/01/EbTFWC4B9PiA7tY.png" alt="image-20210501182916526"></p><h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>相当于是服务器程序，可以接受请求并响应。</p><h2 id="第一个Servlet程序"><a href="#第一个Servlet程序" class="headerlink" title="第一个Servlet程序"></a>第一个Servlet程序</h2><p>在JavaWeb目录下，new一个Web Application模块，然后在src中新建package: com.JavaWeb.servlet, 在该包下新建一个类：HelloServlet</p><p><img src="https://i.loli.net/2021/05/01/g15zS3QontHvE72.png" alt="image-20210501221949782"></p><p>然后这个类需要实现Servlet, 即添加上implements Servlet, 之后可以Alt+Enter, 自动出现需要实现的方法</p><p><img src="https://i.loli.net/2021/05/01/tVuz7aKsIT3m9G8.png" alt="image-20210501222111779"></p><p>在service方法中，输出一句话。这样当访问这个Servlet时就能打印这句话。有了Servlet程序之后，还需要给它配置访问路径。在web.xml中</p><p><img src="https://i.loli.net/2021/05/01/vG9Dsakgp28ZzMO.png" alt="image-20210501222230075"></p><p>首先添加一个servlet标签，里面是容器名以及链接到的类。然后是添加servlet-mapping, 给这个servlet配置访问路径。同样是需要容器名，后面的url-pattern即为访问目录。完整URL应为：工程所在路径+url-pattern, 工程所在路径即为tomcat配置的路径</p><p><img src="https://i.loli.net/2021/05/01/Vfaidg3utPpGHDX.png" alt="image-20210501222523594"></p><p>因此，访问：<a href="http://localhost:8080/JavaWeb/hello" target="_blank" rel="noopener">http://localhost:8080/JavaWeb/hello</a></p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501222600501.png" alt="image-20210501222600501"></p><p>输出日志将那句话打印了出来。</p><h2 id="Servlet函数执行顺序"><a href="#Servlet函数执行顺序" class="headerlink" title="Servlet函数执行顺序"></a>Servlet函数执行顺序</h2><p>首先Alt+Insert使用Generate功能为HelloServlet生成一个构造器，然后在构造函数、init、service、destroy函数下打印语句</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501223652762.png" alt="image-20210501223652762"></p><p>重启之后连续访问：<a href="http://localhost:8080/JavaWeb/hello" target="_blank" rel="noopener">http://localhost:8080/JavaWeb/hello</a></p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501223821069.png" alt="image-20210501223821069"></p><p>可以发现，构造函数和init函数只在最初访问servlet时调用，之后调用的都是service方法，而destroy函数则在点击停止tomcat时调用</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501223942868.png" alt="image-20210501223942868"></p><h2 id="区分请求类型是GET还是POST"><a href="#区分请求类型是GET还是POST" class="headerlink" title="区分请求类型是GET还是POST"></a>区分请求类型是GET还是POST</h2><p>servlet相当于服务器，接受客户端发送来的请求，那么就要识别出它是哪一种请求。</p><p>首先创建一个test.html，模拟一个form表单提交请求</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501225717489.png" alt="image-20210501225717489"></p><p>然后在Servlet的service中处理请求</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501225756466.png" alt="image-20210501225756466"></p><p>这里有一个点，HttpServletRequest是继承了servletRequest的。</p><p>首先创建一个httpServletRequest对象，然后使用getMethod()即可获得请求的方法，然后使用equals判断该请求是哪种类型。</p><p>先使用get方法，再使用post方法测试。访问：<a href="http://localhost:8080/JavaWeb/test.html" target="_blank" rel="noopener">http://localhost:8080/JavaWeb/test.html</a></p><p>点击页面的submit按钮</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210501230023728.png" alt="image-20210501230023728"></p><p>将处理的内容封装成一个函数，方便日后查看</p><p><img src="https://i.loli.net/2021/05/01/I9Uyobd183OMlHq.png" alt="image-20210501230303988"></p><h2 id="继承HttpServlet"><a href="#继承HttpServlet" class="headerlink" title="继承HttpServlet"></a>继承HttpServlet</h2><p>通常在项目中，都不会直接使用实现Servlet，而是使用继承HttpServlet</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502223803026.png" alt="image-20210502223803026"></p><p>同样在doGet()和doPost()方法中自定义代码</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502223928368.png" alt="image-20210502223928368"></p><p>web.xml中配置路径</p><p><img src="https://i.loli.net/2021/05/02/GjxkhRZKn5CHD9W.png" alt="image-20210502224050044"></p><p>之后修改test.html的action为hello2, 启动tomcat，访问test.html, 点击提交</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502224257814.png" alt="image-20210502224257814"></p><h2 id="直接使用IDEA生成HttpServlet程序"><a href="#直接使用IDEA生成HttpServlet程序" class="headerlink" title="直接使用IDEA生成HttpServlet程序"></a>直接使用IDEA生成HttpServlet程序</h2><p>上述的HttpServlet程序需要手动生成，有点麻烦。IDEA提供了直接生成</p><p>new-&gt;Create New Servlet</p><p><img src="https://i.loli.net/2021/05/02/2fraJEviekLZPYB.png" alt="image-20210502224530278"></p><p>然后填写Servlet的名称</p><p><img src="https://i.loli.net/2021/05/02/CT1KErjzqOgQWHF.png" alt="image-20210502224623540"></p><p>直接出现了Servlet程序</p><p><img src="https://i.loli.net/2021/05/02/CT1KErjzqOgQWHF.png" alt></p><p>同样在web.xml中配置路径即可</p><p><img src="/2021/05/01/JavaWeb%E5%AD%A6%E4%B9%A0-1/C:%5CUsers%5C29924%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210502225651902.png" alt="image-20210502225651902"></p><h2 id="整个Servlet体系"><a href="#整个Servlet体系" class="headerlink" title="整个Servlet体系"></a>整个Servlet体系</h2><p><img src="https://i.loli.net/2021/05/02/Kgp6vIfDbzMQWju.png" alt="image-20210502225746677"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天开始好好学习JavaWeb。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://ggyggy666.github.io/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb学习" scheme="https://ggyggy666.github.io/tags/JavaWeb%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
